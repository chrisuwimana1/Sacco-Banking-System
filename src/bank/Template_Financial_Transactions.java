/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bank;

/**
 *
 * @author chris
 */
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import java.text.DecimalFormat;
import bank.Helper;
<<<<<<< HEAD
=======
import java.awt.Desktop;
>>>>>>> d48411c8b541cbb001b25c42b3a3a3aa6a82c7a8
import java.util.prefs.BackingStoreException;

public class Template_Financial_Transactions extends javax.swing.JFrame {

    /**
     * Creates new form Template_Loan_Application_Analysis
     */
    PreparedStatement pst = null;
    ResultSet rs = null;
    DBConnection conn;
    DefaultTableModel model = new DefaultTableModel();
    String input_date;
    DecimalFormat formatter = new DecimalFormat("#,###.00");
    Helper helper;

    public Template_Financial_Transactions() {
        initComponents();
        try {
            conn = new DBConnection();
        } catch (BackingStoreException ex) {
            Logger.getLogger(Template_Financial_Transactions.class.getName()).log(Level.SEVERE, null, ex);
        }
        helper = new Helper();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        financial_transactions = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        generate = new javax.swing.JButton();
        export = new javax.swing.JButton();
        year_month = new javax.swing.JTextField();
        date_range_label = new javax.swing.JLabel();
        from_opening_date = new com.toedter.calendar.JDateChooser();
        to_opening_date = new com.toedter.calendar.JDateChooser();
        to_label = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        financial_transactions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Country", "LE_Book", "Year_Month", "Account_No", "Process_Ouc", "Card_No", "Merchant_Id", "Transaction_Channel", "Transaction_Code", "Currency", "Trans_Count_DR", "Trans_Count_CR", "Trans_Amount_DR_FCY", "Trans_Amount_DR_FCY", "Trans_Amount_DR_LCY", "Trans_Amount_CR_LCY"
            }
        ));
        jScrollPane1.setViewportView(financial_transactions);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 2523, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("YEAR MONTH:");

        generate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        generate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/Generate-tables-icon.png"))); // NOI18N
        generate.setText("GENERATE");
        generate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateActionPerformed(evt);
            }
        });

        export.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        export.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/Export-To-File-icon.png"))); // NOI18N
        export.setText("EXPORT");
        export.setEnabled(false);
        export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportActionPerformed(evt);
            }
        });

        year_month.setText("201809");

        date_range_label.setText("Date Range:");

        to_label.setText("To");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1004, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(year_month, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(285, 285, 285)
                        .addComponent(generate)
                        .addGap(26, 26, 26)
                        .addComponent(export))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(date_range_label)
                        .addGap(40, 40, 40)
                        .addComponent(from_opening_date, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(to_label)
                        .addGap(16, 16, 16)
                        .addComponent(to_opening_date, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(year_month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(date_range_label)
                    .addComponent(to_opening_date, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(from_opening_date, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(to_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generate)
                    .addComponent(export, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(58, 58, 58)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private String formatFloat(String s) {
        double stringToDouble = Float.parseFloat(s);
        return String.valueOf(formatter.format(stringToDouble));
    }

    private void generateTemplate() {

        if (from_opening_date.getDate() == null || to_opening_date.getDate() == null) {
            JOptionPane.showMessageDialog(null, "The start and end dates are required for this filter!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {

            java.util.Date fromDate = from_opening_date.getDate();
            java.util.Date toDate = to_opening_date.getDate();

            java.sql.Date sqlFromDate = new java.sql.Date(fromDate.getTime());
            java.sql.Date sqlToDate = new java.sql.Date(toDate.getTime());
            try {
                DefaultTableModel dtm = (DefaultTableModel) financial_transactions.getModel();
                dtm.setRowCount(0);
                dtm.setColumnCount(0);
                String sql = "SELECT tra.Account_Number,\n"
                        + " cu.Customer_ID, \n"
                        + " COUNT(Case transaction_type When 'Deposit' Then 1 END) NumberOfDeposits, \n"
                        + " COUNT(Case transaction_type When 'Withdraw' Then 1 END) NumberOfWithdrawals, \n"
                        + " SUM(Case transaction_type When 'Deposit' Then transaction_amount Else 0.0 End) TotalDeposits, \n"
                        + " SUM(Case transaction_type When 'Withdraw' Then transaction_amount Else 0.0 End) TotalWithdrawals \n"
                        + " FROM transactions tra inner join customer_information cu on tra.Account_Number=cu.Account_Number where transaction_date between ? and ?\n"
                        + " GROUP BY Account_Number";
                pst = conn.connection.prepareStatement(sql);
                pst.setString(1, sqlFromDate.toString());
                pst.setString(2, sqlToDate.toString());
                rs = pst.executeQuery();
                financial_transactions.setModel(model);
                model.addColumn("Country");
                model.addColumn("LE_Book");
                model.addColumn("Year_Month");
                model.addColumn("Account_No");
                model.addColumn("Process_Ouc");
                model.addColumn("Card_No");
                model.addColumn("Merchant_Id");
                model.addColumn("Transaction_Channel");
                model.addColumn("Transaction_Code");
                model.addColumn("Currency");
                model.addColumn("Trans_Count_DR");
                model.addColumn("Trans_Count_CR");
                model.addColumn("Trans_Amount_DR_FCY");
                model.addColumn("Trans_Amount_CR_FCY");
                model.addColumn("Trans_Amount_DR_LCY");
                model.addColumn("Trans_Amount_CR_LCY");

                while (rs.next()) {

                    String customerId = rs.getString("cu.Customer_ID");

                    String countDr = rs.getString("NumberOfWithdrawals");
                    String countCr = rs.getString("NumberOfDeposits");
                    String amountDr = rs.getString("TotalWithdrawals");
                    String amountCr = rs.getString("TotalDeposits");
                    model.addRow(new Object[]{"RWF", "519",
                        year_month.getText(), customerId,
                        "001", "0",
                        "", "PBI",
                        "TC00009", "RWF",
                        countDr, countCr,
                        formatFloat(amountDr), formatFloat(amountCr),
                        formatFloat(amountDr), formatFloat(amountCr)});
                }
                export.setEnabled(true);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }

    public void exportTable() {
<<<<<<< HEAD

        SXSSFWorkbook wb = new SXSSFWorkbook(-1);
        SXSSFSheet sh = (SXSSFSheet) wb.createSheet("Report");
        Row row = sh.createRow(0);
        for (int i = 0; i < model.getColumnCount(); i++) {
            Cell cell = row.createCell(i);
            cell.setCellValue(model.getColumnName(i));
        }
        for (int i = 0; i < model.getRowCount(); i++) {
            row = sh.createRow(i + 1);
            for (int j = 0; j < model.getColumnCount(); j++) {
                Cell cell = row.createCell(j);
                if (model.getValueAt(i, j) != null) {
                    cell.setCellValue(model.getValueAt(i, j).toString());
                } else {
                    cell.setCellValue("");
                }
            }
        }

        try {
            String fileName = "Sacco/";
            String directoryName = FileSystemView.getFileSystemView().getDefaultDirectory().getPath() + "/".concat(fileName);
            File dir = new File(directoryName);
            if (!dir.exists()) {
                dir.mkdirs();
            }

            FileOutputStream excel = new FileOutputStream(directoryName + year_month.getText() + "_FINMTH.xlsx");
            wb.write(excel);
            excel.flush();
            excel.close();
            JOptionPane.showMessageDialog(null, "The template was successfuly saved!");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Template_Account_Information.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Template_Account_Information.class.getName()).log(Level.SEVERE, null, ex);
        }
=======
        try {
                String fileName = "Sacco/";
                String directoryName = FileSystemView.getFileSystemView().getDefaultDirectory().getPath()+"/Documents/".concat(fileName);
                File dir = new File(directoryName);
                 if (!dir.exists()) dir.mkdirs();

                ExcelExporter exp = new ExcelExporter();
                exp.exportTable(financial_transactions, new File(directoryName+year_month.getText()+"_FINMTH.xls"));

                //OPEN FILE
                File tmpDir = new File(directoryName+year_month.getText()+"_FINMTH.xls");
                boolean exists = tmpDir.exists();
                  if (exists) {
                      Desktop dt = Desktop.getDesktop();
                      dt.open(new File(directoryName+year_month.getText()+"_FINMTH.xls"));
                  }
              } catch (IOException ex) {
                Logger.getLogger(Transaction.class.getName()).log(Level.SEVERE, null, ex);
              }
//        SXSSFWorkbook wb = new SXSSFWorkbook(-1);
//        SXSSFSheet sh = (SXSSFSheet) wb.createSheet("Report");
//        Row row = sh.createRow(0);
//        for (int i = 0; i < model.getColumnCount(); i++) {
//            Cell cell = row.createCell(i);
//            cell.setCellValue(model.getColumnName(i));
//        }
//        for (int i = 0; i < model.getRowCount(); i++) {
//            row = sh.createRow(i + 1);
//            for (int j = 0; j < model.getColumnCount(); j++) {
//                Cell cell = row.createCell(j);
//                if (model.getValueAt(i, j) != null) {
//                    cell.setCellValue(model.getValueAt(i, j).toString());
//                } else {
//                    cell.setCellValue("");
//                }
//            }
//        }
//
//        try {
//            String fileName = "Sacco/";
//            String directoryName = FileSystemView.getFileSystemView().getDefaultDirectory().getPath() + "/".concat(fileName);
//            File dir = new File(directoryName);
//            if (!dir.exists()) {
//                dir.mkdirs();
//            }
//
//            FileOutputStream excel = new FileOutputStream(directoryName + year_month.getText() + "_FINMTH.xlsx");
//            wb.write(excel);
//            excel.flush();
//            excel.close();
//            JOptionPane.showMessageDialog(null, "The template was successfuly saved!");
//        } catch (FileNotFoundException ex) {
//            Logger.getLogger(Template_Account_Information.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (IOException ex) {
//            Logger.getLogger(Template_Account_Information.class.getName()).log(Level.SEVERE, null, ex);
//        }
>>>>>>> d48411c8b541cbb001b25c42b3a3a3aa6a82c7a8
    }

    private void generateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateActionPerformed
        // TODO add your handling code here:
        if (year_month.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The YearMonth field is required for this filter!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            generateTemplate();
        }
    }//GEN-LAST:event_generateActionPerformed

    private void exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportActionPerformed
        // TODO add your handling code here:
        int dialogResult = JOptionPane.showConfirmDialog(null, "Would you like to export this table?");
        if (dialogResult == JOptionPane.YES_OPTION) {
            exportTable();
        }
    }//GEN-LAST:event_exportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Template_Financial_Transactions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Template_Financial_Transactions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Template_Financial_Transactions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Template_Financial_Transactions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Template_Financial_Transactions().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel date_range_label;
    private javax.swing.JButton export;
    private javax.swing.JTable financial_transactions;
    private com.toedter.calendar.JDateChooser from_opening_date;
    private javax.swing.JButton generate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel to_label;
    private com.toedter.calendar.JDateChooser to_opening_date;
    private javax.swing.JTextField year_month;
    // End of variables declaration//GEN-END:variables
}
