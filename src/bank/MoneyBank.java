/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bank;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class MoneyBank extends javax.swing.JFrame {

    /**
     * Creates new form MoneyBank
     */
    PreparedStatement pst = null;
    ResultSet rs = null;
    DBConnection conn;
    DefaultTableModel model = new DefaultTableModel();
    float previousBalance = 0;
    Preferences prefs = Preferences.userNodeForPackage(OtherTransaction.class);
    DecimalFormat formatter = new DecimalFormat("#,###.00");
    public MoneyBank() {
        initComponents();
        try {
            conn = new DBConnection();
        } catch (BackingStoreException ex) {
            Logger.getLogger(InitialDeposits.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        transaction_type = new javax.swing.JComboBox<>();
        amount = new javax.swing.JTextField();
        date_added = new com.toedter.calendar.JDateChooser();
        bank_account = new javax.swing.JTextField();
        bank_name = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        account_type = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Bank Name(*):");

        jLabel2.setText("Bank Account((*)):");

        jLabel3.setText("Transaction Type(*):");

        jLabel4.setText("Amount(*):");

        jLabel5.setText("Date(*):");

        transaction_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Type", "Deposit", "Withdraw" }));
        transaction_type.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                transaction_typeItemStateChanged(evt);
            }
        });

        jLabel6.setText("Account Type(*):");

        account_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Account Type", "Saving", "Current" }));
        account_type.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                account_typeItemStateChanged(evt);
            }
        });

        jButton1.setText("SAVE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(transaction_type, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(date_added, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(amount)
                            .addComponent(account_type, 0, 184, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bank_name)
                            .addComponent(bank_account))))
                .addGap(56, 56, 56))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(137, 137, 137))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(bank_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(bank_account, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(account_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(transaction_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(date_added, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(395, 262));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void transaction_typeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_transaction_typeItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_transaction_typeItemStateChanged

    private void account_typeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_account_typeItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_account_typeItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(transaction_type.getSelectedItem().toString().equalsIgnoreCase("Select Type")){
                JOptionPane.showMessageDialog(null, "Transaction Type field is required", "Error", JOptionPane.ERROR_MESSAGE);
        }
        if(account_type.getSelectedItem().toString().equalsIgnoreCase("Select Account Type")){
                JOptionPane.showMessageDialog(null, "Account Type field is required", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else if(amount.getText().isEmpty()){
             JOptionPane.showMessageDialog(null, "Amount field is required", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else if(bank_name.getText().isEmpty()){
             JOptionPane.showMessageDialog(null, "Bank Name field is required", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else if(bank_account.getText().isEmpty()){
             JOptionPane.showMessageDialog(null, "Bank Account field is required", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else if(date_added == null){
             JOptionPane.showMessageDialog(null, "Date field is required", "Error", JOptionPane.ERROR_MESSAGE);
        }else {
            java.util.Date specificDate = date_added.getDate();
            java.sql.Date specificDateSql = new java.sql.Date(specificDate.getTime());
            String transactionDate = specificDateSql.toString();
            try {
            String sql = "INSERT INTO `money_bank`(`id`, `bank_name`, `bank_account`, `account_type`, `transaction_type`, `amount`, `date`) VALUES (0,?,?,?,?,?,?)";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, bank_name.getText());
            pst.setString(2, bank_account.getText());
            pst.setString(3, account_type.getSelectedItem().toString());
            pst.setString(4, transaction_type.getSelectedItem().toString());
            pst.setString(5, amount.getText());
            pst.setString(6, transactionDate);
            pst.execute();
            float t_amount = Float.parseFloat(amount.getText());
            if(transaction_type.getSelectedItem().toString().equalsIgnoreCase("Deposit")){
                try {
                    record_transaction(
                            t_amount, 0, t_amount, 0,
                            0, transactionDate, "Withdraw", "BANK DEPOSIT",
                            "saccokacyiru", prefs.get("employee_key", ""));
                } catch (ParseException ex) {
                    Logger.getLogger(MoneyBank.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else if(transaction_type.getSelectedItem().toString().equalsIgnoreCase("Withdraw")){
                try {
                    record_transaction(
                            t_amount, 0, t_amount, 0,
                            0, transactionDate, "Deposit", "BANK WITHDRAW",
                            "saccokacyiru", prefs.get("employee_key", ""));
                } catch (ParseException ex) {
                    Logger.getLogger(MoneyBank.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            JOptionPane.showMessageDialog(null, "Saved");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MoneyBank.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MoneyBank.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MoneyBank.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MoneyBank.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MoneyBank().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> account_type;
    private javax.swing.JTextField amount;
    private javax.swing.JTextField bank_account;
    private javax.swing.JTextField bank_name;
    private com.toedter.calendar.JDateChooser date_added;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JComboBox<String> transaction_type;
    // End of variables declaration//GEN-END:variables
    private boolean record_transaction(
            float transactionAmount, float transactionCharges, float transaction_net_amount, float previousBalance,
            float currentBalance, String transactionDate, String transactionType, String transactionDescription,
            String accountNumber, String employeeKey) throws SQLException, ParseException {

        boolean message = false;
        String sql = "insert into transactions(transaction_amount,"
                + "transaction_charge,"
                + "transaction_net_amount,"
                + "previous_balance,"
                + "current_balance,"
                + "transaction_date,"
                + "transaction_type,"
                + "transaction_description,"
                + "Account_Number,"
                + "requestee,"
                + "employee_key) values (?,?,?,?,?,?,?,?,?,?,?)";
        pst = conn.connection.prepareStatement(sql);
        pst.setFloat(1, transactionAmount);
        pst.setFloat(2, transactionCharges);
        pst.setFloat(3, transaction_net_amount);
        pst.setFloat(4, previousBalance);
        pst.setFloat(5, currentBalance);
        pst.setString(6, transactionDate);
        pst.setString(7, transactionType);
        pst.setString(8, transactionDescription);
        pst.setString(9, accountNumber);
        pst.setString(10, "");
        pst.setString(11, employeeKey);
        int saved = pst.executeUpdate();

        if (saved > 0) {
            return message = true;
        }
        return message = false;
    }
}
