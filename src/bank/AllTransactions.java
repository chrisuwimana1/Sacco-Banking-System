/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bank;

import com.toedter.calendar.JDateChooser;
import java.awt.HeadlessException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author chris
 */
public class AllTransactions extends javax.swing.JFrame {

    /**
     * Creates new form AllTransactions
     */
    String acc_no;
    PreparedStatement pst = null;
    ResultSet rs = null;
    DBConnection conn;
    DefaultTableModel model = new DefaultTableModel();
    DecimalFormat formatter = new DecimalFormat("#,###.00");

    public AllTransactions() {
        initComponents();
        try {
            conn = new DBConnection();
        } catch (BackingStoreException ex) {
            Logger.getLogger(AllTransactions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        transaction_type = new javax.swing.JComboBox<>();
        to_transaction_date = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        go = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        from_transaction_date = new com.toedter.calendar.JDateChooser();
        date_choice = new javax.swing.JComboBox<>();
        transaction_date = new com.toedter.calendar.JDateChooser();
        date_range_label = new javax.swing.JLabel();
        date_label = new javax.swing.JLabel();
        to_label = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_of_transactions = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        total_withdraw = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        total_deposit = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        total_w_d = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Transactions Filter"));

        transaction_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Deposit", "Withdraw" }));
        transaction_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transaction_typeActionPerformed(evt);
            }
        });

        to_transaction_date.setEnabled(false);

        jLabel6.setText("Transaction Type:");

        go.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/Button-Next-icon.png"))); // NOI18N
        go.setText("GO");
        go.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goActionPerformed(evt);
            }
        });

        jLabel3.setText("Date Choice:");

        from_transaction_date.setEnabled(false);

        date_choice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select One", "Specific Date", "Date Range" }));
        date_choice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                date_choiceActionPerformed(evt);
            }
        });

        transaction_date.setEnabled(false);

        date_range_label.setText("Date Range:");

        date_label.setText("Date:");

        to_label.setText("To");
        to_label.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(date_label)
                            .addComponent(date_range_label))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(from_transaction_date, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(to_label)
                                .addGap(16, 16, 16)
                                .addComponent(to_transaction_date, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(transaction_date, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(transaction_type, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(196, 196, 196)
                        .addComponent(go))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(38, 38, 38)
                        .addComponent(date_choice, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(date_choice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(date_label, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(transaction_date, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(date_range_label)
                    .addComponent(to_transaction_date, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(from_transaction_date, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(to_label))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(transaction_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(go))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        list_of_transactions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Account Number", "Amount", "Charges", "Previous Balance", "Current Balance", "Transaction Type", "Description", "Transaction Date", "Teller"
            }
        ));
        list_of_transactions.setEnabled(false);
        jScrollPane1.setViewportView(list_of_transactions);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "TOTAL"));

        jLabel7.setText("Total Withdraw:");

        total_withdraw.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        total_withdraw.setText("00000.00");

        jLabel9.setText("Total Deposit:");

        total_deposit.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        total_deposit.setText("00000.00");

        jLabel11.setText("Total:");

        total_w_d.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        total_w_d.setText("00000.00");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel9)
                    .addComponent(jLabel11))
                .addGap(129, 129, 129)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(total_w_d)
                    .addComponent(total_deposit)
                    .addComponent(total_withdraw))
                .addContainerGap(167, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(total_withdraw))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(total_deposit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(total_w_d))
                .addGap(36, 36, 36))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private String formatFloat(String s) {
        float stringToFloat= Float.parseFloat(s);
        return String.valueOf(formatter.format(stringToFloat));
    }

    public AllTransactions(String acc_no, DBConnection conn, JComboBox<String> date_choice, JLabel date_label, JLabel date_range_label, JDateChooser from_transaction_date, JButton jButton1, JLabel jLabel3, JLabel jLabel6, JPanel jPanel1, JScrollPane jScrollPane1, JTable list_of_transactions, JLabel to_label, JDateChooser to_transaction_date, JDateChooser transaction_date, JComboBox<String> transaction_type) throws HeadlessException {
        this.acc_no = acc_no;
        this.conn = conn;
        this.date_choice = date_choice;
        this.date_label = date_label;
        this.date_range_label = date_range_label;
        this.from_transaction_date = from_transaction_date;
        this.go = jButton1;
        this.jLabel3 = jLabel3;
        this.jLabel6 = jLabel6;
        this.jPanel1 = jPanel1;
        this.jScrollPane1 = jScrollPane1;
        this.list_of_transactions = list_of_transactions;
        this.to_label = to_label;
        this.to_transaction_date = to_transaction_date;
        this.transaction_date = transaction_date;
        this.transaction_type = transaction_type;
    }

    private void filterData(String transactionType) throws ParseException {

        if (transaction_date.getDate() == null) {
            JOptionPane.showMessageDialog(null, "The specific date is required for this filter!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            java.util.Date specificDate = transaction_date.getDate();
            java.sql.Date specificDateSql = new java.sql.Date(specificDate.getTime());
            String transactionDate = specificDateSql.toString();

            try {
                DefaultTableModel dtm = (DefaultTableModel) list_of_transactions.getModel();
                dtm.setRowCount(0);
                dtm.setColumnCount(0);
                String sql = null;                  

                if (transactionType.equalsIgnoreCase("All")) {

                    sql = "SELECT `transaction_amount`, `transaction_charge`, `previous_balance`, `current_balance`, `transaction_date`, `transaction_type`, `transaction_description`, `Account_Number`, e.firstname, e.lastname FROM `transactions` INNER JOIN employees e on e.employee_key = transactions.employee_key WHERE transaction_date LIKE ? ORDER BY transaction_date DESC";
                    pst = conn.connection.prepareStatement(sql);
                    pst.setString(1, transactionDate);
                    rs = pst.executeQuery();
                    list_of_transactions.setModel(model);
                    model.addColumn("Account Number");
                    model.addColumn("Amount");
                    model.addColumn("Charges");
                    model.addColumn("Previous Balance");
                    model.addColumn("Current Balance");
                    model.addColumn("Transaction Type");
                    model.addColumn("Description");
                    model.addColumn("Transaction Date");
                    model.addColumn("Teller");
                    double totalWithdraw = 0.0;
                    double totalDeposit = 0.0;
                    double totalCharges = 0.0;

                    while (rs.next()) {
                        if (rs.getString("transaction_type").equalsIgnoreCase("Withdraw")) {
                            totalWithdraw += Double.parseDouble(rs.getString("transaction_amount"));
                        }
                        if (rs.getString("transaction_type").equalsIgnoreCase("Deposit")) {
                            totalDeposit += Double.parseDouble(rs.getString("transaction_amount"));
                        }
                        totalCharges += Double.parseDouble(rs.getString("transaction_charge"));
                        model.addRow(new Object[]{rs.getString("Account_Number"), formatFloat(rs.getString("transaction_amount")),
                            formatFloat(rs.getString("transaction_charge")), formatFloat(rs.getString("previous_balance")),
                            formatFloat(rs.getString("current_balance")), rs.getString("transaction_type"),
                            rs.getString("transaction_description"), rs.getString("transaction_date"),
                            rs.getString("firstname") + " " + rs.getString("lastname")
                        });
                    }
                    total_deposit.setText(formatFloat(totalDeposit+""));
                    total_withdraw.setText(formatFloat((totalWithdraw +totalCharges)+""));
                    total_w_d.setText(formatFloat((totalDeposit - (totalWithdraw +totalCharges))+""));
                } else {

                    sql = "SELECT `transaction_amount`, `transaction_charge`, `previous_balance`, `current_balance`, `transaction_date`, `transaction_type`, `transaction_description`, `Account_Number`, e.firstname, e.lastname FROM `transactions` INNER JOIN employees e on e.employee_key = transactions.employee_key WHERE transaction_date LIKE ? AND transaction_type = ? ORDER BY transaction_date DESC";
                    pst = conn.connection.prepareStatement(sql);
                    pst.setString(1, transactionDate);
                    pst.setString(2, transactionType);
                    rs = pst.executeQuery();
                   
                    list_of_transactions.setModel(model);
                    model.addColumn("Account Number");
                    model.addColumn("Amount");
                    model.addColumn("Charges");
                    model.addColumn("Previous Balance");
                    model.addColumn("Current Balance");
                    model.addColumn("Transaction Type");
                    model.addColumn("Description");
                    model.addColumn("Transaction Date");
                    model.addColumn("Teller");
                    double totalWithdraw = 0.0;
                    double totalDeposit = 0.0;
                    double totalCharges = 0.0;
                    
                    while (rs.next()) {
                        
                        if (rs.getString("transaction_type").equalsIgnoreCase("Withdraw")) {
                            totalWithdraw += Double.parseDouble(rs.getString("transaction_amount"));
                        }
                        if (rs.getString("transaction_type").equalsIgnoreCase("Deposit")) {
                            totalDeposit += Double.parseDouble(rs.getString("transaction_amount"));
                        }
                        totalCharges += Double.parseDouble(rs.getString("transaction_charge"));
                        
                        model.addRow(new Object[]{rs.getString("Account_Number"), formatFloat(rs.getString("transaction_amount")),
                            formatFloat(rs.getString("transaction_charge")), formatFloat(rs.getString("previous_balance")),
                            formatFloat(rs.getString("current_balance")), rs.getString("transaction_type"),
                            rs.getString("transaction_description"), rs.getString("transaction_date"),
                            rs.getString("firstname") + " " + rs.getString("lastname")
                        });
                    }
                    total_deposit.setText(formatFloat(totalDeposit+""));
                    total_withdraw.setText(formatFloat((totalWithdraw +totalCharges)+""));
                    total_w_d.setText(formatFloat((totalDeposit - (totalWithdraw +totalCharges))+""));
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }

    private void filterDatabyDate() throws ParseException {
        //String accountNumber = account_number.getText();
        String transactionType = transaction_type.getSelectedItem().toString();
        if (from_transaction_date.getDate() == null || to_transaction_date.getDate() == null) {
            JOptionPane.showMessageDialog(null, "The start and end dates are required for this filter!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            java.util.Date fromDate = from_transaction_date.getDate();
            java.util.Date toDate = to_transaction_date.getDate();

            java.sql.Date sqlFromDate = new java.sql.Date(fromDate.getTime());
            java.sql.Date sqlToDate = new java.sql.Date(toDate.getTime());
            String sql = null;
            try {
                DefaultTableModel dtm = (DefaultTableModel) list_of_transactions.getModel();
                dtm.setRowCount(0);
                dtm.setColumnCount(0);
                if (transactionType.equalsIgnoreCase("All")) {
                    sql = "SELECT `transaction_amount`, `transaction_charge`, `previous_balance`, `current_balance`, "
                            + "`transaction_date`, `transaction_type`, `transaction_description`, `Account_Number`, "
                            + "e.firstname, e.lastname FROM `transactions` "
                            + "INNER JOIN employees e on e.employee_key = transactions.employee_key "
                            + "WHERE transaction_date BETWEEN '" + sqlFromDate.toString() + "%' AND '" + sqlToDate.toString() + "%' ORDER BY transaction_date DESC";
                    
                    pst = conn.connection.prepareStatement(sql);
                    rs = pst.executeQuery(sql);
                    
                    list_of_transactions.setModel(model);
                    model.addColumn("Account Number");
                    model.addColumn("Amount");
                    model.addColumn("Charges");
                    model.addColumn("Previous Balance");
                    model.addColumn("Current Balance");
                    model.addColumn("Transaction Type");
                    model.addColumn("Description");
                    model.addColumn("Transaction Date");
                    model.addColumn("Teller");
                    double totalWithdraw = 0.0;
                    double totalDeposit = 0.0;
                    double totalCharges = 0.0;

                    while (rs.next()) {
                        if (rs.getString("transaction_type").equalsIgnoreCase("Withdraw")) {
                            totalWithdraw += Double.parseDouble(rs.getString("transaction_amount"));
                        }
                        if (rs.getString("transaction_type").equalsIgnoreCase("Deposit")) {
                            totalDeposit += Double.parseDouble(rs.getString("transaction_amount"));
                        }
                        totalCharges += Double.parseDouble(rs.getString("transaction_charge"));
                        
                        model.addRow(new Object[]{rs.getString("Account_Number"), formatFloat(rs.getString("transaction_amount")),
                            formatFloat(rs.getString("transaction_charge")), formatFloat(rs.getString("previous_balance")),
                            formatFloat(rs.getString("current_balance")), rs.getString("transaction_type"),
                            rs.getString("transaction_description"), rs.getString("transaction_date"),
                            rs.getString("firstname") + " " + rs.getString("lastname")
                        });
                    }
                    total_deposit.setText(formatFloat(totalDeposit+""));
                    total_withdraw.setText(formatFloat((totalWithdraw +totalCharges)+""));
                    total_w_d.setText(formatFloat((totalDeposit - (totalWithdraw +totalCharges))+""));
                } else {
                    sql = "SELECT `transaction_amount`, `transaction_charge`, `previous_balance`, `current_balance`, "
                            + "`transaction_date`, `transaction_type`, `transaction_description`, `Account_Number`, "
                            + "e.firstname, e.lastname FROM `transactions` "
                            + "INNER JOIN employees e on e.employee_key = transactions.employee_key "
                            + "WHERE transaction_type = ? and transaction_date BETWEEN '" + sqlFromDate.toString() + "%' AND '" + sqlToDate.toString() + "%' ORDER BY transaction_date DESC";
                    pst = conn.connection.prepareStatement(sql);
                    //pst.setString(1, accountNumber);
                    pst.setString(1, transactionType);
                    rs = pst.executeQuery();
                    //int count = 0;
                    list_of_transactions.setModel(model);
                    model.addColumn("Account Number");
                    model.addColumn("Amount");
                    model.addColumn("Charges");
                    model.addColumn("Previous Balance");
                    model.addColumn("Current Balance");
                    model.addColumn("Transaction Type");
                    model.addColumn("Description");
                    model.addColumn("Transaction Date");
                    model.addColumn("Teller");
                    double totalWithdraw = 0.0;
                    double totalDeposit = 0.0;
                    double totalCharges = 0.0;

                    while (rs.next()) {
                        
                        if (rs.getString("transaction_type").equalsIgnoreCase("Withdraw")) {
                            totalWithdraw += Double.parseDouble(rs.getString("transaction_amount"));
                        }
                        if (rs.getString("transaction_type").equalsIgnoreCase("Deposit")) {
                            totalDeposit += Double.parseDouble(rs.getString("transaction_amount"));
                        }
                        totalCharges += Double.parseDouble(rs.getString("transaction_charge"));
                        
                        model.addRow(new Object[]{rs.getString("Account_Number"), rs.getString("transaction_amount"),
                            rs.getString("transaction_charge"), rs.getString("previous_balance"),
                            rs.getString("current_balance"), rs.getString("transaction_type"),
                            rs.getString("transaction_description"), rs.getString("transaction_date"),
                            rs.getString("firstname") + " " + rs.getString("lastname")
                        });
                    }
                    total_deposit.setText(formatFloat(totalDeposit+""));
                    total_withdraw.setText(formatFloat((totalWithdraw +totalCharges)+""));
                    total_w_d.setText(formatFloat((totalDeposit - (totalWithdraw +totalCharges))+""));
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }

    private void date_choiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_date_choiceActionPerformed
        String dateChoice = (String) date_choice.getSelectedItem();
        if (dateChoice.equals("Specific Date")) {
            date_label.setEnabled(true);
            transaction_date.setEnabled(true);
            date_range_label.setEnabled(false);
            from_transaction_date.setEnabled(false);
            to_transaction_date.setEnabled(false);
            to_label.setEnabled(false);
        } else if (dateChoice.equals("Date Range")) {
            date_label.setEnabled(false);
            transaction_date.setEnabled(false);
            date_range_label.setEnabled(true);
            from_transaction_date.setEnabled(true);
            to_transaction_date.setEnabled(true);
            to_label.setEnabled(true);
        }
    }//GEN-LAST:event_date_choiceActionPerformed

    private void goActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goActionPerformed
        // TODO add your handling code here:
        // String accountNumber = account_number.getText();
        String transactionType = (String) transaction_type.getSelectedItem();
        String dateChoice = (String) date_choice.getSelectedItem();
        java.sql.Timestamp date = new java.sql.Timestamp(new java.util.Date().getTime());

        if (dateChoice.equalsIgnoreCase("Specific Date")) {
            try {
                filterData(transactionType);
            } catch (ParseException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        } else if (dateChoice.equalsIgnoreCase("Date Range")) {
            //populateTransactions(accountNumber);
            try {
                filterDatabyDate();
            } catch (ParseException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please pick the date choice Filter!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_goActionPerformed

    private void transaction_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transaction_typeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_transaction_typeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AllTransactions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AllTransactions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AllTransactions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AllTransactions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AllTransactions().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> date_choice;
    private javax.swing.JLabel date_label;
    private javax.swing.JLabel date_range_label;
    private com.toedter.calendar.JDateChooser from_transaction_date;
    private javax.swing.JButton go;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable list_of_transactions;
    private javax.swing.JLabel to_label;
    private com.toedter.calendar.JDateChooser to_transaction_date;
    private javax.swing.JLabel total_deposit;
    private javax.swing.JLabel total_w_d;
    private javax.swing.JLabel total_withdraw;
    private com.toedter.calendar.JDateChooser transaction_date;
    private javax.swing.JComboBox<String> transaction_type;
    // End of variables declaration//GEN-END:variables
}
