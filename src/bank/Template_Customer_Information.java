/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bank;

/**
 *
 * @author chris
 */
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;

public class Template_Customer_Information extends javax.swing.JFrame {

    /**
     * Creates new form Template_Customer_Information
     */
    String acc_no;
    PreparedStatement pst = null;
    ResultSet rs = null;
    DBConnection conn;
    DefaultTableModel model = new DefaultTableModel();
    String input_date;

    public Template_Customer_Information() throws BackingStoreException {
        initComponents();
        conn = new DBConnection();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrlPaneOne = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        customer_information = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        to_opening_date = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        from_opening_date = new com.toedter.calendar.JDateChooser();
        date_choice = new javax.swing.JComboBox<String>();
        date_last_modified = new com.toedter.calendar.JDateChooser();
        date_range_label = new javax.swing.JLabel();
        date_label = new javax.swing.JLabel();
        to_label = new javax.swing.JLabel();
        generate = new javax.swing.JButton();
        export = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        customer_information.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Country", "LE_Book", "Customer_ID", "Salutation", "Customer_Name", "Surname", "Forename_1", "Forename_2", "Customer_Acronym", "Vision_OUC", "Vision_SBU", "Account_Officer", "Customer_Open_Date", "Customer_Gender", "Date_of_Birth", "Place_of_Birth", "Marital_Status", "Spouse_Name", "Social_Economic_Class", "Next_of_kin_Name", "Next_of_kin_ID_Type", "Next_of_kin_ID_Number", "Next_of_kin_Telephone", "Next_of_kin_Email_ID", "Number_Of_Dependants", "Account_Mandate_Name", "Account_Mandate_ID_Number", "Nationality", "Residence", "Comm_Address_1", "Comm_Address_2", "Comm_Village", "Comm_Country", "Comm_Residence_Type", "Perm_Address_1", "Perm_Address_2", "Perm_Village", "Perm_Country", "Email_ID", "Work_Telephone", "Home_Telephone", "Fax_Number_1", "Fax_Number_2", "Education", "Customer_TIN", "NAICS_Code", "Economic_Sub_Sector_Code_ISIC", "Related_Party", "Relationship_Type", "Related_Party_Name", "Local_Govt_Member", "Internet_Banking_Subscription", "Mobile_Banking_Subscription", "SSN_Number", "National_ID_Type", "National_ID_Number", "Health_Insurance_Number", "Occupation", "Employer_Name", "Employee_ID", "Emp_Address_1", "Emp_Address_2", "Emp_Village", "Emp_Country", "Income", "Income_Frequency", "Group_Name", "Group_Number", "Legal_Status", "Customer_Status", "Date_Last_Modified"
            }
        ));
        jScrollPane1.setViewportView(customer_information);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 14113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(972, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        scrlPaneOne.setViewportView(jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Customer Info Template Filter"));

        to_opening_date.setEnabled(false);

        jLabel3.setText("Date Choice:");

        from_opening_date.setEnabled(false);

        date_choice.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Date Last Modified", "Account Opening Date" }));
        date_choice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                date_choiceActionPerformed(evt);
            }
        });

        date_range_label.setText("Date Range:");

        date_label.setText("Date:");

        to_label.setText("To");
        to_label.setEnabled(false);

        generate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        generate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/Generate-tables-icon.png"))); // NOI18N
        generate.setText("GENERATE");
        generate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateActionPerformed(evt);
            }
        });

        export.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        export.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/Export-To-File-icon.png"))); // NOI18N
        export.setText("EXPORT");
        export.setEnabled(false);
        export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(date_label)
                                    .addComponent(date_range_label))
                                .addGap(40, 40, 40)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(from_opening_date, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(to_label)
                                        .addGap(16, 16, 16)
                                        .addComponent(to_opening_date, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(date_last_modified, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(38, 38, 38)
                                .addComponent(date_choice, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(277, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(generate)
                        .addGap(18, 18, 18)
                        .addComponent(export)
                        .addGap(142, 142, 142))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(date_choice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(date_label, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(date_last_modified, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(date_range_label)
                    .addComponent(to_opening_date, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(from_opening_date, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(to_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generate)
                    .addComponent(export))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scrlPaneOne, javax.swing.GroupLayout.PREFERRED_SIZE, 1075, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(scrlPaneOne, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateTemplateByDateLastModified() {

        if (date_last_modified.getDate() == null) {
            JOptionPane.showMessageDialog(null, "The Date last modified is required for this filter!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            java.util.Date specificDate = date_last_modified.getDate();
            java.sql.Date specificDateSql = new java.sql.Date(specificDate.getTime());
            String inputDate = specificDateSql.toString();
            input_date=inputDate;
            try {
                DefaultTableModel dtm = (DefaultTableModel) customer_information.getModel();
                dtm.setRowCount(0);
                dtm.setColumnCount(0);

                String sql = "SELECT DATE_FORMAT(Date_of_Birth, '%d-%b-%Y') AS Date_of_Birth,DATE_FORMAT(Customer_Open_Date, '%d-%b-%Y') AS Customer_Open_Date,`Account_Number`, `Country`, `LE_Book`, `Customer_ID`, `Salutation`, `Customer_Name`, `Surname`, `Forename_1`, `Forename_2`, `Customer_Acronym`, `Vision_OUC`, `Vision_SBU`, `Account_Officer`, `Customer_Open_Date`, `Customer_Gender`, `Place_of_Birth`, `Marital_Status`, `Spouse_Name`, `Social_Economic_Class`, `Next_of_kin_Name`, `Next_of_kin_ID_Type`, `Next_of_kin_ID_Number`, `Next_of_kin_Telephone`, `Next_of_kin_Email_ID`, `Number_Of_Dependants`, `Account_Mandate_Name`, `Account_Mandate_ID_Type`, `Account_Mandate_ID_Number`, `Nationality`, `Residence`, `Comm_Address_1`, `Comm_Address_2`, `Comm_Village`, `Comm_Country`, `Comm_Residence_Type`, `Perm_Address_1`, `Perm_Address_2`, `Perm_Village`, `Perm_Country`, `Email_ID`, `Work_Telephone`, `Home_Telephone`, `Fax_Number_1`, `Fax_Number_2`, `Education`, `Customer_TIN`, `NAICS_Code`, `Economic_Sub_Sector_Code_ISIC`, `Related_Party`, `Relationship_Type`, `Related_Party_Name`, `Local_Govt_Member`, `Internet_Banking_Subscription`, `Mobile_Banking_Subscription`, `SSN_Number`, `National_ID_Type`, `National_ID_Number`, `Health_Insurance_Number`, `Occupation`, `Employer_Name`, `Employee_ID`, `Emp_Address_1`, `Emp_Address_2`, `Emp_Village`, `Emp_Country`, `Income`, `Income_Frequency`, `Group_Name`, `Group_Number`, `Legal_Status`, `Customer_Status`, DATE_FORMAT(Date_Last_Modified, '%d-%m-%Y %T') AS Date_Last_Modified FROM `customer_information` WHERE DATE (Date_Last_Modified) =?";
                pst = conn.connection.prepareStatement(sql);
                pst.setString(1, inputDate);
                rs = pst.executeQuery();
                //int count = 0;
                customer_information.setModel(model);
                model.addColumn("Country");
                model.addColumn("LE_Book");
                model.addColumn("Customer_ID");
                model.addColumn("Salutation");
                model.addColumn("Customer_Name");
                model.addColumn("Surname");
                model.addColumn("Forename_1");
                model.addColumn("Forename_2");
                model.addColumn("Customer_Acronym");
                model.addColumn("Vision_OUC");
                model.addColumn("Vision_SBU");
                model.addColumn("Account_Officer");
                model.addColumn("Customer_Open_Date");
                model.addColumn("Customer_Gender");
                model.addColumn("Date_of_Birth");
                model.addColumn("Place_of_Birth");
                model.addColumn("Marital_Status");
                model.addColumn("Spouse_Name");
                model.addColumn("Social_Economic_Class");
                model.addColumn("Next_of_kin_Name");
                model.addColumn("Next_of_kin_ID_Type");
                model.addColumn("Next_of_kin_ID_Number");
                model.addColumn("Next_of_kin_Telephone");
                model.addColumn("Next_of_kin_Email_ID");
                model.addColumn("Number_Of_Dependants");
                model.addColumn("Account_Mandate_Name");
                model.addColumn("Account_Mandate_ID_Type");
                model.addColumn("Account_Mandate_ID_Number");
                model.addColumn("Nationality");
                model.addColumn("Residence");
                model.addColumn("Comm_Address_1");
                model.addColumn("Comm_Address_2");
                model.addColumn("Comm_Village");
                model.addColumn("Comm_Country");
                model.addColumn("Comm_Residence_Type");
                model.addColumn("Perm_Address_1");
                model.addColumn("Perm_Address_2");
                model.addColumn("Perm_Village");
                model.addColumn("Perm_Country");
                model.addColumn("Email_ID");
                model.addColumn("Work_Telephone");
                model.addColumn("Home_Telephone");
                model.addColumn("Fax_Number_1");
                model.addColumn("Fax_Number_2");
                model.addColumn("Education");
                model.addColumn("Customer_TIN");
                model.addColumn("NAICS_Code");
                model.addColumn("Economic_Sub_Sector_Code_ISIC");
                model.addColumn("Related_Party");
                model.addColumn("Relationship_Type");
                model.addColumn("Related_Party_Name");
                model.addColumn("Local_Govt_Member");
                model.addColumn("Internet_Banking_Subscription");
                model.addColumn("Mobile_Banking_Subscription");
                model.addColumn("SSN_Number");
                model.addColumn("National_ID_Type");
                model.addColumn("National_ID_Number");
                model.addColumn("Health_Insurance_Number");
                model.addColumn("Occupation");
                model.addColumn("Employer_Name");
                model.addColumn("Employee_ID");
                model.addColumn("Emp_Address_1");
                model.addColumn("Emp_Address_2");
                model.addColumn("Emp_Village");
                model.addColumn("Emp_Country");
                model.addColumn("Income");
                model.addColumn("Income_Frequency");
                model.addColumn("Group_Name");
                model.addColumn("Group_Number");
                model.addColumn("Legal_Status");
                model.addColumn("Customer_Status");
                model.addColumn("Date_Last_Modified");
                while (rs.next()) {
                    //count++;
                    model.addRow(new Object[]{rs.getString("Country"), rs.getString("LE_Book"),
                        rs.getString("Customer_ID"), rs.getString("Salutation"),
                        rs.getString("Customer_Name"), rs.getString("Surname"),
                        rs.getString("Forename_1"), rs.getString("Forename_2"),
                        rs.getString("Customer_Acronym"), rs.getString("Vision_OUC"),
                        rs.getString("Vision_SBU"), rs.getString("Account_Officer"),
                        rs.getString("Customer_Open_Date"), rs.getString("Customer_Gender"),
                        rs.getString("Date_of_Birth"), rs.getString("Place_of_Birth"),
                        rs.getString("Marital_Status"), rs.getString("Spouse_Name"),
                        rs.getString("Social_Economic_Class"), rs.getString("Next_of_kin_Name"),
                        rs.getString("Next_of_kin_ID_Type"), rs.getString("Next_of_kin_ID_Number"),
                        rs.getString("Next_of_kin_Telephone"), rs.getString("Next_of_kin_Email_ID"),
                        rs.getString("Number_Of_Dependants"), rs.getString("Account_Mandate_Name"),
                        rs.getString("Account_Mandate_ID_Type"), rs.getString("Account_Mandate_ID_Number"),
                        rs.getString("Nationality"), rs.getString("Residence"),
                        rs.getString("Comm_Address_1"), rs.getString("Comm_Address_2"),
                        rs.getString("Comm_Village"), rs.getString("Comm_Country"),
                        rs.getString("Comm_Residence_Type"), rs.getString("Perm_Address_1"),
                        rs.getString("Perm_Address_2"), rs.getString("Perm_Village"),
                        rs.getString("Perm_Country"), rs.getString("Email_ID"),
                        rs.getString("Work_Telephone"), rs.getString("Home_Telephone"),
                        rs.getString("Fax_Number_1"), rs.getString("Fax_Number_2"),
                        rs.getString("Education"), rs.getString("Customer_TIN"),
                        rs.getString("NAICS_Code"), rs.getString("Economic_Sub_Sector_Code_ISIC"),
                        rs.getString("Related_Party"), rs.getString("Relationship_Type"),
                        rs.getString("Related_Party_Name"), rs.getString("Local_Govt_Member"),
                        rs.getString("Internet_Banking_Subscription"), rs.getString("Mobile_Banking_Subscription"),
                        rs.getString("SSN_Number"), rs.getString("National_ID_Type"),
                        rs.getString("National_ID_Number"), rs.getString("Health_Insurance_Number"),
                        rs.getString("Occupation"), rs.getString("Employer_Name"),
                        rs.getString("Employee_ID"), rs.getString("Emp_Address_1"),
                        rs.getString("Emp_Address_2"), rs.getString("Emp_Village"),
                        rs.getString("Emp_Country"), rs.getString("Income"),
                        rs.getString("Income_Frequency"), rs.getString("Group_Name"),
                        rs.getString("Group_Number"), rs.getString("Legal_Status"),
                        rs.getString("Customer_Status"), rs.getString("Date_Last_Modified"),});  
                }
                export.setEnabled(true);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }

    private void generateTemplateByAccountOpeningDate() {

        if (from_opening_date.getDate() == null || to_opening_date.getDate() == null) {
            JOptionPane.showMessageDialog(null, "The start and end dates are required for this filter!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            
            java.util.Date fromDate = from_opening_date.getDate();
            java.util.Date toDate = to_opening_date.getDate();

            java.sql.Date sqlFromDate = new java.sql.Date(fromDate.getTime());
            java.sql.Date sqlToDate = new java.sql.Date(toDate.getTime());
            
            input_date= sqlFromDate.toString()+"-"+sqlToDate.toString();
            try {
                DefaultTableModel dtm = (DefaultTableModel) customer_information.getModel();
                dtm.setRowCount(0);
                dtm.setColumnCount(0);

                String sql = "SELECT DATE_FORMAT(Date_of_Birth, '%d-%b-%Y') AS Date_of_Birth,DATE_FORMAT(Customer_Open_Date, '%d-%b-%Y') AS Customer_Open_Date,`Account_Number`, `Country`, `LE_Book`, `Customer_ID`, `Salutation`, `Customer_Name`, `Surname`, `Forename_1`, `Forename_2`, `Customer_Acronym`, `Vision_OUC`, `Vision_SBU`, `Account_Officer`, `Customer_Open_Date`, `Customer_Gender`, `Place_of_Birth`, `Marital_Status`, `Spouse_Name`, `Social_Economic_Class`, `Next_of_kin_Name`, `Next_of_kin_ID_Type`, `Next_of_kin_ID_Number`, `Next_of_kin_Telephone`, `Next_of_kin_Email_ID`, `Number_Of_Dependants`, `Account_Mandate_Name`, `Account_Mandate_ID_Type`, `Account_Mandate_ID_Number`, `Nationality`, `Residence`, `Comm_Address_1`, `Comm_Address_2`, `Comm_Village`, `Comm_Country`, `Comm_Residence_Type`, `Perm_Address_1`, `Perm_Address_2`, `Perm_Village`, `Perm_Country`, `Email_ID`, `Work_Telephone`, `Home_Telephone`, `Fax_Number_1`, `Fax_Number_2`, `Education`, `Customer_TIN`, `NAICS_Code`, `Economic_Sub_Sector_Code_ISIC`, `Related_Party`, `Relationship_Type`, `Related_Party_Name`, `Local_Govt_Member`, `Internet_Banking_Subscription`, `Mobile_Banking_Subscription`, `SSN_Number`, `National_ID_Type`, `National_ID_Number`, `Health_Insurance_Number`, `Occupation`, `Employer_Name`, `Employee_ID`, `Emp_Address_1`, `Emp_Address_2`, `Emp_Village`, `Emp_Country`, `Income`, `Income_Frequency`, `Group_Name`, `Group_Number`, `Legal_Status`, `Customer_Status`, DATE_FORMAT(Date_Last_Modified, '%d-%m-%Y %T') AS Date_Last_Modified FROM `customer_information` WHERE Customer_Open_Date BETWEEN '" + sqlFromDate.toString() + "%' AND '" + sqlToDate.toString() + "%' ORDER BY Customer_Open_Date DESC";
                pst = conn.connection.prepareStatement(sql);
                rs = pst.executeQuery();
                //int count = 0;
                customer_information.setModel(model);
                model.addColumn("Country");
                model.addColumn("LE_Book");
                model.addColumn("Customer_ID");
                model.addColumn("Salutation");
                model.addColumn("Customer_Name");
                model.addColumn("Surname");
                model.addColumn("Forename_1");
                model.addColumn("Forename_2");
                model.addColumn("Customer_Acronym");
                model.addColumn("Vision_OUC");
                model.addColumn("Vision_SBU");
                model.addColumn("Account_Officer");
                model.addColumn("Customer_Open_Date");
                model.addColumn("Customer_Gender");
                model.addColumn("Date_of_Birth");
                model.addColumn("Place_of_Birth");
                model.addColumn("Marital_Status");
                model.addColumn("Spouse_Name");
                model.addColumn("Social_Economic_Class");
                model.addColumn("Next_of_kin_Name");
                model.addColumn("Next_of_kin_ID_Type");
                model.addColumn("Next_of_kin_ID_Number");
                model.addColumn("Next_of_kin_Telephone");
                model.addColumn("Next_of_kin_Email_ID");
                model.addColumn("Number_Of_Dependants");
                model.addColumn("Account_Mandate_Name");
                model.addColumn("Account_Mandate_ID_Type");
                model.addColumn("Account_Mandate_ID_Number");
                model.addColumn("Nationality");
                model.addColumn("Residence");
                model.addColumn("Comm_Address_1");
                model.addColumn("Comm_Address_2");
                model.addColumn("Comm_Village");
                model.addColumn("Comm_Country");
                model.addColumn("Comm_Residence_Type");
                model.addColumn("Perm_Address_1");
                model.addColumn("Perm_Address_2");
                model.addColumn("Perm_Village");
                model.addColumn("Perm_Country");
                model.addColumn("Email_ID");
                model.addColumn("Work_Telephone");
                model.addColumn("Home_Telephone");
                model.addColumn("Fax_Number_1");
                model.addColumn("Fax_Number_2");
                model.addColumn("Education");
                model.addColumn("Customer_TIN");
                model.addColumn("NAICS_Code");
                model.addColumn("Economic_Sub_Sector_Code_ISIC");
                model.addColumn("Related_Party");
                model.addColumn("Relationship_Type");
                model.addColumn("Related_Party_Name");
                model.addColumn("Local_Govt_Member");
                model.addColumn("Internet_Banking_Subscription");
                model.addColumn("Mobile_Banking_Subscription");
                model.addColumn("SSN_Number");
                model.addColumn("National_ID_Type");
                model.addColumn("National_ID_Number");
                model.addColumn("Health_Insurance_Number");
                model.addColumn("Occupation");
                model.addColumn("Employer_Name");
                model.addColumn("Employee_ID");
                model.addColumn("Emp_Address_1");
                model.addColumn("Emp_Address_2");
                model.addColumn("Emp_Village");
                model.addColumn("Emp_Country");
                model.addColumn("Income");
                model.addColumn("Income_Frequency");
                model.addColumn("Group_Name");
                model.addColumn("Group_Number");
                model.addColumn("Legal_Status");
                model.addColumn("Customer_Status");
                model.addColumn("Date_Last_Modified");
                while (rs.next()) {
                    //count++;
                    model.addRow(new Object[]{rs.getString("Country"), rs.getString("LE_Book"),
                        rs.getString("Customer_ID"), rs.getString("Salutation"),
                        rs.getString("Customer_Name"), rs.getString("Surname"),
                        rs.getString("Forename_1"), rs.getString("Forename_2"),
                        rs.getString("Customer_Acronym"), rs.getString("Vision_OUC"),
                        rs.getString("Vision_SBU"), rs.getString("Account_Officer"),
                        rs.getString("Customer_Open_Date"), rs.getString("Customer_Gender"),
                        rs.getString("Date_of_Birth"), rs.getString("Place_of_Birth"),
                        rs.getString("Marital_Status"), rs.getString("Spouse_Name"),
                        rs.getString("Social_Economic_Class"), rs.getString("Next_of_kin_Name"),
                        rs.getString("Next_of_kin_ID_Type"), rs.getString("Next_of_kin_ID_Number"),
                        rs.getString("Next_of_kin_Telephone"), rs.getString("Next_of_kin_Email_ID"),
                        rs.getString("Number_Of_Dependants"), rs.getString("Account_Mandate_Name"),
                        rs.getString("Account_Mandate_ID_Type"), rs.getString("Account_Mandate_ID_Number"),
                        rs.getString("Nationality"), rs.getString("Residence"),
                        rs.getString("Comm_Address_1"), rs.getString("Comm_Address_2"),
                        rs.getString("Comm_Village"), rs.getString("Comm_Country"),
                        rs.getString("Comm_Residence_Type"), rs.getString("Perm_Address_1"),
                        rs.getString("Perm_Address_2"), rs.getString("Perm_Village"),
                        rs.getString("Perm_Country"), rs.getString("Email_ID"),
                        rs.getString("Work_Telephone"), rs.getString("Home_Telephone"),
                        rs.getString("Fax_Number_1"), rs.getString("Fax_Number_2"),
                        rs.getString("Education"), rs.getString("Customer_TIN"),
                        rs.getString("NAICS_Code"), rs.getString("Economic_Sub_Sector_Code_ISIC"),
                        rs.getString("Related_Party"), rs.getString("Relationship_Type"),
                        rs.getString("Related_Party_Name"), rs.getString("Local_Govt_Member"),
                        rs.getString("Internet_Banking_Subscription"), rs.getString("Mobile_Banking_Subscription"),
                        rs.getString("SSN_Number"), rs.getString("National_ID_Type"),
                        rs.getString("National_ID_Number"), rs.getString("Health_Insurance_Number"),
                        rs.getString("Occupation"), rs.getString("Employer_Name"),
                        rs.getString("Employee_ID"), rs.getString("Emp_Address_1"),
                        rs.getString("Emp_Address_2"), rs.getString("Emp_Village"),
                        rs.getString("Emp_Country"), rs.getString("Income"),
                        rs.getString("Income_Frequency"), rs.getString("Group_Name"),
                        rs.getString("Group_Number"), rs.getString("Legal_Status"),
                        rs.getString("Customer_Status"), rs.getString("Date_Last_Modified"),});
                }
                export.setEnabled(true);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }

    public void exportTable() {
        try {
                String fileName = "Sacco/";
                String directoryName = FileSystemView.getFileSystemView().getDefaultDirectory().getPath()+"/Documents/".concat(fileName);
                File dir = new File(directoryName);
                 if (!dir.exists()) dir.mkdirs();

                ExcelExporter exp = new ExcelExporter();
                exp.exportTable(customer_information, new File(directoryName+input_date+"_CUST.xls"));

                //OPEN FILE
                File tmpDir = new File(directoryName+input_date+"_CUST.xls");
                boolean exists = tmpDir.exists();
                  if (exists) {
                      Desktop dt = Desktop.getDesktop();
                      dt.open(new File(directoryName+input_date+"_CUST.xls"));
                  }
              } catch (IOException ex) {
                Logger.getLogger(Transaction.class.getName()).log(Level.SEVERE, null, ex);
              }
//        SXSSFWorkbook wb = new SXSSFWorkbook(-1);
//        SXSSFSheet sh = (SXSSFSheet) wb.createSheet("Report");
//        Row row = sh.createRow(0);
//        for (int i = 0; i < model.getColumnCount(); i++) {
//            Cell cell = row.createCell(i);
//            cell.setCellValue(model.getColumnName(i));
//        }
//
//        for (int i = 0; i < model.getRowCount(); i++) {
//            row = sh.createRow(i + 1);
//            for (int j = 0; j < model.getColumnCount(); j++) {
//                Cell cell = row.createCell(j);
//                if (model.getValueAt(i, j) != null) {
//                    cell.setCellValue(model.getValueAt(i, j).toString());
//                } else {
//                    cell.setCellValue("");
//                }
//            }
//        }
//        try {
//            String fileName = "Sacco/";
//            String directoryName = FileSystemView.getFileSystemView().getDefaultDirectory().getPath() + "/".concat(fileName);
//            File dir = new File(directoryName);
//            if (!dir.exists()) {
//                dir.mkdirs();
//            }
//            FileOutputStream excel = new FileOutputStream(directoryName + input_date + "_CUST.xlsx");
//            wb.write(excel);
//            excel.flush();
//            excel.close();
//            JOptionPane.showMessageDialog(null, "The template was successfuly saved!");
//        } catch (FileNotFoundException ex) {
//            Logger.getLogger(Template_Account_Information.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (IOException ex) {
//            Logger.getLogger(Template_Account_Information.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }

    private void exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportActionPerformed
        // TODO add your handling code here:
        int dialogResult = JOptionPane.showConfirmDialog(null, "Would you like to export this document?");
        if (dialogResult == JOptionPane.YES_OPTION) {
            exportTable();
        }
    }//GEN-LAST:event_exportActionPerformed

    private void generateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateActionPerformed

        String dateChoice = (String) date_choice.getSelectedItem();
     
        if (dateChoice.equalsIgnoreCase("Date Last Modified")) {
            generateTemplateByDateLastModified();
        } else {
            generateTemplateByAccountOpeningDate();
        }
    }//GEN-LAST:event_generateActionPerformed

    private void date_choiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_date_choiceActionPerformed
       
        String dateChoice = (String) date_choice.getSelectedItem();
        if (dateChoice.equals("Date Last Modified")) {
            date_label.setEnabled(true);
            date_last_modified.setEnabled(true);
            date_range_label.setEnabled(false);
            from_opening_date.setEnabled(false);
            to_opening_date.setEnabled(false);
            to_label.setEnabled(false);
        } else if (dateChoice.equals("Account Opening Date")) {
            date_label.setEnabled(false);
            date_last_modified.setEnabled(false);
            date_range_label.setEnabled(true);
            from_opening_date.setEnabled(true);
            to_opening_date.setEnabled(true);
            to_label.setEnabled(true);
        }
    }//GEN-LAST:event_date_choiceActionPerformed

    /**
     * @param args the command line arguments
         */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Template_Customer_Information.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Template_Customer_Information.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Template_Customer_Information.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Template_Customer_Information.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Template_Customer_Information().setVisible(true);
                } catch (BackingStoreException ex) {
                    Logger.getLogger(Template_Customer_Information.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable customer_information;
    private javax.swing.JComboBox<String> date_choice;
    private javax.swing.JLabel date_label;
    private com.toedter.calendar.JDateChooser date_last_modified;
    private javax.swing.JLabel date_range_label;
    private javax.swing.JButton export;
    private com.toedter.calendar.JDateChooser from_opening_date;
    private javax.swing.JButton generate;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane scrlPaneOne;
    private javax.swing.JLabel to_label;
    private com.toedter.calendar.JDateChooser to_opening_date;
    // End of variables declaration//GEN-END:variables
}
