/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bank;

import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import static java.awt.image.ImageObserver.HEIGHT;
import static java.awt.image.ImageObserver.WIDTH;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Blob;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Didier
 */
public class UploadAccountIDs extends javax.swing.JFrame {

    /**
     * Creates new form UploadAccountFiles
     */
    DBConnection conn;
    private DatabaseMetaData databaseMetaData;
    private ResultSet rs;
    PreparedStatement pst;
    private static final int IMG_WIDTH = 120;
    private static final int IMG_HEIGHT = 120;
    ImageIcon photo;
    WritableRaster raster;
    DataBufferByte data_front;
    DataBufferByte data_back;
    File image;
    public UploadAccountIDs(String account_number_) {
        initComponents();
        
        try {
            conn = new DBConnection();
        } catch (BackingStoreException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        //searchAccount(account_number_);
        account_number.setText(account_number_);
    }

    private UploadAccountIDs() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        account_number = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        upload_id = new javax.swing.JButton();
        upload_id2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        id_1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        id_2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Account Number:");

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "ID /Passport"));

        upload_id.setText("ID Front");
        upload_id.setEnabled(false);
        upload_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upload_idActionPerformed(evt);
            }
        });

        upload_id2.setText("ID Back");
        upload_id2.setEnabled(false);
        upload_id2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upload_id2ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        id_1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/no-image-slide.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(id_1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(id_1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        id_2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/no-image-slide.png"))); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(id_2, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(id_2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(374, 374, 374)
                .addComponent(upload_id)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(379, 379, 379)
                .addComponent(upload_id2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(upload_id)
                .addGap(40, 40, 40)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(upload_id2)
                .addGap(0, 24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 230, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(account_number, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(jButton1)
                .addGap(177, 177, 177))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(account_number, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(884, 678));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void upload_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upload_idActionPerformed
        // TODO add your handling code here:
        upload_file_front(id_1);
    }//GEN-LAST:event_upload_idActionPerformed

    private void upload_id2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upload_id2ActionPerformed
        // TODO add your handling code here:
        upload_file_back(id_2);
    }//GEN-LAST:event_upload_id2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        searchAccount(account_number.getText());
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UploadAccountIDs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UploadAccountIDs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UploadAccountIDs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UploadAccountIDs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UploadAccountIDs().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField account_number;
    private javax.swing.JLabel id_1;
    private javax.swing.JLabel id_2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton upload_id;
    private javax.swing.JButton upload_id2;
    // End of variables declaration//GEN-END:variables
    private void upload_file_front(JLabel picture_d){
        JFileChooser chooser;
        FileNameExtensionFilter filter;
        chooser = new JFileChooser();
        
        chooser.setCurrentDirectory(image);
        filter = new FileNameExtensionFilter("jpeg, png", "jpg", "png");
        chooser.addChoosableFileFilter(filter);
        int i = chooser.showOpenDialog(this);
        if (i == JFileChooser.APPROVE_OPTION) {
            image = chooser.getSelectedFile();
            try {
                BufferedImage originalImage = ImageIO.read(image);
                int type = originalImage.getType() == 0 ? BufferedImage.TYPE_INT_ARGB : originalImage.getType();
                
                BufferedImage resizeImageJPG =resizeImage(originalImage, type);
                photo = new ImageIcon(toImage(resizeImageJPG));
                
                raster = resizeImageJPG.getRaster();
                data_front = (DataBufferByte)raster.getDataBuffer();
                Image dimg = originalImage.getScaledInstance(picture_d.getWidth(), picture_d.getHeight(),
                Image.SCALE_SMOOTH);
                ImageIcon imgThisImg = new ImageIcon(dimg);
                picture_d.setText("");
                picture_d.setIcon(imgThisImg);
                
                if(account_number.getText().isEmpty()){
                    JOptionPane.showMessageDialog(null, "Account Number field is required", "Error", JOptionPane.ERROR_MESSAGE);
                }
                else if (check_uploaded("ID_FRONT", account_number.getText())) {
                    File file=new File(image.getAbsolutePath());
                    FileInputStream fis=new FileInputStream(file);
                    String sql = "UPDATE `account_files` SET `file`=? WHERE AccountNumber = ? AND file_title = ?";
                    try {
                        pst = conn.connection.prepareStatement(sql);
                        pst.setBinaryStream(1, fis);
                        pst.setString(2, account_number.getText());
                        pst.setString(3, "ID_FRONT");
                        pst.execute();
                        
                        JOptionPane.showMessageDialog(null, "Uploaded");
                        
                    } catch (SQLException e1) {
                        JOptionPane.showMessageDialog(null, e1);
                    }
                }else{
                    File file=new File(image.getAbsolutePath());
                    FileInputStream fis=new FileInputStream(file);
                    String sql = "INSERT INTO `account_files`(`id`, `AccountNumber`, `file_title`, `file`, `date_created`) VALUES (0,?,?,?,?)";
                    java.sql.Timestamp date = new java.sql.Timestamp(new java.util.Date().getTime());
                    try {
                        pst = conn.connection.prepareStatement(sql);
                        pst.setString(1, account_number.getText());
                        pst.setString(2, "ID_FRONT");
                        pst.setBinaryStream(3, fis);
                        pst.setTimestamp(4, date);
                        
                        pst.execute();
                        
                        JOptionPane.showMessageDialog(null, "Uploaded");
                        
                    } catch (SQLException e1) {
                        JOptionPane.showMessageDialog(null, e1);
                    }
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
            repaint();
            chooser.setCurrentDirectory(image);
        }
    }
    private void upload_file_back(JLabel picture_d){
        JFileChooser chooser;
        FileNameExtensionFilter filter;
        chooser = new JFileChooser();
        
        chooser.setCurrentDirectory(image);
        filter = new FileNameExtensionFilter("jpeg, png", "jpg", "png");
        chooser.addChoosableFileFilter(filter);
        int i = chooser.showOpenDialog(this);
        if (i == JFileChooser.APPROVE_OPTION) {
            image = chooser.getSelectedFile();
            try {
                BufferedImage originalImage = ImageIO.read(image);
                int type = originalImage.getType() == 0 ? BufferedImage.TYPE_INT_ARGB : originalImage.getType();
                
                BufferedImage resizeImageJPG =resizeImage(originalImage, type);
                photo = new ImageIcon(toImage(resizeImageJPG));
                
                raster = resizeImageJPG.getRaster();
                data_front = (DataBufferByte)raster.getDataBuffer();
                Image dimg = originalImage.getScaledInstance(picture_d.getWidth(), picture_d.getHeight(),
                Image.SCALE_SMOOTH);
                ImageIcon imgThisImg = new ImageIcon(dimg);
                picture_d.setText("");
                picture_d.setIcon(imgThisImg);
                if(account_number.getText().isEmpty()){
                    JOptionPane.showMessageDialog(null, "Account Number field is required", "Error", JOptionPane.ERROR_MESSAGE);
                }
                else if (check_uploaded("ID_BACK", account_number.getText())) {
                    File file=new File(image.getAbsolutePath());
                    FileInputStream fis=new FileInputStream(file);
                    String sql = "UPDATE `account_files` SET `file`=? WHERE AccountNumber = ? AND file_title = ?";
                    try {
                        pst = conn.connection.prepareStatement(sql);
                        pst.setBinaryStream(1, fis);
                        pst.setString(2, account_number.getText());
                        pst.setString(3, "ID_BACK");
                        pst.execute();
                        
                        JOptionPane.showMessageDialog(null, "Uploaded");
                        
                    } catch (SQLException e1) {
                        JOptionPane.showMessageDialog(null, e1);
                    }
                }else{
                    File file=new File(image.getAbsolutePath());
                    FileInputStream fis=new FileInputStream(file);
                    String sql = "INSERT INTO `account_files`(`id`, `AccountNumber`, `file_title`, `file`, `date_created`) VALUES (0,?,?,?,?)";
                    java.sql.Timestamp date = new java.sql.Timestamp(new java.util.Date().getTime());
                    try {
                        pst = conn.connection.prepareStatement(sql);
                        pst.setString(1, account_number.getText());
                        pst.setString(2, "ID_BACK");
                        pst.setBinaryStream(3, fis);
                        pst.setTimestamp(4, date);
                        
                        pst.execute();
                        
                        JOptionPane.showMessageDialog(null, "Uploaded");
                        
                    } catch (SQLException e1) {
                        JOptionPane.showMessageDialog(null, e1);
                    }
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
            repaint();
            chooser.setCurrentDirectory(image);
        }
    }
    
    private Image toImage(BufferedImage bufferedImage) {
        return Toolkit.getDefaultToolkit().createImage(bufferedImage.getSource());
    }

    private BufferedImage resizeImage(BufferedImage originalImage, int type) {
        BufferedImage resizeImage=new BufferedImage(WIDTH, HEIGHT, type);
        Graphics2D g =resizeImage.createGraphics();
        g.drawImage(originalImage, 0,0, IMG_WIDTH, IMG_HEIGHT, null);
        g.dispose();
        
        return resizeImage;
    }
    
    private void searchAccount(String accountNumber) {
        try {
            String sql = "SELECT Account_Number, Customer_ID, Customer_Name, National_ID_Number from customer_information where Account_Number = ?";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, accountNumber);
            rs = pst.executeQuery();
            if (rs.next()) {
                upload_id.setEnabled(true);
                upload_id2.setEnabled(true);
                get_photos(accountNumber);
            } else {
                JOptionPane.showMessageDialog(null, "Sorry this account does not exist!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }
    
    private void get_photos(String accountNumber) {
        try {
            String sql = "SELECT `file_title`, `file` FROM `account_files` where AccountNumber = ?";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, accountNumber);
            rs = pst.executeQuery();
            while (rs.next()) {
                if (rs.getString("file_title").equalsIgnoreCase("ID_FRONT")) {
                      
                    java.sql.Blob blob = rs.getBlob("file");  
                    InputStream in = blob.getBinaryStream();  
                    try {
                        BufferedImage image_ = ImageIO.read(in);
                        photo = new ImageIcon(toImage(image_));
                        raster = image_.getRaster();
                        data_front = (DataBufferByte)raster.getDataBuffer();
                        Image dimg = image_.getScaledInstance(id_1.getWidth(), id_1.getHeight(),
                        Image.SCALE_SMOOTH);
                        ImageIcon imgThisImg = new ImageIcon(dimg);
                        id_1.setText("");
                        id_1.setIcon(imgThisImg);
                    } catch (IOException ex) {
                        Logger.getLogger(UploadAccountIDs.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                }
                if (rs.getString("file_title").equalsIgnoreCase("ID_BACK")) {
                    java.sql.Blob blob = rs.getBlob("file");  
                    InputStream in = blob.getBinaryStream();  
                    try {
                        BufferedImage image_ = ImageIO.read(in);
                        photo = new ImageIcon(toImage(image_));
                        raster = image_.getRaster();
                        data_back = (DataBufferByte)raster.getDataBuffer();
                        Image dimg = image_.getScaledInstance(id_2.getWidth(), id_2.getHeight(),
                        Image.SCALE_SMOOTH);
                        ImageIcon imgThisImg = new ImageIcon(dimg);
                        id_2.setText("");
                        id_2.setIcon(imgThisImg);
                    } catch (IOException ex) {
                        Logger.getLogger(UploadAccountIDs.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }
    private boolean check_uploaded(String title, String accountNumber){
        try {
            String sql = "SELECT `file_title`, `file` FROM `account_files` where AccountNumber = ? AND file_title= ?";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, accountNumber);
            pst.setString(2, title);
            rs = pst.executeQuery();
            if (rs.next()) {
                return  true;
            }else{
                return  false;
            }
        } catch (SQLException ex) {
            Logger.getLogger(UploadAccountIDs.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }
}
