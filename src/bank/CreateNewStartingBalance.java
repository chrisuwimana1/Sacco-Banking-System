/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bank;

import java.awt.HeadlessException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.swing.JOptionPane;

/**
 *
 * @author limitlessapps
 */
public class CreateNewStartingBalance extends javax.swing.JFrame {

    /**
     * Creates new form CreateNewStartingBalance
     */
    PreparedStatement pst = null;
    ResultSet rs = null;
    DBConnection conn;
    String fullname;
    Preferences prefs = Preferences.userNodeForPackage(Login.class);
    
    public CreateNewStartingBalance() {
        initComponents();
        
        try {
            conn = new DBConnection();
        } catch (BackingStoreException ex) {
            Logger.getLogger(AddCharge.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //added by
        fullname=prefs.get("firstname", "")+" "+prefs.get("lastname", "");
        
        getAllTellers();
    }
    
    private void getAllTellers() {
        String sql = "Select firstname,lastname from employees where title = 'Teller'";
        String employeeName = "";
        try {
            pst = conn.connection.prepareStatement(sql);
            rs = pst.executeQuery();
            while (rs.next()) {
                employeeName = rs.getString("firstname") + " " + rs.getString("lastname");
                teller.addItem(employeeName);
            }
        } catch (SQLException e1) {
            JOptionPane.showMessageDialog(null, e1);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        go = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        teller = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        amount = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        addedDate = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        description = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "New Balance"));

        go.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/save-icon.png"))); // NOI18N
        go.setText("SAVE");
        go.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goActionPerformed(evt);
            }
        });

        jLabel1.setText("Teller(*):");

        jLabel3.setText("Amount(*):");

        jLabel2.setText("Date (*):");

        jLabel4.setText("Description(*):");

        description.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bank", "Bank Safe" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addGap(107, 107, 107)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(description, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addedDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(go, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(teller, 0, 201, Short.MAX_VALUE)
                            .addComponent(amount))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(teller, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(description, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(go)
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void goActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goActionPerformed
        // TODO add your handling code here:
        
        if (teller.getSelectedItem() !=null && !amount.getText().isEmpty()){
            try {
                saveBalance();
            } catch (ParseException ex) {
                Logger.getLogger(CreateNewStartingBalance.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "All fields are required!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_goActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateNewStartingBalance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateNewStartingBalance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateNewStartingBalance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateNewStartingBalance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateNewStartingBalance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser addedDate;
    private javax.swing.JTextField amount;
    private javax.swing.JComboBox<String> description;
    private javax.swing.JButton go;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox<String> teller;
    // End of variables declaration//GEN-END:variables

    private String getEmployeeKey(String lastName, String firstName) {
        System.err.println(lastName);
        System.err.println(firstName);

        String sql = "Select employee_key from employees where lastname = ? and firstname = ?";
        String employeeKey = "";
        try {
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, lastName);
            pst.setString(2, firstName);
            rs = pst.executeQuery();
            if (rs.next()) {
                employeeKey = rs.getString("employee_key");
            } else {
                JOptionPane.showMessageDialog(null, "No Teller Found!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e1) {
            JOptionPane.showMessageDialog(null, e1);
        }
        return employeeKey;
    }
    
    private void saveBalance() throws ParseException {
        String employeeName = teller.getSelectedItem().toString();
        String arr[] = employeeName.split(" ", 2);
        String employeeLastName = arr[1];   //the
        String employeeFirstName = arr[0];

        String employeeKey = getEmployeeKey(employeeLastName, employeeFirstName);
        float s_balance = Float.parseFloat(amount.getText());
        java.util.Date date = addedDate.getDate();
        java.sql.Date sqlDate = new java.sql.Date(date.getTime());
        
        String check_exist = "SELECT `id`, `teller`, `StartingBalance`, `currentBalance`, `addedDate` FROM `teller_balance` WHERE addedDate=? and teller=?";
        try {
            pst = conn.connection.prepareStatement(check_exist);
            pst.setString(1, sqlDate.toString());
            pst.setString(2, employeeKey);
            rs = pst.executeQuery();
            if (rs.next()) {
                int dialogResult = JOptionPane.showConfirmDialog (null, "Update "+teller.getSelectedItem().toString()+" 's balance?","Warning",JOptionPane.YES_NO_OPTION);
                if(dialogResult == JOptionPane.YES_OPTION){
                  String sql = "UPDATE `teller_balance` SET `StartingBalance`=?,`newBalance`=?,`updatedDate`=?,`currentBalance`=?, description=? WHERE addedDate=? and teller=?";
                    float old_s_b=rs.getFloat("StartingBalance");
                    float old_c_b=rs.getFloat("currentBalance");
                    float new_s_balance = old_s_b + Float.parseFloat(amount.getText());
                    float new_current_balance = old_c_b + Float.parseFloat(amount.getText());
                    try {
                        pst = conn.connection.prepareStatement(sql);

                        pst.setFloat(1, new_s_balance);
                        pst.setFloat(2, Float.parseFloat(amount.getText()));
                        pst.setString(3, sqlDate.toString());
                        pst.setFloat(4, new_current_balance);
                        pst.setString(5, description.getSelectedItem().toString());
                        pst.setString(6, sqlDate.toString());
                        pst.setString(7, employeeKey);
                        pst.execute();
                        JOptionPane.showMessageDialog(null, "Balance has been updated");
                        
                        record_transaction(
                                Float.parseFloat(amount.getText()), 0, new_s_balance, rs.getFloat("StartingBalance"),
                        new_current_balance, sqlDate.toString(), description.getSelectedItem().toString(), description.getSelectedItem().toString(),
                        "saccokacyiru", employeeKey);
                        
                        amount.setText("");

                        this.dispose();

                    }catch (HeadlessException | SQLException e) {
                        JOptionPane.showMessageDialog(null,e);
                    }
                }
            }else{
                String sql = "INSERT INTO `teller_balance`(`id`, `teller`, `StartingBalance`, `addedBy`, `addedDate`, `newBalance`, `updatedDate`, `currentBalance`, `description`) VALUES (0,?,?,?,?,?,?,?,?)";
                try {
                    pst = conn.connection.prepareStatement(sql);
                    pst.setString(1, employeeKey);
                    pst.setFloat(2, s_balance);
                    pst.setString(3, fullname);
                    pst.setString(4, sqlDate.toString());
                    pst.setFloat(5, 0);
                    pst.setString(6, sqlDate.toString());
                    pst.setFloat(7, s_balance);
                    pst.setString(8, description.getSelectedItem().toString());
                    pst.execute();
                    JOptionPane.showMessageDialog(null, "Balance has been Created");

                    amount.setText("");
                    
                    record_transaction(
                    s_balance, 0, s_balance, 0,
                    s_balance, sqlDate.toString(), description.getSelectedItem().toString(), description.getSelectedItem().toString(),
                    "saccokacyiru", employeeKey);

                }catch (HeadlessException | SQLException e) {
                    JOptionPane.showMessageDialog(null,e);
                }
            }
        } catch (SQLException e1) {
            JOptionPane.showMessageDialog(null, e1);
        }
    }
    
    
    private boolean record_transaction(
            float transactionAmount, float transactionCharges, float transaction_net_amount, float previousBalance,
            float currentBalance, String transactionDate, String transactionType, String transactionDescription,
            String accountNumber, String employeeKey) throws SQLException, ParseException {

        boolean message;
        String sql = "insert into transactions(transaction_amount,"
                + "transaction_charge,"
                + "transaction_net_amount,"
                + "previous_balance,"
                + "current_balance,"
                + "transaction_date,"
                + "transaction_type,"
                + "transaction_description,"
                + "Account_Number,"
                + "employee_key) values (?,?,?,?,?,?,?,?,?,?)";
        pst = conn.connection.prepareStatement(sql);
        pst.setFloat(1, transactionAmount);
        pst.setFloat(2, transactionCharges);
        pst.setFloat(3, transaction_net_amount);
        pst.setFloat(4, previousBalance);
        pst.setFloat(5, currentBalance);
        pst.setString(6, transactionDate);
        pst.setString(7, transactionType);
        pst.setString(8, transactionDescription);
        pst.setString(9, accountNumber);
        pst.setString(10, employeeKey);
        int saved = pst.executeUpdate();

        if (saved > 0) {
            return message = true;
        }
        return message = false;
    }
}
