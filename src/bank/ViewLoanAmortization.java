/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bank;

/**
 *
 * @author chris
 */
import com.placeholder.PlaceHolder;
import java.awt.HeadlessException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class ViewLoanAmortization extends javax.swing.JFrame {

    /**
     * Creates new form ViewLoanAmortization
     */
    PreparedStatement pst = null;
    ResultSet rs = null;
    DBConnection conn;
    PlaceHolder holder;
    DefaultTableModel model = new DefaultTableModel();
    int rowSelected = -1;
    String contract_id;

    boolean isPaymentFull = false;

    float currentAccumulatedAmount;
    float currentInterestPaid;
    float currentPrincipalPaid;
    float currentPrincipalOutstanding;
    float currentInterestOutstanding;
    float currentOutstandingAmount;
    float initialPrincipal;
    float initialInterest;

    float newPrincipalPaid;
    float newInterestPaid;
    float newAccumulatedAmount;
    float newPrincipalOutstanding;
    float newInterestOutstanding;
    float newOutstandingAmount;

    //fields from contract loans template
    float disbursedAmount;
    float princOutstanding;
    float interestDue;
    float dueAmount;
    int installementsInArrears;
    int numOfInstalments;
    int totalInstalmentsPaid;
    int totalInstalmentsOutstanding;

    float totalAmountDue;

    public ViewLoanAmortization(String contractId) {
        initComponents();
        conn = new DBConnection();
        holder = new PlaceHolder(charges, "0");
        //this.setVisible(true);
        contract_id = contractId;
        getCurrentLoanTableInformation(contractId);
        getContractLoanFields(contractId);
        getLoanAmortizationSchedule(contractId);
        getContractScheduleFields(contractId);
    }

    private ViewLoanAmortization() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        add_payment = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        loan_amortization_schedule = new javax.swing.JTable();
        save_payment = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        total_amount_paid = new javax.swing.JTextField();
        total_amount_paid_label = new javax.swing.JLabel();
        charges_label = new javax.swing.JLabel();
        principal = new javax.swing.JTextField();
        principal_label = new javax.swing.JLabel();
        total_button = new javax.swing.JButton();
        interest = new javax.swing.JTextField();
        payment_date_label = new javax.swing.JLabel();
        charges = new javax.swing.JTextField();
        payment_date = new com.toedter.calendar.JDateChooser();
        interest_label = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        add_payment.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        add_payment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/coin-add-icon.png"))); // NOI18N
        add_payment.setText("ADD PAYMENT");
        add_payment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_paymentActionPerformed(evt);
            }
        });

        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        loan_amortization_schedule.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "PmtNo", "Payment Date", "Beginning Balance", "Total Payment", "Principal", "Interest", "Ending Balance", "Amount Paid", "Pincipal Paid", "Interest Paid", "Charges", "Payment Date"
            }
        ));
        loan_amortization_schedule.setGridColor(new java.awt.Color(0, 0, 0));
        loan_amortization_schedule.setSelectionBackground(new java.awt.Color(34, 162, 86));
        loan_amortization_schedule.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loan_amortization_scheduleMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(loan_amortization_schedule);
        if (loan_amortization_schedule.getColumnModel().getColumnCount() > 0) {
            loan_amortization_schedule.getColumnModel().getColumn(0).setResizable(false);
            loan_amortization_schedule.getColumnModel().getColumn(0).setPreferredWidth(30);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1108, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(112, Short.MAX_VALUE))
        );

        save_payment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/Save-icon 2.png"))); // NOI18N
        save_payment.setText("SAVE");
        save_payment.setEnabled(false);
        save_payment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_paymentActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Loan Payment Details"));

        total_amount_paid.setEnabled(false);

        total_amount_paid_label.setText("Total Amount Paid (*):");
        total_amount_paid_label.setEnabled(false);

        charges_label.setText("Charges:");
        charges_label.setEnabled(false);

        principal.setEnabled(false);

        principal_label.setText("Principal (*):");
        principal_label.setEnabled(false);

        total_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/ok1.png"))); // NOI18N
        total_button.setText("Total");
        total_button.setEnabled(false);
        total_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                total_buttonActionPerformed(evt);
            }
        });

        interest.setEnabled(false);

        payment_date_label.setText("Payment Date (*):");
        payment_date_label.setEnabled(false);

        charges.setEnabled(false);

        payment_date.setEnabled(false);

        interest_label.setText("Interest (*):");
        interest_label.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(total_amount_paid_label)
                    .addComponent(charges_label)
                    .addComponent(interest_label)
                    .addComponent(principal_label)
                    .addComponent(payment_date_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(total_amount_paid)
                            .addComponent(charges)
                            .addComponent(interest)
                            .addComponent(principal, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(total_button))
                    .addComponent(payment_date, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(principal_label)
                    .addComponent(principal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(interest_label)
                    .addComponent(interest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(charges_label)
                    .addComponent(charges, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(total_amount_paid_label)
                    .addComponent(total_amount_paid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(total_button))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(payment_date_label)
                    .addComponent(payment_date, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(save_payment)
                .addGap(246, 246, 246))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 48, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(add_payment)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(153, 153, 153))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(add_payment)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(save_payment)
                .addGap(33, 33, 33)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void getContractLoanFields(String contractID) {

        try {
            String sql = "SELECT `Contract_ID`, `Disbursed_Amount`, `Prin_Outstanding_Amt_FCY`, "
                    + "`Interest_Due_FCY`, "
                    + "`Due_Amount`, `Instalments_In_Arrears`, `Num_of_Instalments`, "
                    + "`Total_Instalments_Paid`, `Total_Instalments_Outstanding` FROM `contract_loans` WHERE Contract_ID= ?";

            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, contractID);
            rs = pst.executeQuery();
            if (rs.next()) {
                disbursedAmount = rs.getFloat("Disbursed_Amount");
                princOutstanding = rs.getFloat("Prin_Outstanding_Amt_FCY");
                interestDue = rs.getFloat("Interest_Due_FCY");
                dueAmount = rs.getFloat("Due_Amount");
                installementsInArrears = rs.getInt("Instalments_In_Arrears");
                numOfInstalments = rs.getInt("Num_of_Instalments");
                totalInstalmentsPaid = rs.getInt("Total_Instalments_Paid");
                totalInstalmentsOutstanding = rs.getInt("Total_Instalments_Outstanding");

                System.out.println(disbursedAmount);
                System.out.println(princOutstanding);
                System.out.println(interestDue);
                System.out.println(dueAmount);
                System.out.println(installementsInArrears);
                System.out.println(numOfInstalments);
                System.out.println(totalInstalmentsPaid);
                System.out.println(totalInstalmentsOutstanding);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private void add_paymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_paymentActionPerformed

        //Check if a row was clicked
        model = (DefaultTableModel) loan_amortization_schedule.getModel();
        rowSelected = loan_amortization_schedule.getSelectedRow();
        if (rowSelected == -1) {
            JOptionPane.showMessageDialog(null, "No row was selected!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {

            totalAmountDue = Float.parseFloat(model.getValueAt(rowSelected, 3).toString());
            System.out.println(totalAmountDue);

            principal_label.setEnabled(true);
            interest_label.setEnabled(true);
            charges_label.setEnabled(true);
            total_amount_paid_label.setEnabled(true);
            payment_date_label.setEnabled(true);
            principal.setEnabled(true);
            interest.setEnabled(true);
            charges.setEnabled(true);
            total_amount_paid.setEnabled(true);
            payment_date.setEnabled(true);
            total_button.setEnabled(true);
            save_payment.setEnabled(true);
        }
    }//GEN-LAST:event_add_paymentActionPerformed

    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane1MouseClicked

    private void loan_amortization_scheduleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loan_amortization_scheduleMouseClicked
        // TODO add your handling code here:

        int row = loan_amortization_schedule.getSelectedRow();
        rowSelected = row;
        DefaultTableModel model = (DefaultTableModel) loan_amortization_schedule.getModel();

    }//GEN-LAST:event_loan_amortization_scheduleMouseClicked

    private void save_paymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_paymentActionPerformed
        // TODO add your handling code here:
        savePayment(rowSelected);

    }//GEN-LAST:event_save_paymentActionPerformed

    private void total_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_total_buttonActionPerformed
        // TODO add your handling code here:
        if (principal.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The principal field is required!", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (interest.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The interest field is required!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            float totalAmount = Float.parseFloat(principal.getText()) + Float.parseFloat(interest.getText()) + Float.parseFloat(charges.getText());
            total_amount_paid.setText(String.valueOf(totalAmount));
        }
    }//GEN-LAST:event_total_buttonActionPerformed

    private void updateSchedule(int rowSelected) {

        DefaultTableModel model = (DefaultTableModel) loan_amortization_schedule.getModel();

        float amountPaid = Float.parseFloat(model.getValueAt(rowSelected, 7).toString());
        float principalPaid = Float.parseFloat(model.getValueAt(rowSelected, 8).toString());
        float interestPaid = Float.parseFloat(model.getValueAt(rowSelected, 9).toString());
        float chargesFloat = Float.parseFloat(model.getValueAt(rowSelected, 10).toString());
        // Date paymentDate = new SimpleDateFormat("dd/MM/yyyy").parse(model.getValueAt(rowSelected, 11).toString());
        String paymentDate = model.getValueAt(rowSelected, 11).toString();
        System.out.println(paymentDate);

        //java.sql.Date sqlOpeningDate = new java.sql.Date(openingDate.getTime());
        try {
            String sql = "UPDATE `loan_amortization` SET `Amount_Paid` = ?,"
                    + "`Principal_Paid` = ?, "
                    + "`Interest_Paid`= ?, "
                    + "`Charges`= ?, "
                    + "`Payment_Date`= ?, `Date_Last_Modified` = NOW() WHERE Contract_ID= ? AND Payment_Number = ?";
            pst = conn.connection.prepareStatement(sql);
            pst.setFloat(1, amountPaid);
            pst.setFloat(2, principalPaid);
            pst.setFloat(3, interestPaid);
            pst.setFloat(4, chargesFloat);
            pst.setString(5, paymentDate);
            pst.setString(6, contract_id);
            pst.setInt(7, rowSelected + 1);
            int update = pst.executeUpdate();
            if (update > 0) {
                JOptionPane.showMessageDialog(null, "The loan Amortization Schedule was updated!");
            }
        } catch (HeadlessException | SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    //private void 
    private void getContractScheduleFields(String contractID) {
        try {
            String sql = "SELECT  `Contract_ID`, `Schedule_Date`, `Payment_Date`,"
                    + " `Principal_Amount_Due_LCY`, `Int_Amount_Due_LCY`, `Principal_Amount_Paid_LCY`,"
                    + " `Int_Amount_Paid_LCY`, `Outstanding_Amount_LCY` FROM `contract_schedules` WHERE Contract_ID=? ";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, contractID);
            rs = pst.executeQuery();
            if (rs.next()) {

            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }

    }

    private void updateContractScheduleTemplate(String contractID, float newPrincipalPaid,
            float newInterestPaid, float newPrincipalOutstanding, float newInterestOutstanding,
            float newOutstandingAmount, String paymentDate) {

        try {
            String sql = "UPDATE `contract_schedules` SET `Payment_Date` = ?,"
                    + "`Principal_Amount_Due_LCY` = ?, "
                    + "`Principal_Amount_Due_FCY` = ?, "
                    + "`Int_Amount_Due_LCY`= ?, "
                    + "`Int_Amount_Due_FCY`= ?, "
                    + "`Principal_Amount_Paid_LCY`= ?, "
                    + "`Principal_Amount_Paid_FCY`= ?, "
                    + "`Int_Amount_Paid_LCY`= ?, "
                    + "`Int_Amount_Paid_FCY`= ?, "
                    + "`Outstanding_Amount_LCY`= ?, "
                    + "`Outstanding_Amount_FCY`= ?  where Contract_ID =?";

            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, paymentDate);
            pst.setFloat(2, newPrincipalOutstanding);
            pst.setFloat(3, newPrincipalOutstanding);
            pst.setFloat(4, newInterestOutstanding);
            pst.setFloat(5, newInterestOutstanding);
            pst.setFloat(6, newPrincipalPaid);
            pst.setFloat(7, newPrincipalPaid);
            pst.setFloat(8, newInterestPaid);
            pst.setFloat(9, newInterestPaid);
            pst.setFloat(10, newOutstandingAmount);
            pst.setFloat(11, newOutstandingAmount);
            pst.setString(12, contractID);
            int update = pst.executeUpdate();
            System.out.println(update);
            if (update > 0) {
                //updateContractScheduleTemplate();
                // JOptionPane.showMessageDialog(null, "The loan Amortization Schedule was updated!");
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private void updateContractLoanTemplate(String contractID,
            float newPrincipalOutstanding, float newInterestOutstanding,
            float newOutstandingAmount, float newAccumulatedAmount, 
            int totalInstalmentsPaid, int totalInstalmentsOutstanding) {

        try {
            String sql = "UPDATE `contract_loans` SET "
                    + "`Disbursed_Amount` = ?, "
                    + "`Prin_Outstanding_Amt_FCY` = ?, "
                    + "`Prin_Outstanding_Amt_LCY`= ?, "
                    + "`Interest_Due_FCY`= ?, "
                    + "`Interest_Due_LCY`= ?, "
                    + "`Total_Instalments_Paid`= ?, "
                    + "`Total_Instalments_Outstanding`= ?, "
                    + "`Due_Amount`= ?, "
                    + "`Date_Last_Modified` = NOW()  where Contract_ID =?";

            pst = conn.connection.prepareStatement(sql);
            pst.setFloat(1, newAccumulatedAmount);
            pst.setFloat(2, newPrincipalOutstanding);
            pst.setFloat(3, newPrincipalOutstanding);
            pst.setFloat(4, newInterestOutstanding);
            pst.setFloat(5, newInterestOutstanding);
            pst.setInt(6, totalInstalmentsPaid);
            pst.setInt(7, totalInstalmentsOutstanding);
            pst.setFloat(8, newOutstandingAmount);
            pst.setString(9, contractID);
            int update = pst.executeUpdate();
            if (update > 0) {
                //updateContractScheduleTemplate();
                // JOptionPane.showMessageDialog(null, "The loan Amortization Schedule was updated!");
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private void updateAccountInformationTemplate(String contractId, String paymentDate) {

        try {
            String sql = "UPDATE `account_information` SET `Last_Transaction_Date` = ?, `Date_Last_Modified` = NOW() where Account_No =?";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, paymentDate);
            pst.setString(2, contractId);
            int update = pst.executeUpdate();
            if (update > 0) {
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private void getLoanAmortizationSchedule(String contractId) {
        try {

            String sql = "Select `Contract_ID`, "
                    + "`Payment_Number`, "
                    + "`DueDate`, "
                    + "`Beginning_Balance`, "
                    + "`Total_Payment`, "
                    + "`Principal`, "
                    + "`Interest`, "
                    + "`Ending_Balance`, "
                    + "`Amount_Paid`, "
                    + "`Principal_Paid`, "
                    + "`Interest_Paid`, "
                    + "`Charges`, "
                    + "`Payment_Date` FROM `loan_amortization` WHERE Contract_ID = ? ORDER BY DueDate ASC";

            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, contractId);
            rs = pst.executeQuery();
            DefaultTableModel dtm = (DefaultTableModel) loan_amortization_schedule.getModel();
            dtm.setRowCount(0);
            dtm.setColumnCount(0);
            loan_amortization_schedule.setModel(model);
            model.addColumn("PmtNo");
            model.addColumn("Payment Date");
            model.addColumn("Beginning Balance");
            model.addColumn("Total Payment");
            model.addColumn("Principal");
            model.addColumn("Interest");
            model.addColumn("Ending Balance");
            model.addColumn("Amount Paid");
            model.addColumn("Principal Paid");
            model.addColumn("Interest Paid");
            model.addColumn("Charges");
            model.addColumn("Payment Date");

            while (rs.next()) {
                model.addRow(new Object[]{rs.getString("Payment_Number"), rs.getString("DueDate"),
                    rs.getString("Beginning_Balance"), rs.getString("Total_Payment"),
                    rs.getString("Principal"), rs.getString("Interest"),
                    rs.getString("Ending_Balance"), rs.getString("Amount_Paid"),
                    rs.getString("Principal_Paid"), rs.getString("Interest_Paid"),
                    rs.getString("Charges"), rs.getString("Payment_Date")
                });
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }

    }

    private void savePayment(int rowSelected) {

        if (total_amount_paid.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The total amount paid field is required!", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (payment_date.getDate() == null) {
            JOptionPane.showMessageDialog(null, "The payment date field is required!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {

            float principalPaid = Float.parseFloat(principal.getText());
            float interestPaid = Float.parseFloat(interest.getText());
            float totalAccumulatedAmount = principalPaid + interestPaid;
            float totalCharges = Float.parseFloat(charges.getText());
            float totalAmountPaid = Float.parseFloat(total_amount_paid.getText());

            checkForFullPayment(totalAmountPaid, totalAmountDue);

            java.util.Date paymentDate = payment_date.getDate();
            java.sql.Date sqlPaymentDate = new java.sql.Date(paymentDate.getTime());

            newPrincipalPaid = currentPrincipalPaid + principalPaid;
            newInterestPaid = currentInterestPaid + interestPaid;
            newAccumulatedAmount = currentAccumulatedAmount + totalAccumulatedAmount;

            newPrincipalOutstanding = initialPrincipal - newPrincipalPaid;
            newInterestOutstanding = initialInterest - newInterestPaid;
            newOutstandingAmount = initialPrincipal + initialInterest - newAccumulatedAmount;

            DefaultTableModel model = (DefaultTableModel) loan_amortization_schedule.getModel();
            model.setValueAt(total_amount_paid.getText(), rowSelected, 7);
            model.setValueAt(principal.getText(), rowSelected, 8);
            model.setValueAt(interest.getText(), rowSelected, 9);
            model.setValueAt(charges.getText(), rowSelected, 10);
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            model.setValueAt(format.format(payment_date.getDate()), rowSelected, 11);
            updateSchedule(rowSelected);
            updateLoanTable(contract_id, newPrincipalPaid, newInterestPaid, newAccumulatedAmount,
                    newPrincipalOutstanding, newInterestOutstanding, newOutstandingAmount);
           
            updateContractScheduleTemplate(contract_id, newPrincipalPaid, newInterestPaid,
                    newPrincipalOutstanding, newInterestOutstanding, newOutstandingAmount, sqlPaymentDate.toString());

            if (isPaymentFull == true) {
                totalInstalmentsPaid += 1;
                totalInstalmentsOutstanding -=1;
            }
            updateContractLoanTemplate(contract_id,
                    newPrincipalOutstanding, newInterestOutstanding, newOutstandingAmount, newAccumulatedAmount, totalInstalmentsPaid, totalInstalmentsOutstanding);

            //updateAccountInformationTemplate(contract_id, sqlPaymentDate.toString());
            disableLoanPaymentsFields();

        }
    }

    private void disableLoanPaymentsFields() {

        principal_label.setEnabled(false);
        principal.setText("");
        principal.setEnabled(false);
        interest_label.setEnabled(false);
        interest.setText("");
        interest.setEnabled(false);
        charges_label.setEnabled(false);
        charges.setText("");
        charges.setEnabled(false);
        payment_date.setEnabled(false);
        payment_date_label.setEnabled(false);

        total_amount_paid_label.setEnabled(false);
        total_amount_paid.setText("");
        total_amount_paid.setEnabled(false);

        total_button.setEnabled(false);
        total_button.setEnabled(false);
        save_payment.setEnabled(false);
        //add_payment.setEnabled(false);
    }

    private void getCurrentLoanTableInformation(String contractID) {

        try {
            String sql = "SELECT `Contract_ID`, `Principal`, `Interest`, `Principal_Paid`, "
                    + "`Interest_Paid`, `Accumulated_Amount`, `Principal_Outstanding`, "
                    + "`Interest_Outstanding`, `Outstanding_Amount` FROM `loan_table` WHERE Contract_ID= ?";

            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, contractID);
            rs = pst.executeQuery();
            if (rs.next()) {
                initialPrincipal = rs.getFloat("Principal");
                initialInterest = rs.getFloat("Interest");
                currentPrincipalPaid = rs.getFloat("Principal_Paid");
                currentInterestPaid = rs.getFloat("Interest_Paid");
                currentAccumulatedAmount = rs.getFloat("Accumulated_Amount");
                currentPrincipalOutstanding = rs.getFloat("Principal_Outstanding");
                currentInterestOutstanding = rs.getFloat("Interest_Outstanding");
                currentOutstandingAmount = rs.getFloat("Outstanding_Amount");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private void updateLoanTable(String contracID, float newPrincipalPaid, float newInterestPaid,
            float newAccumulatedAmount, float newPrincipalOutstanding, float newInterestOutstanding,
            float newOutstandingAmount) {
        getCurrentLoanTableInformation(contracID);
        try {
            String sql = "UPDATE `loan_table` SET `Principal_Paid` = ?,"
                    + "`Interest_Paid` = ?, "
                    + "`Accumulated_Amount`= ?, "
                    + "`Principal_Outstanding`= ?, "
                    + "`Interest_Outstanding`= ?, "
                    + "`Outstanding_Amount`= ? WHERE Contract_ID = ?";
            pst = conn.connection.prepareStatement(sql);
            pst.setFloat(1, newPrincipalPaid);
            pst.setFloat(2, newInterestPaid);
            pst.setFloat(3, newAccumulatedAmount);
            pst.setFloat(4, newPrincipalOutstanding);
            pst.setFloat(5, newInterestOutstanding);
            pst.setFloat(6, newOutstandingAmount);
            pst.setString(7, contracID);
            int update = pst.executeUpdate();
            if (update > 0) {
                System.out.println("Successful");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewLoanAmortization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewLoanAmortization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewLoanAmortization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewLoanAmortization.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewLoanAmortization().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_payment;
    private javax.swing.JTextField charges;
    private javax.swing.JLabel charges_label;
    private javax.swing.JTextField interest;
    private javax.swing.JLabel interest_label;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable loan_amortization_schedule;
    private com.toedter.calendar.JDateChooser payment_date;
    private javax.swing.JLabel payment_date_label;
    private javax.swing.JTextField principal;
    private javax.swing.JLabel principal_label;
    private javax.swing.JButton save_payment;
    private javax.swing.JTextField total_amount_paid;
    private javax.swing.JLabel total_amount_paid_label;
    private javax.swing.JButton total_button;
    // End of variables declaration//GEN-END:variables

    private void checkForFullPayment(float totalAmountPaid, float totalAmountDue) {

        if (totalAmountPaid > totalAmountDue || totalAmountPaid == totalAmountDue) {
            isPaymentFull = true;
        }
    }
}
