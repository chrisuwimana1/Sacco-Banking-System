/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bank;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class OtherTransaction extends javax.swing.JFrame {

    /**
     * Creates new form OtherTransaction
     */
    PreparedStatement pst = null;
    ResultSet rs = null;
    DBConnection conn;
    DefaultTableModel model = new DefaultTableModel();
    float previousBalance = 0;
    Preferences prefs = Preferences.userNodeForPackage(OtherTransaction.class);
    DecimalFormat formatter = new DecimalFormat("#,###.00");
  
    public OtherTransaction() {
        initComponents();
        try {
            conn = new DBConnection();
        } catch (BackingStoreException ex) {
            Logger.getLogger(InitialDeposits.class.getName()).log(Level.SEVERE, null, ex);
        }
        getExpenseTypes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        transaction_type = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        description = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        amount = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        submit = new javax.swing.JButton();
        date_added = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        expense_type = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        requestee = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Transaction Type(*):");

        transaction_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Type", "Expenses", "Product", "Bank" }));
        transaction_type.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                transaction_typeItemStateChanged(evt);
            }
        });

        jLabel2.setText("Description:");

        jLabel3.setText("Amount(*):");

        jLabel4.setText("Date(*):");

        submit.setText("SUBMIT");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        jLabel5.setText("Expense Type(*):");

        expense_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Type" }));
        expense_type.setEnabled(false);

        jLabel6.setText("Requestee:");

        requestee.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(expense_type, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                        .addComponent(transaction_type, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(requestee, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(description, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(submit))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(110, 110, 110)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(amount)
                            .addComponent(date_added, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(transaction_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(expense_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel6))
                    .addComponent(requestee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(description, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(date_added, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(submit)
                .addGap(24, 24, 24))
        );

        setSize(new java.awt.Dimension(364, 298));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        // TODO add your handling code here:
       float t_amount = Float.parseFloat(amount.getText());
       java.util.Date specificDate = date_added.getDate();
       java.sql.Date specificDateSql = new java.sql.Date(specificDate.getTime());
       String transactionDate = specificDateSql.toString();
       
       if (transaction_type.getSelectedItem().toString().equalsIgnoreCase("Expenses")){
           if(transaction_type.getSelectedItem().toString().equalsIgnoreCase("Select Type")){
                JOptionPane.showMessageDialog(null, "Transaction Type field is required", "Error", JOptionPane.ERROR_MESSAGE);
           }
           else if(amount.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Amount field is required", "Error", JOptionPane.ERROR_MESSAGE);
           }
           else if(date_added == null){
                JOptionPane.showMessageDialog(null, "Date field is required", "Error", JOptionPane.ERROR_MESSAGE);
           }else {
               addExpense();
           }
       }else if (transaction_type.getSelectedItem().toString().equalsIgnoreCase("Product")){
           if(transaction_type.getSelectedItem().toString().equalsIgnoreCase("Select Type")){
                JOptionPane.showMessageDialog(null, "Transaction Type field is required", "Error", JOptionPane.ERROR_MESSAGE);
           }
           else if(amount.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Amount field is required", "Error", JOptionPane.ERROR_MESSAGE);
           }
           else if(date_added == null){
                JOptionPane.showMessageDialog(null, "Date field is required", "Error", JOptionPane.ERROR_MESSAGE);
           }else {
                updateProductsTable(description.getText(), t_amount, transactionDate, "saccokacyiru");
                try {
                    if(record_transaction(
                            t_amount, 0, t_amount, 0,
                            0, transactionDate, "Deposit", "OTHER",
                            "saccokacyiru", requestee.getText(), prefs.get("employee_key", ""))){
                        
                        //print receipt
                        int transaction_reference =getTransaction_ref("saccokacyiru");
                        new SmallReceipt("Deposit", "-------", "Sacco Kacyiru", 0, t_amount, " ", 0,
                                    t_amount, transactionDate, prefs.get("firstname", "")+" "+prefs.get("lastname", ""), transaction_reference, description.getText(), prefs.get("firstname", "")+" "+prefs.get("lastname", ""));
                        this.dispose();
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(OtherTransaction.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParseException ex) {
                    Logger.getLogger(OtherTransaction.class.getName()).log(Level.SEVERE, null, ex);
                }
           }
            
       }
    }//GEN-LAST:event_submitActionPerformed

    private void transaction_typeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_transaction_typeItemStateChanged
        // TODO add your handling code here:
        if(transaction_type.getSelectedItem().toString().equalsIgnoreCase("Expenses")){
            expense_type.setEnabled(true);
            requestee.setEnabled(true);
        }else{
            expense_type.setEnabled(false);
            requestee.setEnabled(false);
        }
    }//GEN-LAST:event_transaction_typeItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OtherTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OtherTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OtherTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OtherTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OtherTransaction().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amount;
    private com.toedter.calendar.JDateChooser date_added;
    private javax.swing.JTextField description;
    private javax.swing.JComboBox<String> expense_type;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField requestee;
    private javax.swing.JButton submit;
    private javax.swing.JComboBox<String> transaction_type;
    // End of variables declaration//GEN-END:variables
    private void getExpenseTypes() {
        String sql = "select expense_type from expense_types";
        String expenseType = "";
        try {
            pst = conn.connection.prepareStatement(sql);
            rs = pst.executeQuery();
            while (rs.next()) {
                expenseType = rs.getString("expense_type");
                expense_type.addItem(expenseType);
            }
        } catch (SQLException e1) {
            JOptionPane.showMessageDialog(null, e1);
        }
    }
    private boolean record_transaction(
            float transactionAmount, float transactionCharges, float transaction_net_amount, float previousBalance,
            float currentBalance, String transactionDate, String transactionType, String transactionDescription,
            String accountNumber, String requestee, String employeeKey) throws SQLException, ParseException {

        boolean message = false;
        String sql = "insert into transactions(transaction_amount,"
                + "transaction_charge,"
                + "transaction_net_amount,"
                + "previous_balance,"
                + "current_balance,"
                + "transaction_date,"
                + "transaction_type,"
                + "transaction_description,"
                + "Account_Number,"
                + "requestee,"
                + "employee_key) values (?,?,?,?,?,?,?,?,?,?,?)";
        pst = conn.connection.prepareStatement(sql);
        pst.setFloat(1, transactionAmount);
        pst.setFloat(2, transactionCharges);
        pst.setFloat(3, transaction_net_amount);
        pst.setFloat(4, previousBalance);
        pst.setFloat(5, currentBalance);
        pst.setString(6, transactionDate);
        pst.setString(7, transactionType);
        pst.setString(8, transactionDescription);
        pst.setString(9, accountNumber);
        pst.setString(10, requestee);
        pst.setString(11, employeeKey);
        int saved = pst.executeUpdate();

        if (saved > 0) {
            return message = true;
        }
        return message = false;
    }
    
    private void updateProductsTable(String chargeDescription, float transactionCharge, String transactionDate, String accountNumber) {
        try {
            String sql = "insert into product (description,amount,product_date,Account_Number) values(?,?,?,?)";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, chargeDescription);
            pst.setFloat(2, transactionCharge);
            pst.setString(3, transactionDate);
            pst.setString(4, accountNumber);
            pst.execute();
            JOptionPane.showMessageDialog(null, "Saved");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    private void addExpense() {
        java.util.Date expenseDate = date_added.getDate();
        java.sql.Date sqlExpenseDate = new java.sql.Date(expenseDate.getTime());

        String sql = "INSERT into expense (type,requestee, description,amount, expense_date) values (?,?,?,?,?)";
        try {
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, expense_type.getSelectedItem().toString());
            pst.setString(2, requestee.getText());
            pst.setString(3, description.getText());
            pst.setFloat(4, Float.parseFloat(amount.getText()));
            pst.setString(5, sqlExpenseDate.toString());
            pst.execute();
            
            float expense_amount = Float.parseFloat(amount.getText());
            java.util.Date date = date_added.getDate();
            java.sql.Date sqlDate = new java.sql.Date(date.getTime());

            try {
                //create transaction
                if(record_transaction(
                        expense_amount, expense_amount, expense_amount, 0,
                        0, sqlDate.toString(), "Withdraw", "EXPENSE",
                        "saccokacyiru", requestee.getText(), prefs.get("employee_key", ""))){
                    
                    //print receipt
                    int transaction_reference =getTransaction_ref("saccokacyiru");
                    new SmallReceipt("Withdraw", "-------", "Sacco Kacyiru", 0, expense_amount, " ", 0,
                                expense_amount, sqlDate.toString(), prefs.get("firstname", "")+" "+prefs.get("lastname", ""), transaction_reference, description.getText(), prefs.get("firstname", "")+""+prefs.get("lastname", ""));
                }
            } catch (ParseException ex) {
                Logger.getLogger(AddExpense.class.getName()).log(Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(null, "The Expense has been Created");
            this.dispose();
        } catch (SQLException e1) {
            JOptionPane.showMessageDialog(null, e1);
        }
    }
    
    private int getTransaction_ref(String accountNumber) {
        String sql = "SELECT `transaction_id` FROM `transactions` WHERE transactions.Account_Number =?  ORDER BY transaction_id desc  LIMIT 1";
        int transaction_id = 0;
        try {
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, accountNumber);
            rs = pst.executeQuery();
            if (rs.next()) {
                transaction_id = rs.getInt("transaction_id");
            }
        } catch (SQLException ex) {
            // TODO Auto-generated catch block
            JOptionPane.showMessageDialog(null, ex);
        }
        return transaction_id;
    }
}
