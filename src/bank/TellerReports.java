/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bank;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author chris
 */
public class TellerReports extends javax.swing.JFrame {

    /**
     * Creates new form TellerReports
     */
    PreparedStatement pst = null;
    ResultSet rs = null;
    DBConnection conn;
    DefaultTableModel model = new DefaultTableModel();
    DecimalFormat formatter = new DecimalFormat("#,###.00");

    public TellerReports() {
        initComponents();
        try {
            conn = new DBConnection();
        } catch (BackingStoreException ex) {
            Logger.getLogger(TellerReports.class.getName()).log(Level.SEVERE, null, ex);
        }
        getAllTellers();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        to_label = new javax.swing.JLabel();
        go = new javax.swing.JButton();
        transaction_type = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        transaction_date = new com.toedter.calendar.JDateChooser();
        date_choice = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        date_range_label = new javax.swing.JLabel();
        date_label = new javax.swing.JLabel();
        from_transaction_date = new com.toedter.calendar.JDateChooser();
        to_transaction_date = new com.toedter.calendar.JDateChooser();
        teller = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_of_transactions = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        total_withdraw = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        total_deposit = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        total_w_d = new javax.swing.JLabel();
        jLabel85 = new javax.swing.JLabel();
        jLabel86 = new javax.swing.JLabel();
        jLabel87 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        total_starting_balance = new javax.swing.JLabel();
        jLabel88 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel89 = new javax.swing.JLabel();
        total_current_balance = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        general_total = new javax.swing.JLabel();
        jLabel90 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Transaction Filter"));

        to_label.setText("To");
        to_label.setEnabled(false);

        go.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/Button-Next-icon.png"))); // NOI18N
        go.setText("GO");
        go.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goActionPerformed(evt);
            }
        });

        transaction_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Deposit", "Withdraw" }));

        jLabel2.setText("Date Choice:");

        transaction_date.setEnabled(false);

        date_choice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Specific Date", "Date Range" }));
        date_choice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                date_choiceActionPerformed(evt);
            }
        });

        jLabel1.setText("Teller");

        jLabel6.setText("Transaction Type:");

        date_range_label.setText("Date Range:");

        date_label.setText("Date:");

        from_transaction_date.setEnabled(false);

        to_transaction_date.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(date_label)
                            .addComponent(date_range_label))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(from_transaction_date, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(to_label)
                                .addGap(16, 16, 16)
                                .addComponent(to_transaction_date, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(teller, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(date_choice, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(transaction_date, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(221, 221, 221))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(transaction_type, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(go, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(114, 114, 114)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(teller, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(date_choice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(date_label, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(transaction_date, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(date_range_label, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(to_transaction_date, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(to_label, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(from_transaction_date, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(go)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(transaction_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        list_of_transactions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Teller Balance", "Account Number", "Gross Amount", "Charges", "Net Amount", "Previous Balance", "Current Balance", "Transaction Type", "Description", "Transaction Date", "Teller"
            }
        ));
        jScrollPane1.setViewportView(list_of_transactions);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "TOTAL"));

        jLabel7.setText("Total Withdraw:");

        total_withdraw.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        total_withdraw.setText("0.0");

        jLabel9.setText("Total Deposit:");

        total_deposit.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        total_deposit.setText("0.0");

        jLabel11.setText("Total Transactions:");

        total_w_d.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        total_w_d.setText("0.0");

        jLabel85.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jLabel85.setText("FRW");

        jLabel86.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jLabel86.setText("FRW");

        jLabel87.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jLabel87.setText("FRW");

        jLabel3.setText("------------------------------------------------");

        jLabel4.setText("------------------------------------------------");

        jLabel12.setText("Total Starting Balance:");

        total_starting_balance.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        total_starting_balance.setText("0.0");

        jLabel88.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jLabel88.setText("FRW");

        jLabel5.setText("------------------------------------------------");

        jLabel13.setText("Total Current Balance:");

        jLabel89.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jLabel89.setText("FRW");

        total_current_balance.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        total_current_balance.setText("0.0");

        jLabel8.setText("------------------------------------------------");

        jLabel14.setText("General Total:");

        general_total.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        general_total.setText("0.0");

        jLabel90.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        jLabel90.setText("FRW");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel9))
                        .addGap(114, 114, 114)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(total_deposit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(total_withdraw, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel85)
                                .addGap(6, 6, 6))
                            .addComponent(jLabel86, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(total_starting_balance, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel88, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(total_w_d, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel87, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(general_total, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel90))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel8)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel5)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(total_current_balance, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel89)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(total_withdraw)
                    .addComponent(jLabel85, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(total_deposit)
                    .addComponent(jLabel86, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(total_w_d)
                    .addComponent(jLabel87, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(total_starting_balance)
                    .addComponent(jLabel88, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel89, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(total_current_balance))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel90, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(general_total))
                    .addComponent(jLabel14))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private String formatFloat(String s) {
        double stringToDouble = Float.parseFloat(s);
        return String.valueOf(formatter.format(stringToDouble));
    }

    private void getAllTellers() {
        String sql = "Select firstname,lastname from employees where title = 'Teller'";
        String employeeName = "";
        try {
            pst = conn.connection.prepareStatement(sql);
            rs = pst.executeQuery();
            while (rs.next()) {
                employeeName = rs.getString("firstname") + " " + rs.getString("lastname");
                teller.addItem(employeeName);
            }
        } catch (SQLException e1) {
            JOptionPane.showMessageDialog(null, e1);
        }
    }

    private String getEmployeeKey(String lastName, String firstName) {

        String sql = "Select employee_key from employees where lastname = ? and firstname = ?";
        String employeeKey = "";
        try {
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, lastName);
            pst.setString(2, firstName);
            rs = pst.executeQuery();
            if (rs.next()) {
                employeeKey = rs.getString("employee_key");
            } else {
                JOptionPane.showMessageDialog(null, "No Teller Found!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e1) {
            JOptionPane.showMessageDialog(null, e1);
        }
        return employeeKey;
    }

    private void filterData(String employeeKey, String transactionType) throws ParseException {

        if (transaction_date.getDate() == null) {
            JOptionPane.showMessageDialog(null, "The specific date is required for this filter!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            java.util.Date specificDate = transaction_date.getDate();
            java.sql.Date specificDateSql = new java.sql.Date(specificDate.getTime());
            String transactionDate = specificDateSql.toString();

            try {
                DefaultTableModel dtm = (DefaultTableModel) list_of_transactions.getModel();
                dtm.setRowCount(0);
                dtm.setColumnCount(0);
                String sql = null;

                if (transactionType.equalsIgnoreCase("All")) {

                    sql = "SELECT `transaction_amount`, `transaction_charge`,`transaction_net_amount`, `previous_balance`, `current_balance`, `transaction_date`, `transaction_type`, `transaction_description`, `Account_Number`, transactions.employee_key, e.firstname, e.lastname FROM `transactions` INNER JOIN employees e on e.employee_key = transactions.employee_key WHERE transactions.employee_key = ? and transaction_date LIKE  ? ORDER BY transaction_date DESC";
                    pst = conn.connection.prepareStatement(sql);
                    pst.setString(1, employeeKey);
                    pst.setString(2, transactionDate);
                    rs = pst.executeQuery();
                    list_of_transactions.setModel(model);
                    model.addColumn("Teller Balance");
                    model.addColumn("Account Number");
                    model.addColumn("Gross Amount");
                    model.addColumn("Charges");
                    model.addColumn("Net Amount");
                    model.addColumn("Previous Balance");
                    model.addColumn("Current Balance");
                    model.addColumn("Transaction Type");
                    model.addColumn("Description");
                    model.addColumn("Transaction Date");
                    model.addColumn("Teller");
                    
                    double totalWithdraw = 0.0;
                    double totalDeposit = 0.0;
                    double totalCharges = 0.0;
                    double total_current_b = 0;
                    double total_starting_b = 0;
                    double general_t = 0;

                    while (rs.next()) {
                        
                        if (rs.getString("transaction_type").equalsIgnoreCase("Withdraw")) {
                            totalWithdraw += Double.parseDouble(rs.getString("transaction_amount"));
                        }
                        if (rs.getString("transaction_type").equalsIgnoreCase("Deposit")) {
                            totalDeposit += Double.parseDouble(rs.getString("transaction_amount"));
                        }
                
                        totalCharges += Double.parseDouble(rs.getString("transaction_charge"));
                        
                        model.addRow(new Object[]{
                            
                           rs.getString("transaction_type").equalsIgnoreCase("Deposit") && new AppClass().getTellerStartingBalance(conn, pst, rs, rs.getString("employee_key"), rs.getString("transaction_date")) != 0.0 ? 
                           (
                                   new AppClass().getTellerStartingBalance(conn, pst, rs, 
                                   rs.getString("employee_key"), 
                                   rs.getString("transaction_date"))) + Float.parseFloat(rs.getString("transaction_amount")
                           )
                           :
                           rs.getString("transaction_type").equalsIgnoreCase("Withdraw") && new AppClass().getTellerStartingBalance(conn, pst, rs, rs.getString("employee_key"), rs.getString("transaction_date")) != 0.0 ?
                           (
                                   new AppClass().getTellerStartingBalance(conn, pst, rs, rs.getString("employee_key"), rs.getString("transaction_date"))
                           ) - Float.parseFloat(rs.getString("transaction_amount")) : "0.0",
                            
                            rs.getString("Account_Number"), 
                            formatFloat(rs.getString("transaction_amount")),
                            formatFloat(rs.getString("transaction_charge")), formatFloat(rs.getString("transaction_net_amount")),
                            formatFloat(rs.getString("previous_balance")),
                            formatFloat(rs.getString("current_balance")), rs.getString("transaction_type"),
                            rs.getString("transaction_description"), rs.getString("transaction_date"),
                            rs.getString("firstname") + " " + rs.getString("lastname")
                        });
                    }
                    
                    total_current_b =(
                                   new AppClass().getTellerTotalCurrentBalance(conn, pst, rs, 
                                   employeeKey, 
                                  transactionDate,""));
                    
                    total_starting_b =(
                                   new AppClass().getTellerTotalStartingBalance(conn, pst, rs, 
                                   employeeKey, 
                                  transactionDate,""));
                    
                    total_current_balance.setText(total_current_b+"");
                    total_starting_balance.setText(total_starting_b+"");
                    total_deposit.setText(formatFloat(totalDeposit+""));
                    total_withdraw.setText(formatFloat((totalWithdraw +totalCharges)+""));
                    total_w_d.setText(formatFloat((totalDeposit - (totalWithdraw +totalCharges))+""));
                    general_t = (total_starting_b + totalDeposit) - (totalWithdraw +totalCharges);
                    general_total.setText(general_t+"");
                    
                } else {

                    sql = "SELECT `transaction_amount`, `transaction_charge`, `transaction_net_amount`,`previous_balance`, `current_balance`, `transaction_date`, `transaction_type`, `transaction_description`, `Account_Number`, transactions.employee_key, e.firstname, e.lastname FROM `transactions` INNER JOIN employees e on e.employee_key = transactions.employee_key WHERE transactions.employee_key = ? and transaction_date LIKE ? AND transaction_type = ? ORDER BY transaction_date DESC";
                    pst = conn.connection.prepareStatement(sql);
                    pst.setString(1, employeeKey);
                    pst.setString(2, transactionDate);
                    pst.setString(3, transactionType);
                    rs = pst.executeQuery();
                    //int count = 0;
                    list_of_transactions.setModel(model);
                    model.addColumn("Teller Balance");
                    model.addColumn("Account Number");
                    model.addColumn("Gross Amount");
                    model.addColumn("Charges");
                    model.addColumn("Net Amount");
                    model.addColumn("Previous Balance");
                    model.addColumn("Current Balance");
                    model.addColumn("Transaction Type");
                    model.addColumn("Description");
                    model.addColumn("Transaction Date");
                    model.addColumn("Teller");
                    
                    double totalWithdraw = 0.0;
                    double totalDeposit = 0.0;
                    double totalCharges = 0.0;
                    double total_current_b = 0;
                    double total_starting_b = 0;
                    double general_t = 0;
                    
                    while (rs.next()) {
                        
                        if (rs.getString("transaction_type").equalsIgnoreCase("Withdraw")) {
                            totalWithdraw += Double.parseDouble(rs.getString("transaction_amount"));
                        }
                        if (rs.getString("transaction_type").equalsIgnoreCase("Deposit")) {
                            totalDeposit += Double.parseDouble(rs.getString("transaction_amount"));
                        }
                
                        totalCharges += Double.parseDouble(rs.getString("transaction_charge"));
                        
                        model.addRow(new Object[]{
                            rs.getString("transaction_type").equalsIgnoreCase("Deposit") && new AppClass().getTellerStartingBalance(conn, pst, rs, rs.getString("employee_key"), rs.getString("transaction_date")) != 0.0 ? 
                           (
                                   new AppClass().getTellerStartingBalance(conn, pst, rs, 
                                   rs.getString("employee_key"), 
                                   rs.getString("transaction_date"))) + Float.parseFloat(rs.getString("transaction_amount")
                           )
                           :
                           rs.getString("transaction_type").equalsIgnoreCase("Withdraw") && new AppClass().getTellerStartingBalance(conn, pst, rs, rs.getString("employee_key"), rs.getString("transaction_date")) != 0.0 ?
                           (
                                   new AppClass().getTellerStartingBalance(conn, pst, rs, rs.getString("employee_key"), rs.getString("transaction_date"))
                           ) - Float.parseFloat(rs.getString("transaction_amount")) : "0.0",
                            
                            rs.getString("Account_Number"), formatFloat(rs.getString("transaction_amount")),
                            formatFloat(rs.getString("transaction_charge")), formatFloat(rs.getString("transaction_net_amount")),
                            formatFloat(rs.getString("previous_balance")),
                            formatFloat(rs.getString("current_balance")), rs.getString("transaction_type"),
                            rs.getString("transaction_description"), rs.getString("transaction_date"),
                            rs.getString("firstname") + " " + rs.getString("lastname")
                        });
                    }
                    
                    total_current_b =(
                                   new AppClass().getTellerTotalCurrentBalance(conn, pst, rs, 
                                   employeeKey, 
                                  transactionDate,""));
                    
                    total_starting_b =(
                                   new AppClass().getTellerTotalStartingBalance(conn, pst, rs, 
                                   employeeKey, 
                                  transactionDate,""));
                    
                    total_current_balance.setText(total_current_b+"");
                    total_starting_balance.setText(total_starting_b+"");
                    total_deposit.setText(formatFloat(totalDeposit+""));
                    total_withdraw.setText(formatFloat((totalWithdraw +totalCharges)+""));
                    total_w_d.setText(formatFloat((totalDeposit - (totalWithdraw +totalCharges))+""));
                    general_t = (total_starting_b + totalDeposit) - (totalWithdraw +totalCharges);
                    general_total.setText(general_t+"");
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }

    private void filterDatabyDate(String employeeKey) throws ParseException {
        String transactionType = transaction_type.getSelectedItem().toString();
        if (from_transaction_date.getDate() == null || to_transaction_date.getDate() == null) {
            JOptionPane.showMessageDialog(null, "The start and end dates are required for this filter!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            java.util.Date fromDate = from_transaction_date.getDate();
            java.util.Date toDate = to_transaction_date.getDate();

            java.sql.Date sqlFromDate = new java.sql.Date(fromDate.getTime());
            java.sql.Date sqlToDate = new java.sql.Date(toDate.getTime());
            String sql = null;

            try {
                DefaultTableModel dtm = (DefaultTableModel) list_of_transactions.getModel();
                dtm.setRowCount(0);
                dtm.setColumnCount(0);
                if (transactionType.equalsIgnoreCase("All")) {
                    System.out.println("All");
                    sql = "SELECT `transaction_amount`, `transaction_charge`, `transaction_net_amount`,`previous_balance`, `current_balance`, `transaction_date`, `transaction_type`, `transaction_description`, `Account_Number`, transactions.employee_key, e.firstname, e.lastname FROM `transactions` INNER JOIN employees e on e.employee_key = transactions.employee_key WHERE transactions.employee_key = ? and transaction_date BETWEEN '" + sqlFromDate.toString() + "%' AND '" + sqlToDate.toString() + "%' ORDER BY transaction_date DESC";
                    pst = conn.connection.prepareStatement(sql);
                    pst.setString(1, employeeKey);
                    rs = pst.executeQuery();
                    //int count = 0;
                    list_of_transactions.setModel(model);
                    model.addColumn("Teller Balance");
                    model.addColumn("Account Number");
                    model.addColumn("Gross Amount");
                    model.addColumn("Charges");
                    model.addColumn("Net Amount");
                    model.addColumn("Previous Balance");
                    model.addColumn("Current Balance");
                    model.addColumn("Transaction Type");
                    model.addColumn("Description");
                    model.addColumn("Transaction Date");
                    model.addColumn("Teller");
                    
                    double totalWithdraw = 0.0;
                    double totalDeposit = 0.0;
                    double totalCharges = 0.0;
                    double total_current_b = 0;
                    double total_starting_b = 0;
                    double general_t = 0;
                    
                    while (rs.next()) {
                        
                        if (rs.getString("transaction_type").equalsIgnoreCase("Withdraw")) {
                            totalWithdraw += Double.parseDouble(rs.getString("transaction_amount"));
                        }
                        if (rs.getString("transaction_type").equalsIgnoreCase("Deposit")) {
                            totalDeposit += Double.parseDouble(rs.getString("transaction_amount"));
                        }
                
                        totalCharges += Double.parseDouble(rs.getString("transaction_charge"));
                        
                        model.addRow(new Object[]{
                            rs.getString("transaction_type").equalsIgnoreCase("Deposit") && new AppClass().getTellerStartingBalance(conn, pst, rs, rs.getString("employee_key"), rs.getString("transaction_date")) != 0.0 ? 
                           (
                                   new AppClass().getTellerStartingBalance(conn, pst, rs, 
                                   rs.getString("employee_key"), 
                                   rs.getString("transaction_date"))) + Float.parseFloat(rs.getString("transaction_amount")
                           )
                           :
                           rs.getString("transaction_type").equalsIgnoreCase("Withdraw") && new AppClass().getTellerStartingBalance(conn, pst, rs, rs.getString("employee_key"), rs.getString("transaction_date")) != 0.0 ?
                           (
                                   new AppClass().getTellerStartingBalance(conn, pst, rs, rs.getString("employee_key"), rs.getString("transaction_date"))
                           ) - Float.parseFloat(rs.getString("transaction_amount")) : "0.0",
                            
                            rs.getString("Account_Number"), formatFloat(rs.getString("transaction_amount")),
                            formatFloat(rs.getString("transaction_charge")), formatFloat(rs.getString("transaction_net_amount")),
                            formatFloat(rs.getString("previous_balance")),
                            formatFloat(rs.getString("current_balance")), rs.getString("transaction_type"),
                            rs.getString("transaction_description"), rs.getString("transaction_date"),
                            rs.getString("firstname") + " " + rs.getString("lastname")
                        });
                    }
                    
                    total_current_b =(
                                   new AppClass().getTellerTotalCurrentBalance(conn, pst, rs, 
                                   employeeKey, 
                                  sqlFromDate.toString(),sqlToDate.toString()));
                    
                    total_starting_b =(
                                   new AppClass().getTellerTotalStartingBalance(conn, pst, rs, 
                                   employeeKey, 
                                  sqlFromDate.toString(),sqlToDate.toString()));
                    
                    total_current_balance.setText(total_current_b+"");
                    total_starting_balance.setText(total_starting_b+"");
                    
                    
                    total_deposit.setText(formatFloat(totalDeposit+""));
                    total_withdraw.setText(formatFloat((totalWithdraw +totalCharges)+""));
                    total_w_d.setText(formatFloat((totalDeposit - (totalWithdraw +totalCharges))+""));
                    general_t = (total_starting_b + totalDeposit) - (totalWithdraw +totalCharges);
                    general_total.setText(general_t+"");
                    
                } else {
                    sql = "SELECT `transaction_amount`, `transaction_charge`, `transaction_net_amount`,`previous_balance`, `current_balance`, `transaction_date`, `transaction_type`, `transaction_description`, `Account_Number`,transactions.employee_key, e.firstname, e.lastname FROM `transactions` INNER JOIN employees e on e.employee_key = transactions.employee_key WHERE transactions.employee_key = ? and transaction_type = ? and transaction_date BETWEEN '" + sqlFromDate.toString() + "%' AND '" + sqlToDate.toString() + "%' ORDER BY transaction_date DESC";
                    pst = conn.connection.prepareStatement(sql);
                    pst.setString(1, employeeKey);
                    pst.setString(2, transactionType);
                    rs = pst.executeQuery();
                    //int count = 0;
                    list_of_transactions.setModel(model);
                    model.addColumn("Account Number");
                    model.addColumn("Gross Amount");
                    model.addColumn("Charges");
                    model.addColumn("Net Amount");
                    model.addColumn("Previous Balance");
                    model.addColumn("Current Balance");
                    model.addColumn("Transaction Type");
                    model.addColumn("Description");
                    model.addColumn("Transaction Date");
                    model.addColumn("Teller");
                    
                    double totalWithdraw = 0.0;
                    double totalDeposit = 0.0;
                    double totalCharges = 0.0;
                    double total_current_b = 0;
                    double total_starting_b = 0;
                    double general_t = 0;
                    
                    while (rs.next()) {
                        if (rs.getString("transaction_type").equalsIgnoreCase("Withdraw")) {
                            totalWithdraw += Double.parseDouble(rs.getString("transaction_amount"));
                        }
                        if (rs.getString("transaction_type").equalsIgnoreCase("Deposit")) {
                            totalDeposit += Double.parseDouble(rs.getString("transaction_amount"));
                        }
                
                        totalCharges += Double.parseDouble(rs.getString("transaction_charge"));
                        
                        model.addRow(new Object[]{
                            rs.getString("transaction_type").equalsIgnoreCase("Deposit") && new AppClass().getTellerStartingBalance(conn, pst, rs, rs.getString("employee_key"), rs.getString("transaction_date")) != 0.0 ? 
                           (
                                   new AppClass().getTellerStartingBalance(conn, pst, rs, 
                                   rs.getString("employee_key"), 
                                   rs.getString("transaction_date"))) + Float.parseFloat(rs.getString("transaction_amount")
                           )
                           :
                           rs.getString("transaction_type").equalsIgnoreCase("Withdraw") && new AppClass().getTellerStartingBalance(conn, pst, rs, rs.getString("employee_key"), rs.getString("transaction_date")) != 0.0 ?
                           (
                                   new AppClass().getTellerStartingBalance(conn, pst, rs, rs.getString("employee_key"), rs.getString("transaction_date"))
                           ) - Float.parseFloat(rs.getString("transaction_amount")) : "0.0",
                            
                            rs.getString("Account_Number"), formatFloat(rs.getString("transaction_amount")),
                            formatFloat(rs.getString("transaction_charge")), formatFloat(rs.getString("transaction_net_amount")),
                            formatFloat(rs.getString("previous_balance")),
                            formatFloat(rs.getString("current_balance")), rs.getString("transaction_type"),
                            rs.getString("transaction_description"), rs.getString("transaction_date"),
                            rs.getString("firstname") + " " + rs.getString("lastname")
                        });
                    }
                    
                    total_current_b =(
                                   new AppClass().getTellerTotalCurrentBalance(conn, pst, rs, 
                                   employeeKey, 
                                  sqlFromDate.toString(),sqlToDate.toString()));
                    
                    total_starting_b =(
                                   new AppClass().getTellerTotalStartingBalance(conn, pst, rs, 
                                   employeeKey, 
                                  sqlFromDate.toString(),sqlToDate.toString()));
                    
                    total_current_balance.setText(total_current_b+"");
                    total_starting_balance.setText(total_starting_b+"");
                    total_deposit.setText(formatFloat(totalDeposit+""));
                    total_withdraw.setText(formatFloat((totalWithdraw +totalCharges)+""));
                    total_w_d.setText(formatFloat((totalDeposit - (totalWithdraw +totalCharges))+""));
                    general_t = (total_starting_b + totalDeposit) - (totalWithdraw +totalCharges);
                    general_total.setText(general_t+"");
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }

    private void goActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goActionPerformed
        // TODO add your handling code here:

        String employeeName = teller.getSelectedItem().toString();
        String arr[] = employeeName.split(" ", 2);
        String employeeLastName = arr[1];   //the
        String employeeFirstName = arr[0];

        System.out.println(employeeLastName + " " + employeeFirstName);

        String employeeKey = getEmployeeKey(employeeLastName, employeeFirstName);

        String transactionType = (String) transaction_type.getSelectedItem();
        String dateChoice = (String) date_choice.getSelectedItem();
        java.sql.Timestamp date = new java.sql.Timestamp(new java.util.Date().getTime());

        if (dateChoice.equalsIgnoreCase("Specific Date")) {
            try {
                filterData(employeeKey, transactionType);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        } else if (dateChoice.equalsIgnoreCase("Date Range")) {
            //populateTransactions(accountNumber);
            try {
                filterDatabyDate(employeeKey);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please pick the date choice Filter!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_goActionPerformed

    private void date_choiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_date_choiceActionPerformed
        // TODO add your handling code here:
        String dateChoice = (String) date_choice.getSelectedItem();
        if (dateChoice.equals("Specific Date")) {
            date_label.setEnabled(true);
            transaction_date.setEnabled(true);
            date_range_label.setEnabled(false);
            from_transaction_date.setEnabled(false);
            to_transaction_date.setEnabled(false);
            to_label.setEnabled(false);
        } else if (dateChoice.equals("Date Range")) {
            date_label.setEnabled(false);
            transaction_date.setEnabled(false);
            date_range_label.setEnabled(true);
            from_transaction_date.setEnabled(true);
            to_transaction_date.setEnabled(true);
            to_label.setEnabled(true);
        }
    }//GEN-LAST:event_date_choiceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TellerReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TellerReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TellerReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TellerReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TellerReports().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> date_choice;
    private javax.swing.JLabel date_label;
    private javax.swing.JLabel date_range_label;
    private com.toedter.calendar.JDateChooser from_transaction_date;
    private javax.swing.JLabel general_total;
    private javax.swing.JButton go;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel87;
    private javax.swing.JLabel jLabel88;
    private javax.swing.JLabel jLabel89;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel90;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable list_of_transactions;
    private javax.swing.JComboBox<String> teller;
    private javax.swing.JLabel to_label;
    private com.toedter.calendar.JDateChooser to_transaction_date;
    private javax.swing.JLabel total_current_balance;
    private javax.swing.JLabel total_deposit;
    private javax.swing.JLabel total_starting_balance;
    private javax.swing.JLabel total_w_d;
    private javax.swing.JLabel total_withdraw;
    private com.toedter.calendar.JDateChooser transaction_date;
    private javax.swing.JComboBox<String> transaction_type;
    // End of variables declaration//GEN-END:variables
}
