/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bank;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.swing.JOptionPane;

/**
 *
 * @author User
 */
public class Autres_actif extends javax.swing.JFrame {
    PreparedStatement pst = null;
    ResultSet rs = null;
    DBConnection conn;
    Preferences prefs = Preferences.userNodeForPackage(AddExpense.class);

    /**
     * Creates new form Autres_actif
     */
    public Autres_actif() {
        initComponents();
        try {
            conn = new DBConnection();
        } catch (BackingStoreException ex) {
            Logger.getLogger(AddExpense.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        account_number = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        amount = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        date_tr = new com.toedter.calendar.JDateChooser();
        SAVE = new javax.swing.JButton();
        CLEAR = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        interest_amount = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        caisse = new javax.swing.JComboBox();
        print = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Account Number:");

        jLabel2.setText("Amount:");

        jLabel3.setText("Date:");

        SAVE.setText("SAVE");
        SAVE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SAVEActionPerformed(evt);
            }
        });

        CLEAR.setText("CLEAR");
        CLEAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLEARActionPerformed(evt);
            }
        });

        jLabel4.setText("Interest Amount:");

        interest_amount.setText("0");

        jLabel5.setText("Receipt:");

        jLabel6.setText("Caisse:");

        caisse.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Affected", "Not Affected" }));

        print.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Print", "Don't Print" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CLEAR)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(SAVE))
                            .addComponent(amount, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(date_tr, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(interest_amount, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(print, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(caisse, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(account_number))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(print, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(caisse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(account_number, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(interest_amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(date_tr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SAVE)
                    .addComponent(CLEAR))
                .addGap(31, 31, 31))
        );

        setSize(new java.awt.Dimension(416, 265));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void CLEARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLEARActionPerformed
        // TODO add your handling code here:
        account_number.setText("");
        amount.setText("");
        date_tr.setDate(null);
    }//GEN-LAST:event_CLEARActionPerformed

    private void SAVEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SAVEActionPerformed
        // TODO add your handling code here:
        if (account_number.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Account number is required", "Error", JOptionPane.ERROR);
        }else if (amount.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Amount is required", "Error", JOptionPane.ERROR);
        }else if (date_tr.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Date is required", "Error", JOptionPane.ERROR);
        }else{
            java.util.Date date = date_tr.getDate();
            java.sql.Date sqlDate = new java.sql.Date(date.getTime());
            try {
                String sql = "INSERT INTO `autre_active`(`id`, `account_number`, `amount`, `interest_amount`, `date`) VALUES (0,?,?,?,?)";
                pst = conn.connection.prepareStatement(sql);
                pst.setString(1, account_number.getText());
                pst.setFloat(2, Float.parseFloat(amount.getText()));
                pst.setFloat(3, Float.parseFloat(interest_amount.getText()));
                pst.setString(4, sqlDate.toString());
                int saved = pst.executeUpdate();

                if (saved > 0) {
                    float t_amount = Float.parseFloat(amount.getText()) + Float.parseFloat(interest_amount.getText());
                    if (!interest_amount.getText().isEmpty() && !interest_amount.getText().equals("0")) {
                        saveProduct("Other Asset", t_amount, sqlDate.toString(), account_number.getText());
                        //save this produt in transaction
                        if (caisse.getSelectedItem().toString().equalsIgnoreCase("Affected")) {
                            try {
                                if(record_transaction(
                                        t_amount, 0, t_amount, 0,
                                        0, sqlDate.toString(), "OTHER_ASSET", "Other Asset",
                                        account_number.getText(), "", prefs.get("employee_key", ""))){
                                    System.out.println("Transaction recorded");
                                }
                            } catch (SQLException ex) {
                                Logger.getLogger(OtherTransaction.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (ParseException ex) {
                                Logger.getLogger(OtherTransaction.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }else{
                        if (caisse.getSelectedItem().toString().equalsIgnoreCase("Affected")) {
                            try {
                                if(record_transaction(
                                        Float.parseFloat(interest_amount.getText()), 0, Float.parseFloat(interest_amount.getText()), 0,
                                        0, sqlDate.toString(), "OTHER_ASSET", "Other Asset",
                                        account_number.getText(), "", prefs.get("employee_key", ""))){
                                    System.out.println("Transaction recorded");
                                }
                            } catch (SQLException ex) {
                                Logger.getLogger(OtherTransaction.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (ParseException ex) {
                                Logger.getLogger(OtherTransaction.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                    JOptionPane.showMessageDialog(null, "Saved Successful");
                    
                    //print receipt fo this transaction
                    if (print.getSelectedItem().toString().equalsIgnoreCase("Print")) {
                        int transaction_reference =getTransaction_ref(account_number.getText());
                        new SmallReceipt("Other asset", account_number.getText(), getCustomerName(account_number.getText()), 0, t_amount, " ", 0,
                                    t_amount, sqlDate.toString(), prefs.get("firstname", "")+" "+prefs.get("lastname", ""), transaction_reference, "Other asset", prefs.get("firstname", "")+" "+prefs.get("lastname", ""));
                    }
                    this.dispose();
                }
            } catch (SQLException ex) {
                Logger.getLogger(Autres_actif.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_SAVEActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Autres_actif.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Autres_actif.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Autres_actif.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Autres_actif.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Autres_actif().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CLEAR;
    private javax.swing.JButton SAVE;
    private javax.swing.JTextField account_number;
    private javax.swing.JTextField amount;
    private javax.swing.JComboBox caisse;
    private com.toedter.calendar.JDateChooser date_tr;
    private javax.swing.JTextField interest_amount;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JComboBox print;
    // End of variables declaration//GEN-END:variables

    private boolean record_transaction(
            float transactionAmount, float transactionCharges, float transaction_net_amount, float previousBalance,
            float currentBalance, String transactionDate, String transactionType, String transactionDescription,
            String accountNumber, String requestees, String employeeKey) throws SQLException, ParseException {

        boolean message = false;
        String sql = "insert into transactions(transaction_amount,"
                + "transaction_charge,"
                + "transaction_net_amount,"
                + "previous_balance,"
                + "current_balance,"
                + "transaction_date,"
                + "transaction_type,"
                + "transaction_description,"
                + "Account_Number,"
                + "requestee,"
                + "employee_key) values (?,?,?,?,?,?,?,?,?,?,?)";
        pst = conn.connection.prepareStatement(sql);
        pst.setFloat(1, transactionAmount);
        pst.setFloat(2, transactionCharges);
        pst.setFloat(3, transaction_net_amount);
        pst.setFloat(4, previousBalance);
        pst.setFloat(5, currentBalance);
        pst.setString(6, transactionDate);
        pst.setString(7, transactionType);
        pst.setString(8, transactionDescription);
        pst.setString(9, accountNumber);
        pst.setString(10, requestees);
        pst.setString(11, employeeKey);
        int saved = pst.executeUpdate();

        if (saved > 0) {
            return message = true;
        }
        return message = false;
    }
    
    private void saveProduct(String chargeDescription, float transactionCharge, String transactionDate, String accountNumber) {
        try {
            String sql = "insert into product (description,amount,product_date,Account_Number) values(?,?,?,?)";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, chargeDescription);
            pst.setFloat(2, transactionCharge);
            pst.setString(3, transactionDate);
            pst.setString(4, accountNumber);
            pst.execute();
            JOptionPane.showMessageDialog(null, "Saved");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
    
    private int getTransaction_ref(String accountNumber) {
        String sql = "SELECT `transaction_id` FROM `transactions` WHERE transactions.Account_Number =?  ORDER BY transaction_id desc  LIMIT 1";
        int transaction_id = 0;
        try {
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, accountNumber);
            rs = pst.executeQuery();
            if (rs.next()) {
                transaction_id = rs.getInt("transaction_id");
            }
        } catch (SQLException ex) {
            // TODO Auto-generated catch block
            JOptionPane.showMessageDialog(null, ex);
        }
        return transaction_id;
    }
    
    private String getCustomerName(String accountNumber) {
        String sql = "SELECT Customer_Name FROM `customer_information` WHERE Account_Number=?";
        String names = "";
        try {
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, accountNumber);
            rs = pst.executeQuery();
            if (rs.next()) {
                names = rs.getString("Customer_Name");
            }
        } catch (SQLException ex) {
            // TODO Auto-generated catch block
            JOptionPane.showMessageDialog(null, ex);
        }
        return names;
    }
}
