/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bank;

/**
 *
 * @author chris
 */
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import javax.swing.JOptionPane;

public class Loan_Account_Info extends javax.swing.JFrame {

    /**
     * Creates new form Loan_Account_Info
     */
    PreparedStatement pst = null;
    ResultSet rs = null;
    DBConnection conn;
    Helper helper;
    String countryString;
    String customerIDString;
    String leBookString;
    String visionOUCString;
    String visionSBUString;
    String contractIDString;

    //for the Loan Contract Template
    String yearMonth;
    String disbursedAmount;
    float interestDue;
    float regulatoryProvision;
    float privisionHeld;
    float loanIncludingInterest;
    float otherCrPenalties;
    float suspenseInterest;
    String repaymentFrequency;
    float floatEmiAmount = 0;
    float dueAmount;
    int gracePeriodAccorded;
    int instalmentsInArrears;
    int numOfInstalments;
    int totalInstalmentsPaid;
    int totalInstalmentsOutstanding;
    String startDateString;
    String settlementDateString;
    String account_number;
    String customer_name;
    public Loan_Account_Info(String country, String leBook, String customerID, String accountNumber, String customerName ,String visionOUC,
            String visionSBU, String contractID, float emiAmount, int loanPeriod, String startDate,
            float principalAmount, float interestAmount, String settlementDate) {
        initComponents();
        try {
            conn = new DBConnection();
        } catch (BackingStoreException ex) {
            Logger.getLogger(Loan_Account_Info.class.getName()).log(Level.SEVERE, null, ex);
        }
        helper = new Helper();
        countryString = country;
        customerIDString = customerID;
        leBookString = leBook;
        visionOUCString = visionOUC;
        visionSBUString = visionSBU;
        contractIDString = contractID;
        floatEmiAmount = emiAmount;
        account_number = accountNumber;
        customer_name = customerName;
        emi_amount.setText(String.valueOf(floatEmiAmount));
        disbursed_amount.setText(String.valueOf(principalAmount));
        total_installments_paid.setText("0");
        startDateString = startDate;
        settlementDateString = settlementDate;
        number_of_installments.setText(String.valueOf(loanPeriod));
        total_installments_outstanding.setText(String.valueOf(loanPeriod));
        principal_amount.setText(String.valueOf(principalAmount));
        interest_due.setText(String.valueOf(interestAmount));

    }

    private Loan_Account_Info() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        save_account_information = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        interest_rate_debit_label = new javax.swing.JLabel();
        interest_rate_credit = new javax.swing.JTextField();
        economic_sub_sector_label = new javax.swing.JLabel();
        freeze_status = new javax.swing.JComboBox<>();
        economic_sub_sector = new javax.swing.JComboBox<>();
        account_type_label = new javax.swing.JLabel();
        performance_class_label = new javax.swing.JLabel();
        public_sector_code_label = new javax.swing.JLabel();
        institutional_sector_code_label = new javax.swing.JLabel();
        institutional_sector_code = new javax.swing.JComboBox<>();
        account_status_date_label = new javax.swing.JLabel();
        credit_category_label = new javax.swing.JLabel();
        card_subscription_label = new javax.swing.JLabel();
        joint_participant_count = new javax.swing.JTextField();
        credit_category = new javax.swing.JComboBox<>();
        interest_rate_debit = new javax.swing.JTextField();
        account_status_label = new javax.swing.JLabel();
        account_status_date = new com.toedter.calendar.JDateChooser();
        interest_rate_credit_label = new javax.swing.JLabel();
        public_sector_code = new javax.swing.JComboBox<>();
        account_type = new javax.swing.JComboBox<>();
        account_status = new javax.swing.JComboBox<>();
        account_ownership = new javax.swing.JComboBox<>();
        joint_participant_count_label = new javax.swing.JLabel();
        card_subscription = new javax.swing.JComboBox<>();
        account_ownership_label = new javax.swing.JLabel();
        freeze_status_label = new javax.swing.JLabel();
        performance_class = new javax.swing.JComboBox<>();
        economic_sub_sector_isic_label = new javax.swing.JLabel();
        economic_sub_sector_isic = new javax.swing.JComboBox<>();
        account_open_date_label = new javax.swing.JLabel();
        account_open_date = new com.toedter.calendar.JDateChooser();
        vision_gl_label = new javax.swing.JLabel();
        vision_gl = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        provision_held = new javax.swing.JTextField();
        due_amount = new javax.swing.JTextField();
        date_of_provision = new com.toedter.calendar.JDateChooser();
        total_installments_paid_label = new javax.swing.JLabel();
        disbursed_amount_label = new javax.swing.JLabel();
        principal_amount = new javax.swing.JTextField();
        interest_due = new javax.swing.JTextField();
        instalments_in_arrears_label = new javax.swing.JLabel();
        suspense_interest = new javax.swing.JTextField();
        emi_amount = new javax.swing.JTextField();
        total_installments_outstanding = new javax.swing.JTextField();
        suspense_interest_label = new javax.swing.JLabel();
        repayment_frequency = new javax.swing.JComboBox<>();
        due_amount_label = new javax.swing.JLabel();
        provision_held_label = new javax.swing.JLabel();
        grace_period_accorded_label = new javax.swing.JLabel();
        date_of_provision_label = new javax.swing.JLabel();
        disbursed_amount = new javax.swing.JTextField();
        grace_period_accorded = new javax.swing.JTextField();
        other_cr_penalties_label = new javax.swing.JLabel();
        instalments_in_arrears = new javax.swing.JTextField();
        interest_due_label = new javax.swing.JLabel();
        principal_amount_label = new javax.swing.JLabel();
        number_of_installments = new javax.swing.JTextField();
        other_charges_label = new javax.swing.JLabel();
        regulatory_provision = new javax.swing.JTextField();
        other_charges = new javax.swing.JTextField();
        emi_amount_label = new javax.swing.JLabel();
        total_installments_outstanding_label = new javax.swing.JLabel();
        repayment_frequency_label = new javax.swing.JLabel();
        other_cr_penalties = new javax.swing.JTextField();
        number_of_instalments_label = new javax.swing.JLabel();
        regulatory_provision_label = new javax.swing.JLabel();
        total_installments_paid = new javax.swing.JTextField();
        loan_including_interst_label = new javax.swing.JLabel();
        loan_including_interest = new javax.swing.JTextField();
        save_contract_loan = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        save_account_information.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        save_account_information.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/Save-icon 2.png"))); // NOI18N
        save_account_information.setText("SAVE ACCOUNT INFORMATION");
        save_account_information.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_account_informationActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Account Information"));

        interest_rate_debit_label.setText("Interest rate/Debits (*):");

        interest_rate_credit.setText("24");
        interest_rate_credit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                interest_rate_creditActionPerformed(evt);
            }
        });

        economic_sub_sector_label.setText("Economic Sub Sector (*):");

        freeze_status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Freeze", "Debit Freeze", "Credit Freeze", "Debit/Credit Freeze" }));

        economic_sub_sector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "9900", "0001", "1111", "1112", "1113", "1119", "1190", "1200", "1300", "1400", "1900", "2000", "3110", "3120", "3190", "3210", "3220", "3310", "3320", "3400", "3500", "3610", "3620", "3630", "3640", "3690", "3710", "3720", "3800", "3900", "4100", "4200", "4900", "5100", "5210", "5290", "6111", "6112", "6113", "6121", "6122", "6123", "6129", "6131", "6132", "6133", "6139", "6190", "6200", "6310", "6320", "6330", "6340", "6350", "6360", "6390", "6400", "6900", "7100", "7200", "7300", "7400", "7500", "7600", "7700", "7900", "8100", "8200", "8300", "8400", "8900", "9100", "9200", "9300", "9400", "9500" }));

        account_type_label.setText("Account Type (*): ");

        performance_class_label.setText("Performance Class (*):");

        public_sector_code_label.setText("Public Sector Code (*):");

        institutional_sector_code_label.setText("Institutional Sector Code (*):");

        institutional_sector_code.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MFI/SACCO (Deposit Taking)", "Micro Finance Bank", "Investment Banks", "Development Bank", "Cooperative Bank", "Housing Bank & Assimilated" }));

        account_status_date_label.setText("Account Status Date (*):");

        credit_category_label.setText("Credit Category (*):");

        card_subscription_label.setText("Card Subscription (*):");

        joint_participant_count.setText("0");

        credit_category.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Personal Loan", "Vehicle Loan", "Fixed-Asset Loan", "Equipment Loans", "Other cash loans", "Cash Adavance", "Working Capital Credit", "Inventory Credit", "Discount Facility", "Bridging Credit", "Season Credit", "Residential Mortgage Loans", "Commercial Mortgages/Real Estate Leasing", "Leasing", "Undrawn line of credit", "Documentary Credit", "Caution", "Guarantee", "Acceptance", "Other Commitments" }));

        interest_rate_debit.setText("0");

        account_status_label.setText("Account Status (*):");

        interest_rate_credit_label.setText("Interest rate/Credits (*):");

        public_sector_code.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Other Sectors", "Treasury", "Ministries", "Government Projects", "Joint Projects", "Special Funds", "Counterpart Funds", "Offices ", "Hospital And Community Health Center ", "Institutes And Research Centers ", "Others", "Province", "Districts", "Sectors", "RSSB", "MMI", "Related Public Companies ", "Public Companies" }));

        account_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Loan Account", "Current Account", "Saving Account", "Term Deposit Account", "Security Deposit Account", "Office Account/ Internal Account/ Accounts owned by the stakeholder itself", "Insurance Policy", "Trust Account" }));

        account_status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Active", "Inactive", "Closed", "Dormant", "Expired", "Matured", "Deleted" }));

        account_ownership.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Ownership", "Individual or Corporate", "Joint Application", "Sole proprietorship in which the owner is account owner", "By one of the partners", "Group Owners" }));

        joint_participant_count_label.setText("Joint Participant Count (*):");

        card_subscription.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "N", "A", "B" }));

        account_ownership_label.setText("Account Ownership (*):");

        freeze_status_label.setText("Freeze Status (*):");

        performance_class.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Normal loans", "Watch loans", "Substandards loans", "Doubtful loans", "Loss loans", "Writtern Off" }));

        economic_sub_sector_isic_label.setText("Economic Sub Sector ISIC(*):");

        economic_sub_sector_isic.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Economic Sub Sector ISIC", "Growing of rice", "Growing of vegetables and melons, roots and tubers", "Raising of cattle and buffaloes", "Raising of sheep and goats", "Raising of swine/pigs", "Raising of poultry", "Mixed farming\"", "Manufacture of dairy products", "Manufacture of other food products n.e.c.", "Weaving of textiles", "Repair of machinery", "Electrical installation", "Wholesale of food, beverages and tobacco", "Wholesale of textiles, clothing and footwear", "Wholesale of other household goods", "Wholesale of other machinery and equipment", "Restaurants and mobile food service activities", "Beverage serving activities", "Higher education", "Sports and recreation education", "Cultural education", "Other education n.e.c.", "Hospital activities", "Activities of religious organizations", "Other personal service activities n.e.c." }));

        account_open_date_label.setText("Account Open Date (*):");

        vision_gl_label.setText("Vision GL (*):");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(institutional_sector_code_label)
                            .addComponent(interest_rate_debit_label)
                            .addComponent(interest_rate_credit_label)
                            .addComponent(public_sector_code_label)
                            .addComponent(account_ownership_label)
                            .addComponent(joint_participant_count_label)
                            .addComponent(card_subscription_label)
                            .addComponent(economic_sub_sector_label)
                            .addComponent(vision_gl_label))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(economic_sub_sector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(card_subscription, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(joint_participant_count, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(public_sector_code, javax.swing.GroupLayout.Alignment.LEADING, 0, 222, Short.MAX_VALUE)
                                .addComponent(account_ownership, 0, 1, Short.MAX_VALUE))
                            .addComponent(institutional_sector_code, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(vision_gl, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(interest_rate_credit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                                .addComponent(interest_rate_debit, javax.swing.GroupLayout.Alignment.LEADING))))
                    .addComponent(account_status_date_label)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(economic_sub_sector_isic_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(economic_sub_sector_isic, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(freeze_status_label)
                            .addComponent(performance_class_label)
                            .addComponent(credit_category_label)
                            .addComponent(account_open_date_label)
                            .addComponent(account_status_label)
                            .addComponent(account_type_label))
                        .addGap(43, 43, 43)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(account_status, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(freeze_status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(account_status_date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(account_open_date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(account_type, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(credit_category, 0, 1, Short.MAX_VALUE)
                            .addComponent(performance_class, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(103, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(account_status_label)
                    .addComponent(account_status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(account_status_date_label)
                        .addGap(18, 18, 18)
                        .addComponent(account_type_label))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(account_status_date, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(account_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(account_open_date, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(account_open_date_label))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(freeze_status_label)
                    .addComponent(freeze_status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(performance_class_label)
                    .addComponent(performance_class, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(credit_category_label)
                    .addComponent(credit_category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(institutional_sector_code_label)
                    .addComponent(institutional_sector_code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(interest_rate_debit_label)
                    .addComponent(interest_rate_debit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(interest_rate_credit_label)
                    .addComponent(interest_rate_credit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(vision_gl_label)
                    .addComponent(vision_gl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(public_sector_code_label)
                    .addComponent(public_sector_code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(account_ownership_label)
                    .addComponent(account_ownership, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(joint_participant_count_label)
                    .addComponent(joint_participant_count, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(card_subscription_label)
                    .addComponent(card_subscription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(economic_sub_sector_label)
                    .addComponent(economic_sub_sector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(economic_sub_sector_isic_label)
                    .addComponent(economic_sub_sector_isic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        provision_held.setText("0");
        provision_held.setEnabled(false);

        due_amount.setEnabled(false);

        date_of_provision.setEnabled(false);

        total_installments_paid_label.setText("Total Instalments Paid (*):");
        total_installments_paid_label.setEnabled(false);

        disbursed_amount_label.setText("Disbursed Amount (*):");
        disbursed_amount_label.setEnabled(false);

        principal_amount.setEditable(false);
        principal_amount.setEnabled(false);

        interest_due.setEditable(false);
        interest_due.setEnabled(false);

        instalments_in_arrears_label.setText("Instalments In Arrears (*):");
        instalments_in_arrears_label.setEnabled(false);

        suspense_interest.setText("0");
        suspense_interest.setEnabled(false);

        emi_amount.setEditable(false);
        emi_amount.setEnabled(false);

        total_installments_outstanding.setEnabled(false);

        suspense_interest_label.setText("Suspense Interest (*):");
        suspense_interest_label.setEnabled(false);

        repayment_frequency.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MTH" }));
        repayment_frequency.setEnabled(false);
        repayment_frequency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repayment_frequencyActionPerformed(evt);
            }
        });

        due_amount_label.setText("Due Amount (*):");
        due_amount_label.setEnabled(false);

        provision_held_label.setText("Provision Held (*):");
        provision_held_label.setEnabled(false);

        grace_period_accorded_label.setText("Grace Period Accorded (*):");
        grace_period_accorded_label.setEnabled(false);

        date_of_provision_label.setText("Date Of Provision (*): ");
        date_of_provision_label.setEnabled(false);

        disbursed_amount.setEditable(false);
        disbursed_amount.setEnabled(false);

        grace_period_accorded.setText("0");
        grace_period_accorded.setEnabled(false);

        other_cr_penalties_label.setText("Other CR Penalties (*):");
        other_cr_penalties_label.setEnabled(false);

        instalments_in_arrears.setText("0");
        instalments_in_arrears.setEnabled(false);

        interest_due_label.setText("Interest Due (*):");
        interest_due_label.setEnabled(false);

        principal_amount_label.setText("Principal Amount (*):");
        principal_amount_label.setEnabled(false);

        number_of_installments.setEnabled(false);

        other_charges_label.setText("Other Charges (*):");
        other_charges_label.setEnabled(false);

        regulatory_provision.setText("0");
        regulatory_provision.setEnabled(false);

        other_charges.setText("0");
        other_charges.setEnabled(false);

        emi_amount_label.setText("EMI Amount (*):");
        emi_amount_label.setEnabled(false);

        total_installments_outstanding_label.setText("Total Instalments Outstanding (*):");
        total_installments_outstanding_label.setEnabled(false);

        repayment_frequency_label.setText("Repayment Frequency (*):");
        repayment_frequency_label.setEnabled(false);

        other_cr_penalties.setText("0");
        other_cr_penalties.setEnabled(false);

        number_of_instalments_label.setText("Number of Instalments (*):");
        number_of_instalments_label.setEnabled(false);

        regulatory_provision_label.setText("Regulatory Provision (*):");
        regulatory_provision_label.setEnabled(false);

        total_installments_paid.setEnabled(false);

        loan_including_interst_label.setText("Loan Including Interest (*):");
        loan_including_interst_label.setEnabled(false);

        loan_including_interest.setText("0");
        loan_including_interest.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(loan_including_interst_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loan_including_interest))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                    .addComponent(repayment_frequency_label)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(emi_amount_label)
                                    .addGap(63, 63, 63)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(due_amount_label)
                                .addGap(62, 62, 62)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(repayment_frequency, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(emi_amount)
                            .addComponent(due_amount, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(regulatory_provision_label)
                        .addGap(18, 18, 18)
                        .addComponent(regulatory_provision))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(total_installments_outstanding_label)
                        .addGap(18, 18, 18)
                        .addComponent(total_installments_outstanding))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(grace_period_accorded_label)
                            .addComponent(instalments_in_arrears_label)
                            .addComponent(number_of_instalments_label)
                            .addComponent(total_installments_paid_label))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(total_installments_paid)
                            .addComponent(number_of_installments)
                            .addComponent(instalments_in_arrears)
                            .addComponent(grace_period_accorded)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(date_of_provision_label)
                            .addComponent(disbursed_amount_label)
                            .addComponent(principal_amount_label)
                            .addComponent(interest_due_label)
                            .addComponent(other_cr_penalties_label)
                            .addComponent(provision_held_label)
                            .addComponent(other_charges_label)
                            .addComponent(suspense_interest_label))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(disbursed_amount)
                                .addComponent(principal_amount)
                                .addComponent(interest_due)
                                .addComponent(provision_held)
                                .addComponent(other_cr_penalties)
                                .addComponent(other_charges)
                                .addComponent(suspense_interest, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(date_of_provision, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(205, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(disbursed_amount_label)
                    .addComponent(disbursed_amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(principal_amount_label)
                    .addComponent(principal_amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(interest_due_label)
                    .addComponent(interest_due, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(regulatory_provision_label)
                    .addComponent(regulatory_provision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(provision_held_label)
                    .addComponent(provision_held, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(date_of_provision_label)
                    .addComponent(date_of_provision, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loan_including_interst_label)
                    .addComponent(loan_including_interest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(other_cr_penalties_label)
                    .addComponent(other_cr_penalties, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(other_charges_label)
                    .addComponent(other_charges, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(suspense_interest_label)
                    .addComponent(suspense_interest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(repayment_frequency_label)
                    .addComponent(repayment_frequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emi_amount_label)
                    .addComponent(emi_amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(due_amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(due_amount_label))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(grace_period_accorded_label)
                    .addComponent(grace_period_accorded, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(instalments_in_arrears_label)
                    .addComponent(instalments_in_arrears, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(number_of_instalments_label)
                    .addComponent(number_of_installments, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(total_installments_paid_label)
                    .addComponent(total_installments_paid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(total_installments_outstanding_label)
                    .addComponent(total_installments_outstanding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jScrollPane2.setViewportView(jPanel2);

        save_contract_loan.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        save_contract_loan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/Save-icon 2.png"))); // NOI18N
        save_contract_loan.setText("SAVE CONTRACT LOAN ");
        save_contract_loan.setEnabled(false);
        save_contract_loan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_contract_loanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(save_account_information)
                        .addGap(154, 154, 154)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(save_contract_loan)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 865, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 735, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(save_account_information)))
                .addGap(19, 19, 19)
                .addComponent(save_contract_loan)
                .addContainerGap(158, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public int getYearMonthDigits(int yearMonth) {
        int count = 0;
        while (yearMonth != 0) {
            yearMonth /= 10;
            ++count;
        }
        return count;
    }

    private void enableContractLoanFields() {

        disbursed_amount_label.setEnabled(true);
        disbursed_amount.setEnabled(true);
        principal_amount_label.setEnabled(true);
        principal_amount.setEnabled(true);
        interest_due_label.setEnabled(true);
        interest_due.setEnabled(true);
        regulatory_provision_label.setEnabled(true);
        regulatory_provision.setEnabled(true);
        provision_held_label.setEnabled(true);
        provision_held.setEnabled(true);
        date_of_provision_label.setEnabled(true);
        date_of_provision.setEnabled(true);
        loan_including_interst_label.setEnabled(true);
        loan_including_interest.setEnabled(true);
        other_cr_penalties_label.setEnabled(true);
        other_cr_penalties.setEnabled(true);
        other_charges_label.setEnabled(true);
        other_charges.setEnabled(true);
        suspense_interest_label.setEnabled(true);
        suspense_interest.setEnabled(true);
        repayment_frequency_label.setEnabled(true);
        repayment_frequency.setEnabled(true);
        emi_amount_label.setEnabled(true);
        emi_amount.setEnabled(true);
        due_amount_label.setEnabled(true);
        due_amount.setEnabled(true);
        grace_period_accorded_label.setEnabled(true);
        grace_period_accorded.setEnabled(true);
        instalments_in_arrears_label.setEnabled(true);
        instalments_in_arrears.setEnabled(true);
        grace_period_accorded_label.setEnabled(true);
        grace_period_accorded.setEnabled(true);
        number_of_instalments_label.setEnabled(true);
        number_of_installments.setEnabled(true);
        total_installments_paid_label.setEnabled(true);
        total_installments_paid.setEnabled(true);
        total_installments_outstanding_label.setEnabled(true);
        total_installments_outstanding.setEnabled(true);
        save_contract_loan.setEnabled(true);
    }

    private void disableAccountInformationFields() {
        account_status_label.setEnabled(false);
        account_status.setEnabled(false);
        account_status_date_label.setEnabled(false);
        account_status_date.setEnabled(false);
        account_type_label.setEnabled(false);
        account_type.setEnabled(false);
        account_open_date_label.setEnabled(false);
        account_open_date.setEnabled(false);
        freeze_status_label.setEnabled(false);
        freeze_status.setEnabled(false);
        performance_class_label.setEnabled(false);
        performance_class.setEnabled(false);
        credit_category_label.setEnabled(false);
        credit_category.setEnabled(false);
        institutional_sector_code_label.setEnabled(false);
        institutional_sector_code.setEnabled(false);
        interest_rate_credit_label.setEnabled(false);
        interest_rate_credit.setEnabled(false);
        interest_rate_debit_label.setEnabled(false);
        interest_rate_debit.setEnabled(false);
        vision_gl_label.setEnabled(false);
        vision_gl.setEnabled(false);
        public_sector_code_label.setEnabled(false);
        public_sector_code.setEnabled(false);
        account_ownership_label.setEnabled(false);
        account_ownership.setEnabled(false);
        joint_participant_count_label.setEnabled(false);
        joint_participant_count.setEnabled(false);
        card_subscription_label.setEnabled(false);
        card_subscription.setEnabled(false);
        economic_sub_sector_label.setEnabled(false);
        economic_sub_sector.setEnabled(false);
        economic_sub_sector_isic_label.setEnabled(false);
        economic_sub_sector_isic.setEnabled(false);
        save_account_information.setEnabled(false);

    }

    private boolean validateAccountInformationFields() {

        if (account_status.getSelectedItem().toString().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The account status field is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (account_status_date.getDate() == null) {
            JOptionPane.showMessageDialog(null, "No accoount status date specified!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (account_open_date.getDate() == null) {
            JOptionPane.showMessageDialog(null, "No accoount Opening date specified!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (account_type.getSelectedItem().toString().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The account type field is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (freeze_status.getSelectedItem().toString().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The freeze status is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (performance_class.getSelectedItem().toString().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The performance class field is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (credit_category.getSelectedItem().toString().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The credit category is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (institutional_sector_code.getSelectedItem().toString().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The institutional code is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (public_sector_code.getSelectedItem().toString().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The public sector code is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (account_ownership.getSelectedItem().toString().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The account ownership is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (interest_rate_credit.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The interest rate credit field is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (interest_rate_debit.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The interest rate debit field is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (vision_gl.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The vision GL field is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (helper.getEconomicSubSectorISICCode(economic_sub_sector_isic.getSelectedItem().toString()).isEmpty()) {
            JOptionPane.showMessageDialog(null, "The economic sub sector field ISIC is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (helper.getAccountOwnershipCode(account_ownership.getSelectedItem().toString()).isEmpty()) {
            JOptionPane.showMessageDialog(null, "The Account Ownership field is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else {
            return true;
        }
    }

    private boolean validateContractLoanFields() {
        if (disbursed_amount.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The disbursed amount field is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (principal_amount.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The principal amount field is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (interest_due.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The interest due field is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (regulatory_provision.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The regulatory provision field is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (provision_held.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The provision held is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (date_of_provision.getDate() == null) {
            JOptionPane.showMessageDialog(null, "No date of provision specified!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (loan_including_interest.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The loan including interest field is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (other_cr_penalties.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The other CR penalties field is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (other_charges.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The other charges field is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (suspense_interest.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The suspense interest field is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (emi_amount.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The EMI Amounnt field is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (due_amount.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The Due Amount field is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (grace_period_accorded.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The grace period accorded field is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (instalments_in_arrears.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The installments in arrears field is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (number_of_installments.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The number of installments field is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (total_installments_paid.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The total ins field is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (total_installments_outstanding.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The total installments outstanding field is required", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else {
            return true;
        }
    }

    private void saveAccountInformation(String country, String leBook, String customerID, String visionOUC, String visionSBU, String contractID) {

        try {
            if (validateAccountInformationFields() == true) {
                java.util.Date acctStatusDate = account_status_date.getDate();
                java.sql.Date accountStatusDate = new java.sql.Date(acctStatusDate.getTime());

                java.util.Date acctOpeningDate = account_open_date.getDate();
                java.sql.Date accountOpeningDate = new java.sql.Date(acctOpeningDate.getTime());
                String sql = "insert into account_information (`Country`, "
                        + "`LE_Book`,"
                        + " `Account_No`,"
                        + " `Account_Number`,"
                        + " `Account_Name`,"
                        + " `Vision_OUC`,"
                        + " `Vision_SBU`,"
                        + " `Account_Status`,"
                        + " `Account_Status_Date`,"
                        + " `Customer_ID`,"
                        + " `Account_Officer`,"
                        + " `Currency`,"
                        + " `Vision_GL`,"
                        + " `Account_Type`,"
                        + " `Account_Open_Date`,"
                        + " `Freeze_Status`,"
                        + " `Int_Rate_Dr`,"
                        + " `Int_Rate_Cr`,"
                        + " `Economic_Sub_Sector_Code`,"
                        + " `Economic_Sub_Sector_Code_ISIC`,"
                        + " `Public_Sector_Code`,"
                        + " `Institutional_Sector_Code`,"
                        + " `Account_Ownership`,"
                        + " `Joint_Participant_Count`,"
                        + " `Card_Subscription`,"
                        + " `Performance_Class`,"
                        + " `Credit_Category`,"
                        + " `Merchant_Id`)  values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                pst = conn.connection.prepareStatement(sql);
                pst.setString(1, country);
                pst.setString(2, leBook);
                pst.setString(3, contractID);
                pst.setString(4, account_number);
                pst.setString(5, customer_name);
                pst.setString(6, visionOUC);
                pst.setString(7, visionSBU);
                pst.setInt(8, helper.getAccountStatusCode(account_status.getSelectedItem().toString()));
                pst.setString(9, accountStatusDate.toString()); //acount status date
                pst.setString(10, customerID);
                pst.setString(11, "");
                pst.setString(12, "RWF");
                pst.setString(13, vision_gl.getText());
                pst.setString(14, helper.getAccountTypeCode(account_type.getSelectedItem().toString()));
                pst.setString(15, accountOpeningDate.toString());//account open date
                pst.setString(16, helper.getFreezeStatusCode(freeze_status.getSelectedItem().toString()));
                pst.setFloat(17, Float.parseFloat(interest_rate_debit.getText()));
                pst.setFloat(18, Float.parseFloat(interest_rate_credit.getText()));
                pst.setString(19, economic_sub_sector.getSelectedItem().toString());
                pst.setString(20, helper.getEconomicSubSectorISICCode(economic_sub_sector_isic.getSelectedItem().toString()));
                pst.setString(21, helper.getPublicSectorCode(public_sector_code.getSelectedItem().toString()));
                pst.setString(22, helper.getInstitutionalSectorCode(institutional_sector_code.getSelectedItem().toString()));
                pst.setString(23, helper.getAccountOwnershipCode(account_ownership.getSelectedItem().toString()));
                pst.setInt(24, Integer.parseInt(joint_participant_count.getText()));
                pst.setString(25, card_subscription.getSelectedItem().toString());
                pst.setString(26, helper.getPerformanceClassCode(performance_class.getSelectedItem().toString()));
                pst.setInt(27, helper.getCreditCategoryCode(credit_category.getSelectedItem().toString()));
                pst.setString(28, "");
                int saved = pst.executeUpdate();
                if (saved > 0) {
                    JOptionPane.showMessageDialog(null, "The Account information was saved!");
                    enableContractLoanFields();
                    disableAccountInformationFields();
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void saveContractLoan() {
        try {
            if (validateContractLoanFields() == true) {
                float principal = Float.parseFloat(principal_amount.getText());
                float interest = Float.parseFloat(interest_due.getText());
                float outstandingAmount = principal + interest;

                java.util.Date dateOfProvision = date_of_provision.getDate();
                java.sql.Date sqlDateOfProvision = new java.sql.Date(dateOfProvision.getTime());

                String sql = "insert into contract_loans (`Country`, "
                        + "`LE_Book`,"
                        + " `Contract_ID`,"
                        + " `Performance_Class`,"
                        + " `Disbursed_Amount`,"
                        + " `Prin_Outstanding_Amt_FCY`,"
                        + " `Prin_Outstanding_Amt_LCY`,"
                        + " `Interest_Due_FCY`,"
                        + " `Interest_Due_LCY`,"
                        + " `Regulatory_Provision`,"
                        + " `Provision_Held`,"
                        + " `Date_Of_Provision`,"
                        + " `Loan_Includ_Interest`,"
                        + " `Other_CR_Penalties`,"
                        + " `Other_Charges`,"
                        + " `Suspense_Interest`,"
                        + " `Repayment_Frequency`,"
                        + " `EMI_Amount`,"
                        + " `Date_Past_Due`,"
                        + " `Due_Amount`,"
                        + " `Grace_Period_Accorded`,"
                        + " `Instalments_In_Arrears`,"
                        + " `Num_of_Instalments`,"
                        + " `Total_Instalments_Paid`,"
                        + " `Total_Instalments_Outstanding`)  values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                pst = conn.connection.prepareStatement(sql);
                pst.setString(1, countryString);
                pst.setString(2, leBookString);
                pst.setString(3, contractIDString);
                pst.setString(4, helper.getPerformanceClassCode(performance_class.getSelectedItem().toString()));
                pst.setFloat(5, Float.parseFloat(disbursed_amount.getText()));
                pst.setFloat(6, Float.parseFloat(principal_amount.getText()));
                pst.setFloat(7, Float.parseFloat(principal_amount.getText()));
                pst.setFloat(8, Float.parseFloat(interest_due.getText()));
                pst.setFloat(9, Float.parseFloat(interest_due.getText()));
                pst.setFloat(10, Float.parseFloat(regulatory_provision.getText()));
                pst.setFloat(11, Float.parseFloat(provision_held.getText()));
                pst.setString(12, sqlDateOfProvision.toString());
                pst.setFloat(13, Float.parseFloat(loan_including_interest.getText()));
                pst.setFloat(14, Float.parseFloat(other_cr_penalties.getText()));
                pst.setFloat(15, Float.parseFloat(other_charges.getText()));
                pst.setFloat(16, Float.parseFloat(suspense_interest.getText()));
                pst.setString(17, repayment_frequency.getSelectedItem().toString());
                pst.setFloat(18, Float.parseFloat(emi_amount.getText()));
                pst.setString(19, settlementDateString);
                pst.setString(20, due_amount.getText());
                pst.setInt(21, Integer.parseInt(grace_period_accorded.getText()));
                pst.setInt(22, Integer.parseInt(instalments_in_arrears.getText()));
                pst.setInt(23, Integer.parseInt(number_of_installments.getText()));
                pst.setInt(24, Integer.parseInt(total_installments_paid.getText()));
                pst.setInt(25, Integer.parseInt(total_installments_outstanding.getText()));
                pst.execute();
                saveContractSchedule(countryString, leBookString, contractIDString, startDateString, principal, interest, outstandingAmount);
                JOptionPane.showMessageDialog(null, "The contract Loan info was saved!");
                this.dispose();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }

    private void saveContractSchedule(String country, String leBook, String contractId, String startDate, float principal, float interest, float outstandingAmount) {

        try {
            String sql = "insert into contract_schedules (`Country`, "
                    + "`LE_Book`,"
                    + " `Contract_ID`,"
                    + " `Schedule_Date`,"
                    + " `Principal_Amount_Due_LCY`,"
                    + " `Principal_Amount_Due_FCY`,"
                    + " `Int_Amount_Due_LCY`,"
                    + " `Int_Amount_Due_FCY`,"
                    + " `Outstanding_Amount_LCY`,"
                    + " `Outstanding_Amount_FCY`)  values (?,?,?,?,?,?,?,?,?,?)";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, country);
            pst.setString(2, leBook);
            pst.setString(3, contractId);
            pst.setString(4, startDate);
            pst.setFloat(5, principal);
            pst.setFloat(6, principal);
            pst.setFloat(7, interest);
            pst.setFloat(8, interest);
            pst.setFloat(9, outstandingAmount);
            pst.setFloat(10, outstandingAmount);
            pst.execute();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void interest_rate_creditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_interest_rate_creditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_interest_rate_creditActionPerformed

    private void save_account_informationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_account_informationActionPerformed
        // TODO add your handling code here:
        saveAccountInformation(countryString, leBookString, customerIDString, visionOUCString, visionSBUString, contractIDString);
    }//GEN-LAST:event_save_account_informationActionPerformed

    private void repayment_frequencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repayment_frequencyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_repayment_frequencyActionPerformed

    private void save_contract_loanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_contract_loanActionPerformed
        // TODO add your handling code here:
        saveContractLoan();
    }//GEN-LAST:event_save_contract_loanActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Loan_Account_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Loan_Account_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Loan_Account_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Loan_Account_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Loan_Account_Info().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser account_open_date;
    private javax.swing.JLabel account_open_date_label;
    private javax.swing.JComboBox<String> account_ownership;
    private javax.swing.JLabel account_ownership_label;
    private javax.swing.JComboBox<String> account_status;
    private com.toedter.calendar.JDateChooser account_status_date;
    private javax.swing.JLabel account_status_date_label;
    private javax.swing.JLabel account_status_label;
    private javax.swing.JComboBox<String> account_type;
    private javax.swing.JLabel account_type_label;
    private javax.swing.JComboBox<String> card_subscription;
    private javax.swing.JLabel card_subscription_label;
    private javax.swing.JComboBox<String> credit_category;
    private javax.swing.JLabel credit_category_label;
    private com.toedter.calendar.JDateChooser date_of_provision;
    private javax.swing.JLabel date_of_provision_label;
    private javax.swing.JTextField disbursed_amount;
    private javax.swing.JLabel disbursed_amount_label;
    private javax.swing.JTextField due_amount;
    private javax.swing.JLabel due_amount_label;
    private javax.swing.JComboBox<String> economic_sub_sector;
    private javax.swing.JComboBox<String> economic_sub_sector_isic;
    private javax.swing.JLabel economic_sub_sector_isic_label;
    private javax.swing.JLabel economic_sub_sector_label;
    private javax.swing.JTextField emi_amount;
    private javax.swing.JLabel emi_amount_label;
    private javax.swing.JComboBox<String> freeze_status;
    private javax.swing.JLabel freeze_status_label;
    private javax.swing.JTextField grace_period_accorded;
    private javax.swing.JLabel grace_period_accorded_label;
    private javax.swing.JTextField instalments_in_arrears;
    private javax.swing.JLabel instalments_in_arrears_label;
    private javax.swing.JComboBox<String> institutional_sector_code;
    private javax.swing.JLabel institutional_sector_code_label;
    private javax.swing.JTextField interest_due;
    private javax.swing.JLabel interest_due_label;
    private javax.swing.JTextField interest_rate_credit;
    private javax.swing.JLabel interest_rate_credit_label;
    private javax.swing.JTextField interest_rate_debit;
    private javax.swing.JLabel interest_rate_debit_label;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField joint_participant_count;
    private javax.swing.JLabel joint_participant_count_label;
    private javax.swing.JTextField loan_including_interest;
    private javax.swing.JLabel loan_including_interst_label;
    private javax.swing.JTextField number_of_installments;
    private javax.swing.JLabel number_of_instalments_label;
    private javax.swing.JTextField other_charges;
    private javax.swing.JLabel other_charges_label;
    private javax.swing.JTextField other_cr_penalties;
    private javax.swing.JLabel other_cr_penalties_label;
    private javax.swing.JComboBox<String> performance_class;
    private javax.swing.JLabel performance_class_label;
    private javax.swing.JTextField principal_amount;
    private javax.swing.JLabel principal_amount_label;
    private javax.swing.JTextField provision_held;
    private javax.swing.JLabel provision_held_label;
    private javax.swing.JComboBox<String> public_sector_code;
    private javax.swing.JLabel public_sector_code_label;
    private javax.swing.JTextField regulatory_provision;
    private javax.swing.JLabel regulatory_provision_label;
    private javax.swing.JComboBox<String> repayment_frequency;
    private javax.swing.JLabel repayment_frequency_label;
    private javax.swing.JButton save_account_information;
    private javax.swing.JButton save_contract_loan;
    private javax.swing.JTextField suspense_interest;
    private javax.swing.JLabel suspense_interest_label;
    private javax.swing.JTextField total_installments_outstanding;
    private javax.swing.JLabel total_installments_outstanding_label;
    private javax.swing.JTextField total_installments_paid;
    private javax.swing.JLabel total_installments_paid_label;
    private javax.swing.JTextField vision_gl;
    private javax.swing.JLabel vision_gl_label;
    // End of variables declaration//GEN-END:variables
}
