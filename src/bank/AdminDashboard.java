/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bank;

import com.placeholder.PlaceHolder;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author chris
 */
public class AdminDashboard extends javax.swing.JFrame {
    PlaceHolder holder;
    PreparedStatement pst = null;
    ResultSet rs = null;
    DBConnection conn;
    PleaseWait pl = new PleaseWait();
    Preferences prefs = Preferences.userNodeForPackage(Teller_Dashboard.class);
    DefaultTableModel model = new DefaultTableModel(); 
    boolean isLoading = false;
    private static final int ITERATIONS = 10000;
    private static final int KEY_LENGTH = 256;

    /**
     * Creates new form AdminDashboard
     */
    public AdminDashboard() {
        initComponents();
        setExtendedState(this.MAXIMIZED_BOTH); 
        try {
            conn = new DBConnection();
        } catch (BackingStoreException ex) {
            Logger.getLogger(AdminDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if (isLoading) {
            JOptionPane.showMessageDialog(null, "Loading employees, please hold on a second...", "Please wait...", JOptionPane.INFORMATION_MESSAGE);
        }
        
        try {
            getAllEmployees();
        } catch (SQLException ex) {
            Logger.getLogger(AdminDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        refresh = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        exit = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        save = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        firstname = new javax.swing.JTextField();
        username = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        lastname = new javax.swing.JTextField();
        title = new javax.swing.JComboBox<String>();
        email = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        update = new javax.swing.JButton();
        stop = new javax.swing.JButton();
        start = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        password = new javax.swing.JPasswordField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listemployees = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jToolBar1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jToolBar1.setRollover(true);

        refresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/wizard-icon.png"))); // NOI18N
        refresh.setText("REFRESH");
        refresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshMouseClicked(evt);
            }
        });
        jToolBar1.add(refresh);
        jToolBar1.add(jSeparator1);

        exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/stop-icon.png"))); // NOI18N
        exit.setText("EXIT");
        exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitMouseClicked(evt);
            }
        });
        jToolBar1.add(exit);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "New Employee"));

        jLabel1.setText("Title:");

        jLabel5.setText("Email:");

        save.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        save.setText("SAVE");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        jLabel2.setText("First Name (*):");

        jLabel4.setText("Username (*):");

        jLabel7.setText("Password (*):");

        title.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Adminstrator", "Teller", "Loan Officer", "Loan Recovery", "Accountant", "Customer Care", "Manager" }));

        jLabel6.setText("Last Name (*):");

        update.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        update.setText("UPDATE");
        update.setEnabled(false);
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        stop.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        stop.setText("STOP");
        stop.setEnabled(false);
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        start.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        start.setText("START");
        start.setEnabled(false);
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });

        delete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        delete.setText("DELETE");
        delete.setEnabled(false);
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        clear.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        clear.setText("CLEAR");
        clear.setEnabled(false);
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(315, 315, 315)
                        .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(title, 0, 251, Short.MAX_VALUE)
                                    .addComponent(firstname))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7))
                        .addGap(32, 32, 32)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(start, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stop, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lastname, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(124, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(firstname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(lastname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(start, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(stop, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "All Employees"));

        listemployees.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        listemployees.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "No", "Firstname", "Lastname", "Username", "Email", "Title", "Last login", "Date Created", "Status"
            }
        ));
        listemployees.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listemployeesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listemployees);
        if (listemployees.getColumnModel().getColumnCount() > 0) {
            listemployees.getColumnModel().getColumn(0).setPreferredWidth(10);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    protected String getSaltString(int n) {
        String SALTCHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        StringBuilder salt = new StringBuilder();
        Random rnd = new Random();
        while (salt.length() < n) { // length of the random string.
            int index = (int) (rnd.nextFloat() * SALTCHARS.length());
            salt.append(SALTCHARS.charAt(index));
        }
        String saltStr = salt.toString();
        return saltStr;

    }
    
    private void saveAccount(String title, String fname, String lname, String uname, String pword, String emailt) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        if (fname.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please firstname is required");
        }
        if (lname.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please lastname is required");
        }
        if (uname.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please username is required");
        }
        if (pword.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please password is required");
        }else if (pword.length() < 6) {
            JOptionPane.showMessageDialog(null, "Password must be grater than 6 character");
        }else if (pword.equalsIgnoreCase(uname)) {
            JOptionPane.showMessageDialog(null, "Password must be differ from username");
        }
        if (!title.isEmpty() || !fname.isEmpty() || !lname.isEmpty() || !uname.isEmpty() || !pword.isEmpty()) {
            
            //variables
            java.sql.Timestamp date = new java.sql.Timestamp(new java.util.Date().getTime());
            String employee_key = getSaltString(250);
            
            //encrypt password
            String salt = PasswordUtils.getSalt(30);
        
            // Protect user's password. The generated value can be stored in DB.
            String mySecurePassword = PasswordUtils.generateSecurePassword(pword, salt);
            
            String sql = "INSERT INTO `employees`(`id`, `employee_key`, `title`, `firstname`, `lastname`, `username`, `email`, `password`, `salt`, `last_login`, `status`, `date_created`) VALUES (0,?,?,?,?,?,?,?,?,?,?,?)";
            try {  
                pst = conn.connection.prepareStatement(sql);
                pst.setString(1, employee_key);
                pst.setString(2, title);
                pst.setString(3, fname);
                pst.setString(4, lname);
                pst.setString(5, uname);
                pst.setString(6, emailt);
                pst.setString(7, mySecurePassword);
                pst.setString(8, salt);
                pst.setTimestamp(9, null);
                pst.setInt(10, 0);
                pst.setTimestamp(11, (Timestamp) date);
                
                int save = pst.executeUpdate();
                if (save > 0) {
                    JOptionPane.showMessageDialog(null, "New Employee is created");
                    firstname.setText("");
                    lastname.setText("");
                    password.setText("");
                    username.setText("");
                    email.setText("");
                    
                    //reload table
                    getAllEmployees();
                }
            } catch (SQLException ex) {
                Logger.getLogger(AdminDashboard.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            JOptionPane.showMessageDialog(null, "All fields is required");
        }
    }
    
    public void getAllEmployees() throws SQLException {
        
        isLoading = true;
        
        String sql = "SELECT `id`, `employee_key`, `title`, `firstname`, `lastname`, `username`, `email`, `password`, `last_login`, `status`, `date_created` FROM `employees` ORDER BY date_created desc";
        
        //clear all rows
        DefaultTableModel dtm = (DefaultTableModel) listemployees.getModel();
        dtm.setRowCount(0);
        dtm.setColumnCount(0);
        
        pst = conn.connection.prepareStatement(sql);  
        rs = pst.executeQuery();
        int count = 0;
        listemployees.setModel(model);
        model.addColumn("Id");
        model.addColumn("Firstname");
        model.addColumn("Lastname");
        model.addColumn("Username");
        model.addColumn("Email");
        model.addColumn("Title");
        model.addColumn("Last login");
        model.addColumn("Date Created");
        model.addColumn("Status");
        
        while(rs.next()) {
            
            isLoading = false;
            
            count++;
            model.addRow(new Object[]{count,rs.getString("firstname"), rs.getString("lastname"),
                rs.getString("username"),rs.getString("email"),
                rs.getString("title"),rs.getString("last_login"),
                rs.getString("date_created"), 
                rs.getInt("status") == 0 ? "Inactive" : "Active"
            });
        }
    }
    
    private void exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMouseClicked
        // TODO add your handling code here:
        prefs.remove("employee_key");
        prefs.remove("firstname");
        prefs.remove("lastname");
        prefs.remove("username");
        prefs.remove("email");
        prefs.remove("title");
        this.dispose();
        new Login().setVisible(true);
    }//GEN-LAST:event_exitMouseClicked

    private void refreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshMouseClicked
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            getAllEmployees();
        } catch (SQLException ex) {
            Logger.getLogger(AdminDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_refreshMouseClicked

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            saveAccount(title.getSelectedItem().toString(),firstname.getText().toString(), lastname.getText().toString(), username.getText().toString(), password.getText().toString(), email.getText().toString());
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(AdminDashboard.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(AdminDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        
            // TODO add your handling code here:
            
            int selectedIndex = listemployees.getSelectedRow();
            DefaultTableModel model = (DefaultTableModel) listemployees.getModel();
            
            String uname = model.getValueAt(selectedIndex, 3).toString();
            
            if (firstname.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please firstname is required");
            }
            if (lastname.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please lastname is required");
            }
            if (username.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please username is required");
            }
            if (!title.getSelectedItem().toString().isEmpty() && !firstname.getText().isEmpty() && !lastname.getText().isEmpty() && !username.getText().isEmpty()) {
            try {
                String sql = "UPDATE `employees` SET `title`=?,`firstname`=?,`lastname`=?,`username`=?,`email`=? WHERE username=?";
                pst = conn.connection.prepareStatement(sql);
                pst.setString(1, title.getSelectedItem().toString());
                pst.setString(2, firstname.getText());
                pst.setString(3, lastname.getText());
                pst.setString(4, username.getText());
                pst.setString(5, email.getText());
                pst.setString(6, uname);
                pst.execute();
                JOptionPane.showMessageDialog(null, "Updated");
                save.setEnabled(true);
                update.setEnabled(false);
                start.setEnabled(false);
                stop.setEnabled(false);
                delete.setEnabled(false);
                password.setEnabled(true);
                firstname.setText("");
                lastname.setText("");
                password.setText("");
                username.setText("");
                email.setText("");

                getAllEmployees();
            } catch (SQLException ex) {
                Logger.getLogger(AdminDashboard.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_updateActionPerformed

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
        // TODO add your handling code here:
        int selectedIndex = listemployees.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) listemployees.getModel();

        String uname = model.getValueAt(selectedIndex, 3).toString();

        if (uname.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Missing username");
        } 
       
        if (!uname.isEmpty()) {
            try {
                String sql = "UPDATE `employees` SET `status`=? WHERE username=?";
                pst = conn.connection.prepareStatement(sql);
                pst.setInt(1, 0);
                pst.setString(2, uname);
                pst.execute();
                save.setEnabled(true);
                update.setEnabled(false);
                start.setEnabled(false);
                stop.setEnabled(false);
                delete.setEnabled(false);
                password.setEnabled(true);
                firstname.setText("");
                lastname.setText("");
                password.setText("");
                username.setText("");
                email.setText("");

                getAllEmployees();
            } catch (SQLException ex) {
                Logger.getLogger(AdminDashboard.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_stopActionPerformed

    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        // TODO add your handling code here:
        int selectedIndex = listemployees.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) listemployees.getModel();

        String uname = model.getValueAt(selectedIndex, 3).toString();

        if (uname.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Missing username");
        } 
       
        if (!uname.isEmpty()) {
            try {
                String sql = "UPDATE `employees` SET `status`=? WHERE username=?";
                pst = conn.connection.prepareStatement(sql);
                pst.setInt(1, 1);
                pst.setString(2, uname);
                pst.execute();
                save.setEnabled(true);
                update.setEnabled(false);
                start.setEnabled(false);
                stop.setEnabled(false);
                delete.setEnabled(false);
                password.setEnabled(true);
                firstname.setText("");
                lastname.setText("");
                password.setText("");
                username.setText("");
                email.setText("");

                getAllEmployees();
            } catch (SQLException ex) {
                Logger.getLogger(AdminDashboard.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_startActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        int selectedIndex = listemployees.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) listemployees.getModel();

        String uname = model.getValueAt(selectedIndex, 3).toString();
        
        //show confirmation
        int dialogResult = JOptionPane.showConfirmDialog(null, "Would you like to delete this account");
        if(dialogResult == JOptionPane.YES_OPTION){
            ((DefaultTableModel)listemployees.getModel()).removeRow(selectedIndex);
            try {
                String sql = "DELETE FROM `employees` WHERE username=?";
                pst = conn.connection.prepareStatement(sql);
                pst.setString(1, uname);
                pst.execute();
                save.setEnabled(true);
                update.setEnabled(false);
                start.setEnabled(false);
                stop.setEnabled(false);
                delete.setEnabled(false);
                password.setEnabled(true);
                firstname.setText("");
                lastname.setText("");
                password.setText("");
                username.setText("");
                email.setText("");

                getAllEmployees();
                
            } catch (SQLException ex) {
                Logger.getLogger(AdminDashboard.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void listemployeesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listemployeesMouseClicked
        // TODO add your handling code here:
        
        delete.setEnabled(true);
        update.setEnabled(true);
        save.setEnabled(false);
        clear.setEnabled(true);
        
        DefaultTableModel model = (DefaultTableModel) listemployees.getModel();
        int selectedIndex = listemployees.getSelectedRow();
        
        title.setSelectedItem(model.getValueAt(selectedIndex, 5));
        firstname.setText(model.getValueAt(selectedIndex, 1).toString());
        lastname.setText(model.getValueAt(selectedIndex, 2).toString());
        username.setText(model.getValueAt(selectedIndex, 3).toString());
        email.setText(model.getValueAt(selectedIndex, 4).toString());
        password.setEnabled(false);
        
        if (model.getValueAt(selectedIndex, 8).toString().equals("Inactive")) {
            start.setEnabled(true);
            stop.setEnabled(false);
        }else{
            stop.setEnabled(true);
            start.setEnabled(false);
        }
    }//GEN-LAST:event_listemployeesMouseClicked

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        // TODO add your handling code here:
        save.setEnabled(true);
        update.setEnabled(false);
        start.setEnabled(false);
        stop.setEnabled(false);
        delete.setEnabled(false);
        password.setEnabled(true);
        firstname.setText("");
        lastname.setText("");
        password.setText("");
        username.setText("");
        email.setText("");
    }//GEN-LAST:event_clearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminDashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clear;
    private javax.swing.JButton delete;
    private javax.swing.JTextField email;
    private javax.swing.JLabel exit;
    private javax.swing.JTextField firstname;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextField lastname;
    private javax.swing.JTable listemployees;
    private javax.swing.JPasswordField password;
    private javax.swing.JLabel refresh;
    private javax.swing.JButton save;
    private javax.swing.JButton start;
    private javax.swing.JButton stop;
    private javax.swing.JComboBox<String> title;
    private javax.swing.JButton update;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables
}
