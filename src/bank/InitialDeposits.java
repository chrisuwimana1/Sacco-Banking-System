/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bank;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author chris
 */
public class InitialDeposits extends javax.swing.JFrame {

    /**
     * Creates new form InitialDeposits
     */
    PreparedStatement pst = null;
    ResultSet rs = null;
    DBConnection conn;
    DefaultTableModel model = new DefaultTableModel();

    public InitialDeposits() {
        initComponents();
        try {
            conn = new DBConnection();
        } catch (BackingStoreException ex) {
            Logger.getLogger(InitialDeposits.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        list_of_initial_deposits = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        account_number = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        account_choice = new javax.swing.JComboBox<>();
        status = new javax.swing.JComboBox<>();
        go = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        list_of_initial_deposits.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Account Number", "Customer Name", "Paid Amount", "Remaining Amount"
            }
        ));
        jScrollPane1.setViewportView(list_of_initial_deposits);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Parts Sociales"));

        account_number.setEnabled(false);

        jLabel2.setText("Status:");

        jLabel1.setText("Account Choice:");

        jLabel3.setText("Account Number:");

        account_choice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Specific Account" }));
        account_choice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                account_choiceActionPerformed(evt);
            }
        });

        status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fully Paid", "Partially Paid" }));

        go.setText("GO");
        go.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(status, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(account_number, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(account_choice, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(go)))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(account_choice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(account_number, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addComponent(go)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1076, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void filterData(String status) throws ParseException {
        DefaultTableModel dtm = (DefaultTableModel) list_of_initial_deposits.getModel();
        dtm.setRowCount(0);
        dtm.setColumnCount(0);
        try {
            if (status.equals("Fully Paid")) {
                //System.out.println("IN");

                String sql = "Select Initial_Deposit_Amount, Remaining_Amount, initial_deposit.Account_Number, c.Customer_Name from `initial_deposit` inner JOIN customer_information c on c.Account_NumberAccount_Number = initial_deposit.Account_Number WHERE Remaining_Amount = 0";
                pst = conn.connection.prepareStatement(sql);
                rs = pst.executeQuery(sql);
                list_of_initial_deposits.setModel(model);
                model.addColumn("Account Number");
                model.addColumn("Customer Name");
                model.addColumn("Paid Amount");
                model.addColumn("Remaining Amount");
                while (rs.next()) {
                    //count++;
                    model.addRow(new Object[]{rs.getString("Account_Number"), rs.getString("Customer_Name"),
                        rs.getString("Initial_Deposit_Amount"), rs.getString("Remaining_Amount"),});
                }
            } else {
                String sql = "Select Initial_Deposit_Amount, Remaining_Amount, initial_deposit.Account_Number, c.Customer_Name from `initial_deposit` inner JOIN customer_information c on c.Account_Number = initial_deposit.Account_Number WHERE Remaining_Amount > 0";
                pst = conn.connection.prepareStatement(sql);
                rs = pst.executeQuery(sql);
                list_of_initial_deposits.setModel(model);
                model.addColumn("Account Number");
                model.addColumn("Customer Name");
                model.addColumn("Paid Amount");
                model.addColumn("Remaining Amount");
                while (rs.next()) {
                    //count++;
                    model.addRow(new Object[]{rs.getString("Account_Number"), rs.getString("Customer_Name"),
                        rs.getString("Initial_Deposit_Amount"), rs.getString("Remaining_Amount"),});
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }

    private void filterDatabyAccount() throws ParseException {
        String accountNumber = account_number.getText();
        if (!accountNumber.isEmpty()) {
            try {
                String sql = "Select Initial_Deposit_Amount, Remaining_Amount, initial_deposit.Account_Number, c.Customer_Name from `initial_deposit` inner JOIN customer_information c on c.Account_Number = initial_deposit.Account_Number WHERE initial_deposit.Account_Number = ?";
                pst = conn.connection.prepareStatement(sql);
                pst.setString(1, accountNumber);
                
                rs = pst.executeQuery();
                list_of_initial_deposits.setModel(model);
                model.addColumn("Account Number");
                model.addColumn("Customer Name");
                model.addColumn("Paid Amount");
                model.addColumn("Remaining Amount");
                while (rs.next()) {
                    //count++;
                    model.addRow(new Object[]{rs.getString("Account_Number"), rs.getString("Customer_Name"),
                        rs.getString("Initial_Deposit_Amount"), rs.getString("Remaining_Amount"),});
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }

        } else {
            JOptionPane.showMessageDialog(null, "Enter the account number please!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    private void goActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goActionPerformed
        // TODO add your handling code here:
        String accountChoice = (String) account_choice.getSelectedItem();
        String status = (String) this.status.getSelectedItem();
        if (accountChoice.equalsIgnoreCase("All")) {
            try {
                filterData(status);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }

        } else {
            try {
                filterDatabyAccount();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            };
        }

    }//GEN-LAST:event_goActionPerformed

    private void account_choiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_account_choiceActionPerformed
        // TODO add your handling code here:
        if (account_choice.getSelectedItem().toString().equals("Specific Account")) {
            account_number.setEnabled(true);
            status.setEnabled(false);
        } else {
            account_number.setEnabled(false);
            status.setEnabled(true);
        }
    }//GEN-LAST:event_account_choiceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InitialDeposits.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InitialDeposits.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InitialDeposits.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InitialDeposits.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InitialDeposits().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> account_choice;
    private javax.swing.JTextField account_number;
    private javax.swing.JButton go;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable list_of_initial_deposits;
    private javax.swing.JComboBox<String> status;
    // End of variables declaration//GEN-END:variables
}
