/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bank;

import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import static java.awt.image.ImageObserver.HEIGHT;
import static java.awt.image.ImageObserver.WIDTH;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author limitlessapps
 */
public class UploadAccountSignature extends javax.swing.JFrame {

    /**
     * Creates new form UploadAccountFiles
     */
    DBConnection conn;
    private DatabaseMetaData databaseMetaData;
    private ResultSet rs;
    PreparedStatement pst;
    private static final int IMG_WIDTH = 120;
    private static final int IMG_HEIGHT = 120;
    ImageIcon photo;
    WritableRaster raster;
    DataBufferByte data;
    File image;
    public UploadAccountSignature() {
        initComponents();
        
        try {
            conn = new DBConnection();
        } catch (BackingStoreException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        account_number = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        p_signature = new javax.swing.JLabel();
        signature = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Account Number:");

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Signature"));

        p_signature.setBackground(new java.awt.Color(255, 255, 255));

        signature.setText("Upload");
        signature.setEnabled(false);
        signature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signatureActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(signature)
                .addGap(197, 197, 197))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(p_signature, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(p_signature, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(signature))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(account_number, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(account_number, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(501, 396));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        searchAccount(account_number.getText());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void signatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signatureActionPerformed
        // TODO add your handling code here:
        upload_file(p_signature);
    }//GEN-LAST:event_signatureActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UploadAccountSignature.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UploadAccountSignature.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UploadAccountSignature.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UploadAccountSignature.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UploadAccountSignature().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField account_number;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel p_signature;
    private javax.swing.JButton signature;
    // End of variables declaration//GEN-END:variables
    private void upload_file(JLabel picture_d){
        JFileChooser chooser;
        FileNameExtensionFilter filter;
        chooser = new JFileChooser();
        
        chooser.setCurrentDirectory(image);
        filter = new FileNameExtensionFilter("jpeg, png", "jpg", "png");
        chooser.addChoosableFileFilter(filter);
        int i = chooser.showOpenDialog(this);
        if (i == JFileChooser.APPROVE_OPTION) {
            image = chooser.getSelectedFile();
            try {
                BufferedImage originalImage = ImageIO.read(image);
                int type = originalImage.getType() == 0 ? BufferedImage.TYPE_INT_ARGB : originalImage.getType();
                
                BufferedImage resizeImageJPG =resizeImage(originalImage, type);
                photo = new ImageIcon(toImage(resizeImageJPG));
                
                raster = resizeImageJPG.getRaster();
                data = (DataBufferByte)raster.getDataBuffer();
                Image dimg = originalImage.getScaledInstance(picture_d.getWidth(), picture_d.getHeight(),
                Image.SCALE_SMOOTH);
                ImageIcon imgThisImg = new ImageIcon(dimg);
                picture_d.setText("");
                picture_d.setIcon(imgThisImg);
                
                if(account_number.getText().isEmpty()){
                    JOptionPane.showMessageDialog(null, "Account Number field is required", "Error", JOptionPane.ERROR_MESSAGE);
                }
                else if (check_uploaded("SIGNATURE", account_number.getText())) {
                    File file=new File(image.getAbsolutePath());
                    FileInputStream fis=new FileInputStream(file);
                    String sql = "UPDATE `account_files` SET `file`=? WHERE AccountNumber = ? AND file_title = ?";
                    try {
                        pst = conn.connection.prepareStatement(sql);
                        pst.setBinaryStream(1, fis);
                        pst.setString(2, account_number.getText());
                        pst.setString(3, "SIGNATURE");
                        pst.execute();
                        
                        JOptionPane.showMessageDialog(null, "Uploaded");
                        
                    } catch (SQLException e1) {
                        JOptionPane.showMessageDialog(null, e1);
                    }
                }else{
                    File file=new File(image.getAbsolutePath());
                    FileInputStream fis=new FileInputStream(file);
                    String sql = "INSERT INTO `account_files`(`id`, `AccountNumber`, `file_title`, `file`, `date_created`) VALUES (0,?,?,?,?)";
                    java.sql.Timestamp date = new java.sql.Timestamp(new java.util.Date().getTime());
                    try {
                        pst = conn.connection.prepareStatement(sql);
                        pst.setString(1, account_number.getText());
                        pst.setString(2, "SIGNATURE");
                        pst.setBinaryStream(3, fis);
                        pst.setTimestamp(4, date);
                        
                        pst.execute();
                        
                        JOptionPane.showMessageDialog(null, "Uploaded");
                        
                    } catch (SQLException e1) {
                        JOptionPane.showMessageDialog(null, e1);
                    }
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
            repaint();
            chooser.setCurrentDirectory(image);
        }
    }
    
    private boolean check_uploaded(String title, String accountNumber){
        try {
            String sql = "SELECT `file_title`, `file` FROM `account_files` where AccountNumber = ? AND file_title= ?";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, accountNumber);
            pst.setString(2, title);
            rs = pst.executeQuery();
            if (rs.next()) {
                return  true;
            }else{
                return  false;
            }
        } catch (SQLException ex) {
            Logger.getLogger(UploadAccountIDs.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }
    
    private Image toImage(BufferedImage bufferedImage) {
        return Toolkit.getDefaultToolkit().createImage(bufferedImage.getSource());
    }

    private BufferedImage resizeImage(BufferedImage originalImage, int type) {
        BufferedImage resizeImage=new BufferedImage(WIDTH, HEIGHT, type);
        Graphics2D g =resizeImage.createGraphics();
        g.drawImage(originalImage, 0,0, IMG_WIDTH, IMG_HEIGHT, null);
        g.dispose();
        
        return resizeImage;
    }
    
    private void searchAccount(String accountNumber) {
        try {
            String sql = "SELECT Account_Number, Customer_ID, Customer_Name, National_ID_Number from customer_information where Account_Number = ?";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, accountNumber);
            rs = pst.executeQuery();
            if (rs.next()) {
                signature.setEnabled(true);
                display_profile_pic(accountNumber);
            } else {
                JOptionPane.showMessageDialog(null, "Sorry this account does not exist!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }
    
    private void display_profile_pic(String accountNumber) {
       try {
            String sql = "SELECT `file_title`, `file` FROM `account_files` where AccountNumber = ?";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, accountNumber);
            rs = pst.executeQuery();
            while (rs.next()) {
                if (rs.getString("file_title").equalsIgnoreCase("SIGNATURE")) {
                      
                    java.sql.Blob blob = rs.getBlob("file");  
                    InputStream in = blob.getBinaryStream();  
                    try {
                        BufferedImage image_ = ImageIO.read(in);
                        photo = new ImageIcon(toImage(image_));
                        raster = image_.getRaster();
                        data = (DataBufferByte)raster.getDataBuffer();
                        Image dimg = image_.getScaledInstance(p_signature.getWidth(), p_signature.getHeight(),
                        Image.SCALE_SMOOTH);
                        ImageIcon imgThisImg = new ImageIcon(dimg);
                        p_signature.setText("");
                        p_signature.setIcon(imgThisImg);
                    } catch (IOException ex) {
                        Logger.getLogger(UploadAccountIDs.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }
}
