/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bank;

import com.placeholder.PlaceHolder;
import javax.swing.*;
import java.util.*;
import java.sql.*;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;

/**
 *
 * @author chris
 */
public class Withdraw extends javax.swing.JFrame {

    /**
     * Creates new form Withdrawal
     */
    PreparedStatement pst = null;
    ResultSet rs = null;
    DBConnection conn;

    public ArrayList<String> listOfcharges = new ArrayList<>();
    PlaceHolder holder;
    Preferences prefs = Preferences.userNodeForPackage(Teller_Dashboard.class);
    String n_employee_key, employee_name;
    String customerId = "";
    String country = "RW";
    String leBook = "A01";
    String currency = "RWF";
    String processOuc = "001"; //branch Id
    String cardNumber = "";
    String merchantId = "";
    String transactionChannel = "PBI";
    float transaction_net_amount;
    int transactionCountDebit;
    int transactionCountCredit;
    private ArrayList<String> listOfSelectedCharges = new ArrayList<>();
    float selectedTransactionCharge = 0;
    DecimalFormat formatter = new DecimalFormat("#,###.00");

    public Withdraw() {
        initComponents();
        try {
            conn = new DBConnection();
        } catch (BackingStoreException ex) {
            Logger.getLogger(Withdraw.class.getName()).log(Level.SEVERE, null, ex);
        }
        //listCharges();
        getCountTransactionDebit();
        getCountTransactionCredit();
        holder = new PlaceHolder(debited_amount, "0");
        teller.setText(prefs.get("firstname", "") + " " + prefs.get("lastname", ""));
        n_employee_key = prefs.get("employee_key", "");
        employee_name = prefs.get("firstname", "") + " " + prefs.get("lastname", "");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Withdraw = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        calculate_button = new javax.swing.JButton();
        customer_id_number = new javax.swing.JTextField();
        teller = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        debited_amount = new javax.swing.JTextField();
        current_balance = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        new_balance = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        transaction_type = new javax.swing.JComboBox<>();
        transaction_description = new javax.swing.JTextField();
        transaction_code = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        customer_name = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        search_account_number = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        transaction_date = new com.toedter.calendar.JDateChooser();
        account_number = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        tenue_de_compte = new javax.swing.JCheckBox();
        fiche = new javax.swing.JCheckBox();
        clearence_form = new javax.swing.JCheckBox();
        historique = new javax.swing.JCheckBox();
        bordereau = new javax.swing.JCheckBox();
        missing_carnet = new javax.swing.JCheckBox();
        carnet = new javax.swing.JCheckBox();
        salary_commission = new javax.swing.JCheckBox();
        jLabel13 = new javax.swing.JLabel();
        total_withdrawal_charges = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("WITHDRAW");

        Withdraw.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/web-icon.png"))); // NOI18N
        Withdraw.setText("WITHDRAW");
        Withdraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WithdrawActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Withdraw"));

        calculate_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/ok1.png"))); // NOI18N
        calculate_button.setText("Total");
        calculate_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculate_buttonActionPerformed(evt);
            }
        });

        customer_id_number.setEditable(false);

        teller.setEditable(false);

        jLabel5.setText("Debited Amount (*):");

        jLabel9.setText("Date (*):");

        current_balance.setEditable(false);
        current_balance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                current_balanceActionPerformed(evt);
            }
        });

        jLabel7.setText("Description:");

        new_balance.setEditable(false);

        jLabel6.setText("Type:");

        transaction_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Withdraw" }));
        transaction_type.setEnabled(false);

        transaction_description.setText("Withdraw");

        transaction_code.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Withdrawal Slips", "Credit - Clearing ACH", "Credit - Clearing RTGS", "Direct Debit", "Standing Orders", "Payment Order - Local" }));
        transaction_code.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transaction_codeActionPerformed(evt);
            }
        });

        jLabel2.setText("Customer Name:");

        customer_name.setEditable(false);

        jLabel1.setText("Account Number:");

        jLabel3.setText("ID Number:");

        jLabel11.setText("Transaction Code (*):");

        search_account_number.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/search.gif"))); // NOI18N
        search_account_number.setText("Search");
        search_account_number.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_account_numberActionPerformed(evt);
            }
        });

        jLabel8.setText("Teller:");

        jLabel4.setText("Current Balance:");

        jLabel12.setText("Charges:");

        tenue_de_compte.setText("Tenue de Compte");

        fiche.setText("Fiche");

        clearence_form.setText("Clearence Form");

        historique.setText("Historique");

        bordereau.setText("Bordereau");

        missing_carnet.setText("Missing Carnet");

        carnet.setText("Carnet");

        salary_commission.setText("Salary Commission");

        jLabel13.setText("Total Charges:");

        total_withdrawal_charges.setEditable(false);
        total_withdrawal_charges.setText("0");

        jLabel14.setText("New Balance:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel11)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(tenue_de_compte)
                                                        .addComponent(historique))
                                                    .addGap(18, 18, 18)
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(bordereau)
                                                        .addComponent(fiche))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(carnet)
                                                        .addComponent(salary_commission)))
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                                    .addGap(12, 12, 12)
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                            .addComponent(new_balance, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                            .addComponent(calculate_button, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(teller, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(transaction_date, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(total_withdrawal_charges, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                            .addGap(0, 0, Short.MAX_VALUE)))))
                                            .addGap(18, 18, 18)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(clearence_form)
                                                .addComponent(missing_carnet))
                                            .addGap(138, 138, 138))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(transaction_description, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(transaction_code, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(current_balance, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(debited_amount, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(0, 0, Short.MAX_VALUE))))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(12, 12, 12)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(customer_name)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(account_number, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                                            .addComponent(search_account_number))
                                        .addComponent(customer_id_number, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(transaction_type, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(21, 21, 21))))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING))
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addComponent(jLabel7)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13))
                .addContainerGap(80, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(account_number, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search_account_number))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(customer_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(customer_id_number, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(transaction_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(transaction_code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(transaction_description, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(current_balance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(debited_amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(tenue_de_compte)
                            .addComponent(fiche)
                            .addComponent(carnet))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(historique)
                            .addComponent(bordereau)
                            .addComponent(salary_commission)
                            .addComponent(missing_carnet)))
                    .addComponent(clearence_form))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 21, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(total_withdrawal_charges, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel14)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(new_balance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(calculate_button)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9)
                    .addComponent(transaction_date, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(teller, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/cancel-icon.png"))); // NOI18N
        jButton1.setText("CANCEL");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(193, 193, 193)
                        .addComponent(Withdraw)
                        .addGap(43, 43, 43)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(157, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Withdraw)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private ArrayList<String> getArrayListOfSelectedCharges() {

        ArrayList<String> selectedCharges = new ArrayList<>();

        if (tenue_de_compte.isSelected()) {
            selectedCharges.add(tenue_de_compte.getText());
        }
        if (historique.isSelected()) {
            selectedCharges.add(historique.getText());
        }
        if (carnet.isSelected()) {
            selectedCharges.add(carnet.getText());
        }
        if (fiche.isSelected()) {
            selectedCharges.add(fiche.getText());
        }
        if (bordereau.isSelected()) {
            selectedCharges.add(bordereau.getText());
        }
        if (salary_commission.isSelected()) {
            selectedCharges.add(salary_commission.getText());
        }
        if (clearence_form.isSelected()) {
            selectedCharges.add(clearence_form.getText());
        }
        if (missing_carnet.isSelected()) {
            selectedCharges.add(missing_carnet.getText());
        }

        return selectedCharges;
    }

    private void getCountTransactionCredit() {
        try {
            String sql = "SELECT Trans_Count_CR FROM financial_transaction WHERE transaction_type = 'Deposit' ORDER BY id DESC LIMIT 1";
            pst = conn.connection.prepareStatement(sql);
            rs = pst.executeQuery();
            if (rs.next()) {
                transactionCountCredit = rs.getInt("Trans_Count_CR");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void getCountTransactionDebit() {
        try {
            String sql = "SELECT COUNT(*) AS counts FROM (SELECT transactions.transaction_id FROM transactions WHERE transaction_type = 'Withdraw') x";
            pst = conn.connection.prepareStatement(sql);
            rs = pst.executeQuery();
            if (rs.next()) {
                transactionCountDebit = rs.getInt("counts") + 1;
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    public static Calendar toCalendar(java.util.Date date) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        return cal;
    }

    public int getMonthYear(Calendar date) {
        int month = date.get(Calendar.MONTH) + 1;
        int year = date.get(Calendar.YEAR);

        //if ()
        int monthYear = Integer.parseInt(month + "" + year);
        return monthYear;
    }

    private String getChargeAmount(String chargename) {
        String amount = "";
        String sql = "Select amount from charges WHERE charge_name='" + chargename + "'";
        try {
            pst = conn.connection.prepareStatement(sql);
            rs = pst.executeQuery();
            if (rs.next()) {
                amount = rs.getString("amount");
                total_withdrawal_charges.setText(amount);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            try {
                rs.close();
                pst.close();
            } catch (SQLException e) {

            }
        }
        return amount;
    }

    public String getChargeCalculation(String chargename) {
        String chargeCalculation = "";
        String sql = "Select charge_calculation from charges WHERE charge_name='" + chargename + "'";
        try {
            pst = conn.connection.prepareStatement(sql);
            rs = pst.executeQuery();
            if (rs.next()) {
                chargeCalculation = rs.getString("charge_calculation");
                //totalCharges.setText(amount);  
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            try {
                rs.close();
                pst.close();
            } catch (SQLException e) {

            }
        }
        return chargeCalculation;
    }

    private void searchAccount(String accountNumber) {
        try {
            String sql = "SELECT Account_Number,Customer_ID, Customer_Name, National_ID_Number from customer_information where Account_Number = ?";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, accountNumber);
            rs = pst.executeQuery();
            if (rs.next()) {
                customerId = rs.getString("Customer_ID");
                customer_name.setText(rs.getString("Customer_Name"));
                customer_id_number.setText(rs.getString("National_ID_Number"));
                //current_balance.setText(getCurrrentBalance(rs.getString("account_number")).toString());
                current_balance.setText(String.valueOf(getCurrrentBalance(rs.getString("Account_Number"))));
            } else {
                JOptionPane.showMessageDialog(null, "Sorry this account does not exist!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private float getCurrrentBalance(String accountNumber) {
        String sql = "SELECT * FROM balance WHERE Account_Number = ?";
        float balance = 0;
        try {
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, accountNumber);
            rs = pst.executeQuery();
            if (rs.next()) {
                balance = rs.getFloat("current_balance");
            }
        } catch (SQLException ex) {
            // TODO Auto-generated catch block
            JOptionPane.showMessageDialog(null, ex);
        }
        return balance;
    }

    private String getTransactionCode(String transaction) {

        switch (transaction) {
            case "Credit - Clearing ACH":
                return "TC00005";
            case "Credit - Clearing RTGS":
                return "TC00006";
            case "Direct Debit":
                return "TC00007";
            case "Standing Orders":
                return "TC00008";
            case "Withdrawal Slips":
                return "TC00009";
            case "Deposite Slips":
                return "TC00010";
            case "Payment Order - Local":
                return "TC00056";
            default:
                return "";
        }
    }

    private void updateTransactionDate(String accountNumber, String transactionDate) {
        try {
            String sql = "update account_information set Last_Transaction_Date	='" + transactionDate + "' where Customer_ID='" + customerId + "'";
            pst = conn.connection.prepareStatement(sql);
            pst.execute();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void updateFinancialTransactionsTable(String country, String leBook, int yearMonth,
            String accountNumber, String processOuc, String cardNumber, String merchantId,
            String transactionChannel, String transactionCode, String currency,
            int transactionCountDebit, int transactionCountCredit, float transactionAmountDebit,
            float transactionAmountCredit, String transactionDate, String transactionType) {

        try {
            String sql = "INSERT INTO `financial_transaction`(`Country`, "
                    + "`LE_Book`, "
                    + "`Year_Month`, "
                    + "`Account_Number`, "
                    + "`Process_Ouc`, "
                    + "`Card_No`, "
                    + "`Merchant_Id`, "
                    + "`Transaction_Channel`, "
                    + "`Transaction_Code`, "
                    + "`Currency`, "
                    + "`Trans_Count_DR`, "
                    + "`Trans_Count_CR`, "
                    + "`Trans_Amount_DR_FCY`, "
                    + "`Trans_Amount_CR_FCY`, "
                    + "`Trans_Amount_DR_LCY`, "
                    + "`Trans_Amount_CR_LCY`, "
                    + "`transaction_type`, "
                    + "`transaction_date`) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, country);
            pst.setString(2, leBook);
            pst.setInt(3, yearMonth);
            pst.setString(4, accountNumber);
            pst.setString(5, processOuc);
            pst.setString(6, cardNumber);
            pst.setString(7, merchantId);
            pst.setString(8, transactionChannel);
            pst.setString(9, transactionCode);
            pst.setString(10, currency);
            pst.setInt(11, transactionCountDebit);
            pst.setInt(12, transactionCountCredit);
            pst.setFloat(13, transactionAmountDebit);
            pst.setFloat(14, transactionAmountCredit);
            pst.setFloat(15, transactionAmountDebit);
            pst.setFloat(16, transactionAmountCredit);
            pst.setString(17, transactionType);
            pst.setString(18, transactionDate);
            pst.execute();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private boolean doesAccountExist(String acc) throws SQLException {
        boolean accountExists = false;
        // TODO Auto-generated method stub
        if (!acc.isEmpty()) {
            String sql = "SELECT `Account_Number` FROM `customer_information` WHERE Account_Number = ?";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, acc);
            rs = pst.executeQuery();
            if (rs.next()) {
                accountExists = true;
            }
        }
        return accountExists;
    }

    private boolean validateWithdrawFields() {

        if (current_balance.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The current balance field is required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (debited_amount.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The debited amount field is required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else {
            return true;
        }
    }

    private boolean recordWithdrawal(float transactionAmount, float transactionCharge, float transaction_net_amount,
            float previousBalance, float currentBalance, String transactionDate, String transactionType,
            String transactionDescription, String accountNumber, String employeeKey) throws SQLException, ParseException {
        boolean message;

        String sql = "insert into transactions(transaction_amount,"
                + "transaction_charge,"
                + "transaction_net_amount,"
                + "previous_balance,"
                + "current_balance,"
                + "transaction_date,"
                + "transaction_type,"
                + "transaction_description,"
                + "Account_Number,"
                + "employee_key) values (?,?,?,?,?,?,?,?,?,?)";
        pst = conn.connection.prepareStatement(sql);
        pst.setFloat(1, transactionAmount);
        pst.setFloat(2, transactionCharge);
        pst.setFloat(3, transaction_net_amount);
        pst.setFloat(4, previousBalance);
        pst.setFloat(5, currentBalance);
        pst.setString(6, transactionDate);
        pst.setString(7, transactionType);
        pst.setString(8, transactionDescription);
        pst.setString(9, accountNumber);
        pst.setString(10, employeeKey);
        int saved = pst.executeUpdate();

        if (saved > 0) {
            searchAccount(accountNumber);
            this.debited_amount.setText("");
            return message = true;
        }
        return message = false;

    }

    private void updateProductsTable(String chargeDescription, float transactionCharge, String transactionDate, String accountNumber) {
        try {
            String sql = "insert into product (description,amount,product_date,Account_Number) values(?,?,?,?)";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, chargeDescription);
            pst.setFloat(2, transactionCharge);
            pst.setString(3, transactionDate);
            pst.setString(4, accountNumber);
            pst.execute();
            //JOptionPane.showMessageDialog(null, "Successfully Withdraws");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void save_withdrawal(String accountNumber, String customerName, float previousBalance,
            float currentBalance, float transactionAmount, float transactionCharges, float transaction_net_amount, String transactionDate,
            String transactionType, String transactionDescription, String teller, float transactionAmountCredit,
            String transactionCode, int transactionCountDebit, float transactionAmountDebit, int yearMonth,
            String chargeDescription) throws SQLException {

        System.out.println(currentBalance);
        if (doesAccountExist(accountNumber)) {
            if (transactionAmount < 0) {
                JOptionPane.showMessageDialog(null, "Please specify amount to withdraw", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (previousBalance > transactionAmount) {

                String sql = "UPDATE `balance` SET `current_balance` = ?, date_changed  = ? WHERE Account_Number = ?";
                pst = conn.connection.prepareStatement(sql);
                pst.setFloat(1, Float.parseFloat(new_balance.getText()));
                pst.setString(2, transactionDate);
                pst.setString(3, accountNumber);

                int updated = pst.executeUpdate();
                if (updated > 0) {
                    try {
                        if (recordWithdrawal(transactionAmount, transactionCharges, transaction_net_amount, previousBalance, currentBalance,
                                transactionDate, transactionType, transactionDescription, accountNumber, n_employee_key)) {
                            JOptionPane.showMessageDialog(null, "Withdraw successfull!");
                            updateFinancialTransactionsTable(country, leBook, yearMonth, accountNumber, processOuc,
                                    cardNumber, merchantId, transactionChannel, transactionCode, currency,
                                    transactionCountDebit, transactionCountCredit, transactionAmountDebit,
                                    transactionAmountCredit, transactionDate, transactionType);
                            for (int i = 0; i < listOfSelectedCharges.size(); i++) {

                                selectedTransactionCharge = Float.parseFloat(getChargeAmount(listOfSelectedCharges.get(i)));
                                chargeDescription = listOfSelectedCharges.get(i);
                                System.out.println(chargeDescription);
                                updateProductsTable(chargeDescription, selectedTransactionCharge, transactionDate, accountNumber);
                            }
                            updateTransactionDate(accountNumber, transactionDate);
                            new WithdrawSuccess(accountNumber, customerName, previousBalance, transactionAmount, transactionCharges,
                                    currentBalance, transactionDate, employee_name).setVisible(true);
                        }
                    } catch (ParseException ex) {
                        Logger.getLogger(Deposit.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Insufficient funds!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "This account number (" + accountNumber + ") does not exist.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void search_account_numberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_account_numberActionPerformed
        // TODO add your handling code here:
        if (account_number.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Enter account number", "Error", JOptionPane.ERROR_MESSAGE);
            //save_person.setEnabled(false);
        } else {
            searchAccount(account_number.getText());
        }
    }//GEN-LAST:event_search_account_numberActionPerformed

    private void WithdrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WithdrawActionPerformed
        // TODO add your handling code here:

        if (account_number.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The account number field is required", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (transaction_code.getSelectedItem().toString().equalsIgnoreCase("Select One")) {
            JOptionPane.showMessageDialog(null, "The transaction code field required", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (new_balance.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The new balance field is required", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String transactionCode = getTransactionCode((String) transaction_code.getSelectedItem());
            //transactionCountCredit++;

            String accountNumber = account_number.getText();
            String customerName = customer_name.getText();
            float previousBalance = Float.parseFloat(current_balance.getText());
            float transactionAmount = Float.parseFloat(debited_amount.getText());
            float transactionCharges = Float.parseFloat(total_withdrawal_charges.getText());
            float currentBalance = Float.parseFloat(new_balance.getText());
            String chargeDescription = "";
            java.util.Date tdate = transaction_date.getDate();
            java.sql.Date transactionDate = new java.sql.Date(tdate.getTime());
            Calendar date = toCalendar(tdate);

            int yearMonth = getMonthYear(date);

            float transactionAmountDebit = transactionAmount;
            float transactionAmountCredit = 0;
            String transactionType = (String) transaction_type.getSelectedItem();
            String transactionDescription = transaction_description.getText();

            System.out.println(currentBalance);

            transaction_net_amount = transactionAmount + transactionCharges;
            listOfSelectedCharges = getArrayListOfSelectedCharges();

            try {
                save_withdrawal(accountNumber, customerName, previousBalance, currentBalance, transactionAmount, transactionCharges,
                        transaction_net_amount, transactionDate.toString(), transactionType, transactionDescription, teller.getText(),
                        transactionAmountCredit, transactionCode, transactionCountDebit,
                        transactionAmountDebit, yearMonth, chargeDescription);
            } catch (SQLException ex) {
                Logger.getLogger(Deposit.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_WithdrawActionPerformed

    private void calculate_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculate_buttonActionPerformed
        // TODO add your handling code here:
        if (validateWithdrawFields()) {
            try {
                float allCharges = 0;
                float newBalance = 0;
                float oldBalance = Float.parseFloat(current_balance.getText());
                float debitedAmount = Float.parseFloat(debited_amount.getText());

                if (tenue_de_compte.isSelected()) {
                    allCharges += Float.parseFloat(getChargeAmount(tenue_de_compte.getText()));
                }
                if (historique.isSelected()) {
                    allCharges += Float.parseFloat(getChargeAmount(historique.getText()));
                }
                if (carnet.isSelected()) {
                    allCharges += Float.parseFloat(getChargeAmount(carnet.getText()));
                }
                if (fiche.isSelected()) {
                    allCharges += Float.parseFloat(getChargeAmount(fiche.getText()));
                }
                if (bordereau.isSelected()) {
                    allCharges += Float.parseFloat(getChargeAmount(bordereau.getText()));
                }
                if (salary_commission.isSelected()) {
                    allCharges += Float.parseFloat(getChargeAmount(salary_commission.getText()));
                }
                if (clearence_form.isSelected()) {
                    allCharges += Float.parseFloat(getChargeAmount(clearence_form.getText()));
                }
                if (missing_carnet.isSelected()) {
                    allCharges += Float.parseFloat(getChargeAmount(missing_carnet.getText()));
                } else {
                    allCharges += 0;
                }

                if (oldBalance - debitedAmount < allCharges) {
                    JOptionPane.showMessageDialog(null, "Insufficient funds!", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    System.out.println(allCharges);
                    total_withdrawal_charges.setText(String.valueOf(allCharges));
                    newBalance = oldBalance - debitedAmount - allCharges;
                    new_balance.setText(String.valueOf(newBalance));
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_calculate_buttonActionPerformed

    private void transaction_codeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transaction_codeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_transaction_codeActionPerformed

    private void current_balanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_current_balanceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_current_balanceActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Withdraw.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Withdraw.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Withdraw.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Withdraw.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Withdraw().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Withdraw;
    private javax.swing.JTextField account_number;
    private javax.swing.JCheckBox bordereau;
    private javax.swing.JButton calculate_button;
    private javax.swing.JCheckBox carnet;
    private javax.swing.JCheckBox clearence_form;
    private javax.swing.JTextField current_balance;
    private javax.swing.JTextField customer_id_number;
    private javax.swing.JTextField customer_name;
    private javax.swing.JTextField debited_amount;
    private javax.swing.JCheckBox fiche;
    private javax.swing.JCheckBox historique;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox missing_carnet;
    private javax.swing.JTextField new_balance;
    private javax.swing.JCheckBox salary_commission;
    private javax.swing.JButton search_account_number;
    private javax.swing.JTextField teller;
    private javax.swing.JCheckBox tenue_de_compte;
    private javax.swing.JTextField total_withdrawal_charges;
    private javax.swing.JComboBox<String> transaction_code;
    private com.toedter.calendar.JDateChooser transaction_date;
    private javax.swing.JTextField transaction_description;
    private javax.swing.JComboBox<String> transaction_type;
    // End of variables declaration//GEN-END:variables
}
