/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bank;

import com.placeholder.PlaceHolder;
import java.awt.HeadlessException;
import java.sql.*;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.swing.*;

/**
 *
 * @author chris
 */
public class Deposit extends javax.swing.JFrame {

    /**
     * Creates new form Deposit
     */
    PreparedStatement pst = null;
    ResultSet rs = null;
    DBConnection conn;
    int transactionCountCredit;
    int transactionCountDebit;
    String customerId = "";
    PlaceHolder holder;
    Preferences prefs = Preferences.userNodeForPackage(Teller_Dashboard.class);
    PreparedStatement preparedStatement;
    String n_employee_key, employee_name;
    String country = "RW";
    String leBook = "519";
    String currency = "RWF";
    String processOuc = "001"; //branch Id
    String cardNumber = "";
    String merchantId = "";
    String transactionChannel = "PBI";
    float transaction_net_amount;
    float initialDepositAmount = 0;
    float remainingAmount = 0;
    float epargneObligatoire = 0;
    boolean doesCustomerHasEpargneObligatoire = false;
    private ArrayList<String> listOfSelectedCharges = new ArrayList<>();
    private ArrayList<Float> listOfSelectedAmountCharges = new ArrayList<>();
    float selectedTransactionCharge = 0;
    DecimalFormat formatter = new DecimalFormat("#,###.00");
    float c_balance=0;

    public Deposit() {
        initComponents();
        try {
            conn = new DBConnection();
        } catch (BackingStoreException ex) {
            Logger.getLogger(Deposit.class.getName()).log(Level.SEVERE, null, ex);
        }

        //deposit.setEnabled(false);
        holder = new PlaceHolder(credited_amount, "0");
        teller.setText(prefs.get("firstname", "") + " " + prefs.get("lastname", ""));
        n_employee_key = prefs.get("employee_key", "");
        employee_name = prefs.get("firstname", "") + " " + prefs.get("lastname", "");
        //listCharges();
        getCountTransactionCredit();
        getCountTransactionDebit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        account_number = new javax.swing.JTextField();
        customer_name = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        transaction_description = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        transaction_code = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        transaction_date = new com.toedter.calendar.JDateChooser();
        transaction_type = new javax.swing.JComboBox<>();
        search_account_number = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        credited_amount = new javax.swing.JTextField();
        teller = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        new_balance = new javax.swing.JTextField();
        calculate_button = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        customer_id_number = new javax.swing.JTextField();
        current_balance = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        initial_deposit_label = new javax.swing.JLabel();
        initial_deposit = new javax.swing.JTextField();
        tenue_de_compte = new javax.swing.JCheckBox();
        historique = new javax.swing.JCheckBox();
        carnet = new javax.swing.JCheckBox();
        fiche = new javax.swing.JCheckBox();
        jLabel12 = new javax.swing.JLabel();
        bordereau = new javax.swing.JCheckBox();
        salary_commission = new javax.swing.JCheckBox();
        clearence_form = new javax.swing.JCheckBox();
        missing_carnet = new javax.swing.JCheckBox();
        jLabel13 = new javax.swing.JLabel();
        total_deposit_charges = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        epargne_obligatoire_checkbox = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        epargne_obligatoire = new javax.swing.JTextField();
        tenue_de_compte_input = new javax.swing.JTextField();
        fiche_input = new javax.swing.JTextField();
        clearence_form_input = new javax.swing.JTextField();
        commission_input = new javax.swing.JTextField();
        historique_input = new javax.swing.JTextField();
        bordereau_input = new javax.swing.JTextField();
        missing_carnet_input = new javax.swing.JTextField();
        carnet_input = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        deposit = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("DEPOSIT");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Deposit"));

        customer_name.setEditable(false);
        customer_name.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel3.setText("ID Number:");

        transaction_description.setText("Deposit");

        jLabel11.setText("Transaction Code (*):");

        jLabel9.setText("Date (*):");

        transaction_code.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Deposite Slips", "Credit - Clearing ACH", "Credit - Clearing RTGS", "Direct Debit", "Standing Orders", "Payment Order - Local" }));

        jLabel7.setText("Description:");

        transaction_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Deposit", "Closing Balance" }));
        transaction_type.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                transaction_typeItemStateChanged(evt);
            }
        });
        transaction_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transaction_typeActionPerformed(evt);
            }
        });

        search_account_number.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/search.gif"))); // NOI18N
        search_account_number.setText("Search");
        search_account_number.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_account_numberActionPerformed(evt);
            }
        });

        jLabel2.setText("Customer Name:");

        jLabel6.setText("Type:");

        teller.setEditable(false);

        jLabel1.setText("Account Number:");

        jLabel4.setText("Current Balance:");

        new_balance.setEditable(false);
        new_balance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                new_balanceActionPerformed(evt);
            }
        });

        calculate_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/ok1.png"))); // NOI18N
        calculate_button.setText("Total");
        calculate_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculate_buttonActionPerformed(evt);
            }
        });

        jLabel5.setText("Credited Amount (*):");

        customer_id_number.setEditable(false);

        current_balance.setEditable(false);

        jLabel8.setText("Teller:");

        initial_deposit_label.setText("Part Social:");

        tenue_de_compte.setText("Tenue de Compte");
        tenue_de_compte.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tenue_de_compteStateChanged(evt);
            }
        });

        historique.setText("Historique");
        historique.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                historiqueStateChanged(evt);
            }
        });

        carnet.setText("Carnet");
        carnet.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                carnetStateChanged(evt);
            }
        });

        fiche.setText("Fiche");
        fiche.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ficheStateChanged(evt);
            }
        });

        jLabel12.setText("Charges:");

        bordereau.setText("Bordereau");
        bordereau.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                bordereauStateChanged(evt);
            }
        });

        salary_commission.setText("Commission");
        salary_commission.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                salary_commissionStateChanged(evt);
            }
        });

        clearence_form.setText("Clearence Form");
        clearence_form.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                clearence_formStateChanged(evt);
            }
        });

        missing_carnet.setText("Missing Carnet");
        missing_carnet.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                missing_carnetStateChanged(evt);
            }
        });

        jLabel13.setText("Total Charges:");

        total_deposit_charges.setEditable(false);
        total_deposit_charges.setText("0");

        jLabel14.setText("New Balance:");

        epargne_obligatoire_checkbox.setText("Yes");
        epargne_obligatoire_checkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                epargne_obligatoire_checkboxActionPerformed(evt);
            }
        });

        jLabel10.setText("Epargne Obligatoire:");

        epargne_obligatoire.setEnabled(false);
        epargne_obligatoire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                epargne_obligatoireActionPerformed(evt);
            }
        });

        tenue_de_compte_input.setEnabled(false);

        fiche_input.setEnabled(false);

        clearence_form_input.setEnabled(false);

        commission_input.setEnabled(false);

        historique_input.setEnabled(false);

        bordereau_input.setEnabled(false);

        missing_carnet_input.setEnabled(false);

        carnet_input.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(jLabel7)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel11)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6)
                    .addComponent(initial_deposit_label)
                    .addComponent(jLabel14)
                    .addComponent(jLabel10)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel9)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel8)
                                    .addGap(14, 14, 14)))
                            .addComponent(jLabel12))
                        .addGap(254, 254, 254)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(credited_amount, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(transaction_description, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                                .addComponent(current_balance, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(initial_deposit, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(233, 233, 233)
                                .addComponent(search_account_number))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(transaction_code, javax.swing.GroupLayout.Alignment.LEADING, 0, 1, Short.MAX_VALUE)
                                .addComponent(transaction_type, javax.swing.GroupLayout.Alignment.LEADING, 0, 160, Short.MAX_VALUE)
                                .addComponent(customer_id_number, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(customer_name, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(account_number, javax.swing.GroupLayout.Alignment.LEADING))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addComponent(epargne_obligatoire_checkbox)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                                                .addComponent(epargne_obligatoire, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(teller)
                                            .addComponent(total_deposit_charges)
                                            .addComponent(new_balance)
                                            .addComponent(transaction_date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tenue_de_compte)
                                            .addComponent(fiche)
                                            .addComponent(clearence_form)
                                            .addComponent(salary_commission))
                                        .addGap(92, 92, 92)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(commission_input)
                                        .addComponent(clearence_form_input)
                                        .addComponent(fiche_input)
                                        .addComponent(tenue_de_compte_input, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(calculate_button, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(historique)
                                    .addComponent(bordereau)
                                    .addComponent(missing_carnet)
                                    .addComponent(carnet))
                                .addGap(57, 57, 57)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(missing_carnet_input)
                                    .addComponent(bordereau_input)
                                    .addComponent(historique_input)
                                    .addComponent(carnet_input, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(57, 57, 57)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(account_number, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search_account_number))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(customer_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(customer_id_number, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(transaction_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(transaction_code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(transaction_description, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(current_balance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(credited_amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(initial_deposit_label)
                    .addComponent(initial_deposit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(tenue_de_compte))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fiche)
                        .addGap(9, 9, 9)
                        .addComponent(clearence_form)
                        .addGap(9, 9, 9)
                        .addComponent(salary_commission))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(historique)
                            .addComponent(historique_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bordereau)
                            .addComponent(bordereau_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(missing_carnet)
                            .addComponent(missing_carnet_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(carnet)
                            .addComponent(carnet_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(tenue_de_compte_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fiche_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearence_form_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(commission_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(epargne_obligatoire_checkbox)
                    .addComponent(epargne_obligatoire, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(total_deposit_charges, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(new_balance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(calculate_button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(transaction_date, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(teller, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        deposit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/deposit_new.png"))); // NOI18N
        deposit.setText("DEPOSIT");
        deposit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/cancel-icon.png"))); // NOI18N
        jButton1.setText("CANCEL");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deposit, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deposit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(5, 5, 5))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void getCountTransactionCredit() {
        try {
            String sql = "SELECT COUNT(*) AS counts FROM (SELECT transactions.transaction_id FROM transactions WHERE transaction_type = 'Deposit') x";
            pst = conn.connection.prepareStatement(sql);
            rs = pst.executeQuery();
            if (rs.next()) {
                transactionCountCredit = rs.getInt("counts") + 1;
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void getCountTransactionDebit() {
        try {
            String sql = "SELECT Trans_Count_DR FROM financial_transaction WHERE transaction_type = 'Withdraw' ORDER BY id DESC LIMIT 1 ";
            pst = conn.connection.prepareStatement(sql);
            rs = pst.executeQuery();
            if (rs.next()) {
                transactionCountDebit = rs.getInt("Trans_Count_DR");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private boolean doesAccountExist(String acc) throws SQLException {
        boolean accountExists = false;
        // TODO Auto-generated method stub
        if (!acc.isEmpty()) {
            String sql = "SELECT `Account_Number` FROM `customer_information` WHERE Account_Number = ?";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, acc);
            rs = pst.executeQuery();
            if (rs.next()) {
                accountExists = true;
            }
        }
        return accountExists;
    }

    private void doesEpargneObligatoireExist(String accountNumber) {

        //getEpargneObligatoire(accountNumber);
        //boolean status = false;
        if (!accountNumber.isEmpty()) {
            try {
                String sql = "SELECT Account_Number, Amount from epargne_obligatoire where Account_Number = ?";
                pst = conn.connection.prepareStatement(sql);
                pst.setString(1, accountNumber);
                rs = pst.executeQuery();
                if (rs.next()) {
                    doesCustomerHasEpargneObligatoire = true;
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
        //return status;
    }

    private void updateEpargneObligatoire(String accountNumber, float epargneAmount) {

        float currentEpargne = getEpargneObligatoire(accountNumber);
        float newEpargne = currentEpargne + epargneAmount;

        try {
            String sql = "update epargne_obligatoire set Amount	='" + newEpargne + "' where Account_Number='" + accountNumber + "'";
            pst = conn.connection.prepareStatement(sql);
            pst.execute();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private String getChargeAmount(String chargename) {
        String amount = "";
        String sql = "Select amount from charges WHERE charge_name='" + chargename + "'";
        try {
            pst = conn.connection.prepareStatement(sql);
            rs = pst.executeQuery();
            if (rs.next()) {
                amount = rs.getString("amount");
                //total_deposit_charges.setText(amount);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {
            try {
                rs.close();
                pst.close();
            } catch (SQLException e) {

            }
        }
        return amount;
    }

    private void getInitialDeposit(String accountNumber) {
        try {
            String sql = "SELECT Initial_Deposit_Amount, Remaining_Amount from initial_deposit where Account_Number = ?";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, accountNumber);
            rs = pst.executeQuery();
            if (rs.next()) {
                initialDepositAmount = rs.getFloat("Initial_Deposit_Amount");
                remainingAmount = rs.getFloat("Remaining_Amount");
            }
            //System.out.println(initialDepositAmount);
            if (initialDepositAmount == 10000) {
                initial_deposit_label.setEnabled(false);
                initial_deposit.setEnabled(false);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private float getEpargneObligatoire(String accountNumber) {
        try {
            String sql = "SELECT Amount  from epargne_obligatoire where Account_Number = ?";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, accountNumber);
            rs = pst.executeQuery();
            if (rs.next()) {
                epargneObligatoire = rs.getFloat("Amount");
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
        return epargneObligatoire;
    }

    private void searchAccount(String accountNumber) {

        getInitialDeposit(accountNumber);
        try {
            String sql = "SELECT Account_Number, Customer_ID, Customer_Name, National_ID_Number from customer_information where Account_Number = ?";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, accountNumber);
            rs = pst.executeQuery();
            if (rs.next()) {
                customerId = rs.getString("Customer_ID");
                customer_name.setText(rs.getString("Customer_Name"));
                customer_id_number.setText(rs.getString("National_ID_Number"));
                current_balance.setText(String.valueOf(getCurrrentBalance(rs.getString("Account_Number"))));
                c_balance=getCurrrentBalance(rs.getString("Account_Number"));
            } else {
                JOptionPane.showMessageDialog(null, "Sorry this account does not exist!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private float getCurrrentBalance(String accountNumber) {
        String sql = "SELECT * FROM balance WHERE Account_Number = ?";
        float balance = 0;
        try {
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, accountNumber);
            rs = pst.executeQuery();
            if (rs.next()) {
                balance = rs.getFloat("current_balance");
            }
        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return balance;
    }

    private boolean recordDeposit(float transactionAmount, float transactionCharges, float transaction_net_amount, float previousBalance,
            float currentBalance, String transactionDate, String transactionType, String transactionDescription,
            String accountNumber, String employeeKey) throws SQLException, ParseException {

        boolean message;
        String sql = "insert into transactions(transaction_amount,"
                + "transaction_charge,"
                + "transaction_net_amount,"
                + "previous_balance,"
                + "current_balance,"
                + "transaction_date,"
                + "transaction_type,"
                + "transaction_description,"
                + "Account_Number,"
                + "employee_key) values (?,?,?,?,?,?,?,?,?,?)";
        pst = conn.connection.prepareStatement(sql);
        pst.setFloat(1, transactionAmount);
        pst.setFloat(2, transactionCharges);
        pst.setFloat(3, transaction_net_amount);
        pst.setFloat(4, previousBalance);
        pst.setFloat(5, currentBalance);
        pst.setString(6, transactionDate);
        pst.setString(7, transactionType);
        pst.setString(8, transactionDescription);
        pst.setString(9, accountNumber);
        pst.setString(10, employeeKey);
        int saved = pst.executeUpdate();

        if (saved > 0) {
            searchAccount(accountNumber);
            this.credited_amount.setText("");
            return message = true;
        }
        return message = false;

    }

    private void updateTransactionDate(String accountNumber, String transactionDate) {
        try {
            String sql = "update account_information set `Date_Last_Modified` = NOW(), Last_Transaction_Date ='" + transactionDate + "' where Customer_ID='" + customerId + "'";
            pst = conn.connection.prepareStatement(sql);
            pst.execute();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private boolean validateDeposit() {
        boolean message;
        if (current_balance.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The current balance field is required", "Error", JOptionPane.ERROR_MESSAGE);
            message = false;
        } else if (credited_amount.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The credit amount field is required", "Error", JOptionPane.ERROR_MESSAGE);
            message = false;

        } else {
            message = true;
        }
        return message;
    }

    private void createEpargneObligatoire(String accountNumber, float epargneAmount) {
        try {
            String sql = "INSERT into epargne_obligatoire (Account_Number,Amount) values(?,?)";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, accountNumber);
            pst.setFloat(2, epargneAmount);
            pst.execute();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private void calculate_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculate_buttonActionPerformed
        // TODO add your handling code here:
        if (validateDeposit()) {
            try {
                float allCharges = 0;
                float newBalance = 0;
                float oldBalance = Float.parseFloat(current_balance.getText());
                float creditedAmount = Float.parseFloat(credited_amount.getText());

                if (tenue_de_compte.isSelected() && !tenue_de_compte_input.getText().isEmpty()) {
                    allCharges += Float.parseFloat(tenue_de_compte_input.getText());
                }
                if (historique.isSelected() && !historique_input.getText().isEmpty()) {
                    allCharges += Float.parseFloat(historique_input.getText());
                }
                if (carnet.isSelected() && !carnet_input.getText().isEmpty()) {
                    allCharges += Float.parseFloat(carnet_input.getText());
                }
                if (fiche.isSelected() && !fiche_input.getText().isEmpty()) {
                    allCharges += Float.parseFloat(fiche_input.getText());
                }
                if (bordereau.isSelected() && !bordereau_input.getText().isEmpty()) {
                    allCharges += Float.parseFloat(bordereau_input.getText());
                }
                if (salary_commission.isSelected() && !commission_input.getText().isEmpty()) {
                    allCharges += Float.parseFloat(commission_input.getText());
                }
                if (clearence_form.isSelected() && !clearence_form_input.getText().isEmpty()) {
                    allCharges += Float.parseFloat(clearence_form_input.getText());
                }
                if (missing_carnet.isSelected() && !missing_carnet_input.getText().isEmpty()) {
                    allCharges += Float.parseFloat(missing_carnet_input.getText());
                }
                if (epargne_obligatoire_checkbox.isSelected()) {
                    epargneObligatoire = Float.parseFloat(epargne_obligatoire.getText());
                    allCharges += epargneObligatoire;
                } else {
                    allCharges += 0;
                }
                if (initial_deposit.isEnabled()) {
                    if (initial_deposit.getText().isEmpty()) {
                        JOptionPane.showMessageDialog(null, "The initial deposit field is required!", "Error", JOptionPane.ERROR_MESSAGE);
                    } else {

                        float initialDeposit = Float.parseFloat(initial_deposit.getText());

                        
                        allCharges += initialDeposit;
                        if (oldBalance + creditedAmount < allCharges) {
                            JOptionPane.showMessageDialog(null, "Insufficient funds!", "Error", JOptionPane.ERROR_MESSAGE);
                        } else {
                            total_deposit_charges.setText(String.valueOf(allCharges));
                            newBalance = oldBalance + creditedAmount - allCharges;
                            new_balance.setText(String.valueOf(newBalance));
                        }
                    }
                } else {
                    if (oldBalance + creditedAmount < allCharges) {
                        JOptionPane.showMessageDialog(null, "Insufficient funds!", "Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        total_deposit_charges.setText(String.valueOf(allCharges));
                        newBalance = oldBalance + creditedAmount - allCharges;
                       
                        new_balance.setText(String.valueOf(newBalance));
                    }
                }
                System.out.println(allCharges);
            } catch (HeadlessException | NumberFormatException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_calculate_buttonActionPerformed

    private void search_account_numberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_account_numberActionPerformed
        // TODO add your handling code here:
        if (account_number.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Enter account number", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            searchAccount(account_number.getText());

        }
    }//GEN-LAST:event_search_account_numberActionPerformed

    public static Calendar toCalendar(java.util.Date date) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        return cal;
    }

    public int getMonthYear(Calendar date) {
        int month = date.get(Calendar.MONTH) + 1;
        int year = date.get(Calendar.YEAR);

        int yearMonth = Integer.parseInt(year + "" + month);
        return yearMonth;
    }

    private String getTransactionCode(String transaction) {

        switch (transaction) {
            case "Credit - Clearing ACH":
                return "TC00005";
            case "Credit - Clearing RTGS":
                return "TC00006";
            case "Direct Debit":
                return "TC00007";
            case "Standing Orders":
                return "TC00008";
            case "Withdrawal Slips":
                return "TC00009";
            case "Deposite Slips":
                return "TC00010";
            case "Payment Order - Local":
                return "TC00056";
            default:
                return "";
        }
    }

    private void updateFinancialCashLimitTransactionsTable(String country, String leBook,
            String transactionDate, String customerId, String accountNumber,
            String processOuc, String transactionReference, String transactionNarration,
            String currency, float transactionAmount) {

        try {
            String sql = "INSERT INTO `financial_cash_limit_transaction`(`Country`,"
                    + " `LE_Book`,"
                    + " `Business_Date`,"
                    + " `Customer_ID`,"
                    + " `Account_Number`,"
                    + " `Process_OUC`,"
                    + " `Transaction_Reference`, "
                    + "`Transaction_Narration`, "
                    + "`Currency`, "
                    + "`Trans_Amount_FCY`,"
                    + " `Trans_Amount_LCY`) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, country);
            pst.setString(2, leBook);
            pst.setString(3, transactionDate);
            pst.setString(4, customerId);
            pst.setString(5, accountNumber);
            pst.setString(6, processOuc);
            pst.setString(7, transactionReference);
            pst.setString(8, transactionNarration);
            pst.setString(9, currency);
            pst.setFloat(10, transactionAmount);
            pst.setFloat(11, transactionAmount);
            pst.execute();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void updateFinancialTransactionsTable(String country, String leBook, int yearMonth,
            String accountNumber, String processOuc, String cardNumber, String merchantId,
            String transactionChannel, String transactionCode, String currency,
            int transactionCountDebit, int transactionCountCredit, float transactionAmountDebit,
            float transactionAmountCredit, String transactionDate, String transactionType) {

        try {
            String sql = "INSERT INTO `financial_transaction`(`Country`, "
                    + "`LE_Book`, "
                    + "`Year_Month`, "
                    + "`Account_Number`, "
                    + "`Process_Ouc`, "
                    + "`Card_No`, "
                    + "`Merchant_Id`, "
                    + "`Transaction_Channel`, "
                    + "`Transaction_Code`, "
                    + "`Currency`, "
                    + "`Trans_Count_DR`, "
                    + "`Trans_Count_CR`, "
                    + "`Trans_Amount_DR_FCY`, "
                    + "`Trans_Amount_CR_FCY`, "
                    + "`Trans_Amount_DR_LCY`, "
                    + "`Trans_Amount_CR_LCY`, "
                    + "`transaction_type`, "
                    + "`transaction_date`) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, country);
            pst.setString(2, leBook);
            pst.setInt(3, yearMonth);
            pst.setString(4, accountNumber);
            pst.setString(5, processOuc);
            pst.setString(6, cardNumber);
            pst.setString(7, merchantId);
            pst.setString(8, transactionChannel);
            pst.setString(9, transactionCode);
            pst.setString(10, currency);
            pst.setInt(11, transactionCountDebit);
            pst.setInt(12, transactionCountCredit);
            pst.setFloat(13, transactionAmountDebit);
            pst.setFloat(14, transactionAmountCredit);
            pst.setFloat(15, transactionAmountDebit);
            pst.setFloat(16, transactionAmountCredit);
            pst.setString(17, transactionType);
            pst.setString(18, transactionDate);
            pst.execute();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void updateProductsTable(String chargeDescription, float transactionCharge, String transactionDate, String accountNumber) {
        try {
            String sql = "insert into product (description,amount,product_date,Account_Number) values(?,?,?,?)";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, chargeDescription);
            pst.setFloat(2, transactionCharge);
            pst.setString(3, transactionDate);
            pst.setString(4, accountNumber);
            pst.execute();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private ArrayList<String> getArrayListOfSelectedCharges() {

        ArrayList<String> selectedCharges = new ArrayList<>();

        if (tenue_de_compte.isSelected() && !tenue_de_compte_input.getText().isEmpty()) {
            selectedCharges.add(tenue_de_compte.getText());
        }
        if (historique.isSelected() && !historique_input.getText().isEmpty()) {
            selectedCharges.add(historique.getText());
        }
        if (carnet.isSelected() && !carnet_input.getText().isEmpty()) {
            selectedCharges.add(carnet.getText());
        }
        if (fiche.isSelected() && !fiche_input.getText().isEmpty()) {
            selectedCharges.add(fiche.getText());
        }
        if (bordereau.isSelected() && !bordereau_input.getText().isEmpty()) {
            selectedCharges.add(bordereau.getText());
        }
        if (salary_commission.isSelected() && !commission_input.getText().isEmpty()) {
            selectedCharges.add(salary_commission.getText());
        }
        if (clearence_form.isSelected() && !clearence_form_input.getText().isEmpty()) {
            selectedCharges.add(clearence_form.getText());
        }
        if (missing_carnet.isSelected() && !missing_carnet_input.getText().isEmpty()) {
            selectedCharges.add(missing_carnet.getText());
        }

        return selectedCharges;
    }
    
    private ArrayList<Float> getArrayListOfSelectedAmountCharges() {

        ArrayList<Float> selectedAmountCharges = new ArrayList<>();

        if (tenue_de_compte.isSelected() && !tenue_de_compte_input.getText().isEmpty()) {
            selectedAmountCharges.add(Float.parseFloat(tenue_de_compte_input.getText()));
        }
        if (historique.isSelected() && !historique_input.getText().isEmpty()) {
            selectedAmountCharges.add(Float.parseFloat(historique_input.getText()));
        }
        if (carnet.isSelected() && !carnet_input.getText().isEmpty()) {
            selectedAmountCharges.add(Float.parseFloat(carnet_input.getText()));
        }
        if (fiche.isSelected() && !fiche_input.getText().isEmpty()) {
            selectedAmountCharges.add(Float.parseFloat(fiche_input.getText()));
        }
        if (bordereau.isSelected() && !bordereau_input.getText().isEmpty()) {
            selectedAmountCharges.add(Float.parseFloat(bordereau_input.getText()));
        }
        if (salary_commission.isSelected() && !commission_input.getText().isEmpty()) {
            selectedAmountCharges.add(Float.parseFloat(commission_input.getText()));
        }
        if (clearence_form.isSelected() && !clearence_form_input.getText().isEmpty()) {
            selectedAmountCharges.add(Float.parseFloat(clearence_form_input.getText()));
        }
        if (missing_carnet.isSelected() && !missing_carnet_input.getText().isEmpty()) {
            selectedAmountCharges.add(Float.parseFloat(missing_carnet_input.getText()));
        }

        return selectedAmountCharges;
    }

    private void updateInitialDeposit(String accountNumber, String transactionDate) {

        float newInitialDepositAmount = initialDepositAmount + Float.parseFloat(initial_deposit.getText());
        float remainingDepositAmount = 10000 - newInitialDepositAmount;
        try {
            String sql = "UPDATE `initial_deposit` SET `Initial_Deposit_Amount` = ?, `Remaining_Amount`= ?,`Initial_Deposit_Date`=?, `Teller`=? WHERE Account_Number = ?";
            pst = conn.connection.prepareStatement(sql);
            pst.setFloat(1, newInitialDepositAmount);
            pst.setFloat(2, remainingDepositAmount);
            pst.setString(3, transactionDate);
            pst.setString(4, employee_name);
            pst.setString(5, accountNumber);
            pst.execute();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }
    
    private int getTransaction_ref(String accountNumber) {
        String sql = "SELECT `transaction_id` FROM `transactions` WHERE transactions.Account_Number =?  ORDER BY transaction_id desc  LIMIT 1";
        int transaction_id = 0;
        try {
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, accountNumber);
            rs = pst.executeQuery();
            if (rs.next()) {
                transaction_id = rs.getInt("transaction_id");
            }
        } catch (SQLException ex) {
            // TODO Auto-generated catch block
            JOptionPane.showMessageDialog(null, ex);
        }
        return transaction_id;
    }
    
    private String getTransaction_date(String accountNumber) {
        String sql = "SELECT `date_created` FROM `transactions` WHERE transactions.Account_Number =?  ORDER BY transaction_id desc  LIMIT 1";
        String transaction_date = "";
        try {
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, accountNumber);
            rs = pst.executeQuery();
            if (rs.next()) {
                transaction_date = rs.getString("date_created");
            }
        } catch (SQLException ex) {
            // TODO Auto-generated catch block
            JOptionPane.showMessageDialog(null, ex);
        }
        return transaction_date;
    }

    private void save_deposit(String accountNumber, String customerName, float previousBalance, float currentBalance,
            float transactionAmount, float transactionCharges, float transaction_net_amount, String transactionDate, String transactionType,
            String transactionDescription, String teller, String transactionReference, String transactionNarration,
            float transactionAmountCredit, String transactionCode, int transactionCountDebit, float transactionAmountDebit,
            int yearMonth, String chargeDescription) throws SQLException {
        try {
            if (doesAccountExist(accountNumber)) {
                String sql = "UPDATE `balance` SET `current_balance` = ?, date_changed  = ? WHERE Account_Number = ?";
                pst = conn.connection.prepareStatement(sql);
                pst.setFloat(1, currentBalance);
                pst.setString(2, transactionDate);
                pst.setString(3, accountNumber);

                int updated = pst.executeUpdate();
                if (updated > 0) {

                    try {

                        if (recordDeposit(transactionAmount, transactionCharges, transaction_net_amount, previousBalance, currentBalance,
                                transactionDate, transactionType,
                                transactionDescription, accountNumber, n_employee_key)) {
                            JOptionPane.showMessageDialog(null, "Deposit successfull!");
                            if (transactionAmount > 1000000) {
                                updateFinancialCashLimitTransactionsTable(country, leBook, transactionDate,
                                        customerId, accountNumber, processOuc, transactionReference, transactionNarration,
                                        currency, transactionAmount);
                            } else {
                                updateFinancialTransactionsTable(country, leBook, yearMonth, accountNumber, processOuc,
                                        cardNumber, merchantId, transactionChannel, transactionCode, currency,
                                        transactionCountDebit, transactionCountCredit, transactionAmountDebit,
                                        transactionAmountCredit, transactionDate, transactionType);
                            }

                            for (int i = 0; i < listOfSelectedCharges.size(); i++) {
                                float selectedTransactionCharge = listOfSelectedAmountCharges.get(i);
                                chargeDescription = listOfSelectedCharges.get(i);
                                
                                updateProductsTable(chargeDescription, selectedTransactionCharge, transactionDate, accountNumber);
                            }
                            updateTransactionDate(accountNumber, transactionDate);
                            
                            int transaction_reference =getTransaction_ref(accountNumber);
                            String transaction_d = getTransaction_date(accountNumber);
                            
                            new DepositReceipt(accountNumber, customerName, previousBalance, transactionAmount, transactionCharges,
                                    currentBalance, transaction_d, employee_name,transaction_reference).setVisible(true);

                        }

                    } catch (ParseException ex) {
                        Logger.getLogger(Deposit.class
                                .getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "This account number (" + accountNumber + ") does not exist!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    private void depositActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositActionPerformed
        // TODO add your handling code here:
        if (account_number.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The account number field is required", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (transaction_code.getSelectedItem().toString().equalsIgnoreCase("Select One")) {
            JOptionPane.showMessageDialog(null, "The transaction code field required", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (new_balance.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The new balance field is required", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (transaction_date.getDate() == null) {
            JOptionPane.showMessageDialog(null, "The transaction date is required!", "Error", JOptionPane.ERROR_MESSAGE);
        } 
        else if (tenue_de_compte.isSelected() && tenue_de_compte_input.getText().isEmpty()) {
           JOptionPane.showMessageDialog(null, "Tenue de compte is required or uncheck it!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else if (historique.isSelected() && historique_input.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Historique is required or uncheck it!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else if (carnet.isSelected() && carnet_input.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Carnet is required or uncheck it!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else if (fiche.isSelected() && fiche_input.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Fiche is required or uncheck it!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else if (bordereau.isSelected() && bordereau_input.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Bordereau is required or uncheck it!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else if (salary_commission.isSelected() && commission_input.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Commission is required or uncheck it!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else if (clearence_form.isSelected() && clearence_form_input.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Clearence form is required or uncheck it!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else if (missing_carnet.isSelected() && missing_carnet_input.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Missing Carnet is required or uncheck it!", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else {

            String accountNumber = account_number.getText();
            String customerName = customer_name.getText();
            float previousBalance = Float.parseFloat(current_balance.getText());
            float transactionAmount = Float.parseFloat(credited_amount.getText());
            float transactionCharges = Float.parseFloat(total_deposit_charges.getText());
            float currentBalance = Float.parseFloat(new_balance.getText());

            java.util.Date tdate = transaction_date.getDate();
            java.sql.Date transactionDate = new java.sql.Date(tdate.getTime());
            Calendar date = toCalendar(tdate);

            int yearMonth = getMonthYear(date);
            float transactionAmountCredit = transactionAmount;
            String transactionType = (String) transaction_type.getSelectedItem();
            String transactionDescription = transaction_description.getText();
            String transactionReference = "012";
            String transactionNarration = transactionDescription;
            transaction_net_amount = transactionAmount - transactionCharges;

            String transactionCode = getTransactionCode((String) transaction_code.getSelectedItem());
            float transactionAmountDebit = 0;
            String chargeDescription = "";
            listOfSelectedCharges = getArrayListOfSelectedCharges();
            listOfSelectedAmountCharges = getArrayListOfSelectedAmountCharges();

            try {
                save_deposit(accountNumber, customerName, previousBalance, currentBalance, transactionAmount, transactionCharges,
                        transaction_net_amount, transactionDate.toString(), transactionType, transactionDescription, teller.getText(),
                        transactionReference, transactionNarration, transactionAmountCredit, transactionCode, transactionCountDebit,
                        transactionAmountDebit, yearMonth, chargeDescription);
                if (initial_deposit.isEnabled()) {
                    updateInitialDeposit(accountNumber, transactionDate.toString());
                }
                if (epargne_obligatoire_checkbox.isSelected()) {
                    doesEpargneObligatoireExist(account_number.getText());
                    if (doesCustomerHasEpargneObligatoire == false) {
                        createEpargneObligatoire(account_number.getText(), epargneObligatoire);
                    } else {
                        updateEpargneObligatoire(account_number.getText(), epargneObligatoire);
                    }
                }

            } catch (SQLException ex) {
                Logger.getLogger(Deposit.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_depositActionPerformed

    private void new_balanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_new_balanceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_new_balanceActionPerformed

    private void epargne_obligatoire_checkboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_epargne_obligatoire_checkboxActionPerformed
        // TODO add your handling code here:
        if (epargne_obligatoire_checkbox.isSelected()) {
            epargne_obligatoire.setEnabled(true);
            if (!epargne_obligatoire.getText().isEmpty()) {
                epargneObligatoire = Float.parseFloat(epargne_obligatoire.getText());
            }
        } else {
            epargne_obligatoire.setEnabled(false);
        }

    }//GEN-LAST:event_epargne_obligatoire_checkboxActionPerformed

    private void epargne_obligatoireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_epargne_obligatoireActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_epargne_obligatoireActionPerformed

    private void transaction_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transaction_typeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_transaction_typeActionPerformed

    private void transaction_typeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_transaction_typeItemStateChanged
        // TODO add your handling code here:
        if(transaction_type.getSelectedItem().toString().equalsIgnoreCase("Closing Balance")){
            current_balance.setText("0.0");
            current_balance.setEditable(true);
        }else{
            current_balance.setEditable(false);
            current_balance.setText(c_balance+"");
        }
    }//GEN-LAST:event_transaction_typeItemStateChanged

    private void tenue_de_compteStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tenue_de_compteStateChanged
        // TODO add your handling code here:
      
        if (tenue_de_compte.isSelected()) {
            tenue_de_compte_input.setEnabled(true);
        }else{
            tenue_de_compte_input.setEnabled(false);
            tenue_de_compte_input.setText("");
        }
    }//GEN-LAST:event_tenue_de_compteStateChanged

    private void ficheStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ficheStateChanged
        // TODO add your handling code here:
      
        if (fiche.isSelected()) {
            fiche_input.setEnabled(true);
        }else{
            fiche_input.setEnabled(false);
            fiche_input.setText("");
        }
    }//GEN-LAST:event_ficheStateChanged

    private void clearence_formStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_clearence_formStateChanged
        // TODO add your handling code here:
        if (clearence_form.isSelected()) {
            clearence_form_input.setEnabled(true);
        }else{
            clearence_form_input.setEnabled(false);
            clearence_form_input.setText("");
        }
    }//GEN-LAST:event_clearence_formStateChanged

    private void salary_commissionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_salary_commissionStateChanged
        // TODO add your handling code here:
        if (salary_commission.isSelected()) {
            commission_input.setEnabled(true);
        }else{
            commission_input.setEnabled(false);
            commission_input.setText("");
        }
    }//GEN-LAST:event_salary_commissionStateChanged

    private void historiqueStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_historiqueStateChanged
        // TODO add your handling code here:
        if (historique.isSelected()) {
            historique_input.setEnabled(true);
        }else{
            historique_input.setEnabled(false);
            historique_input.setText("");
        }
    }//GEN-LAST:event_historiqueStateChanged

    private void bordereauStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_bordereauStateChanged
        // TODO add your handling code here:
        if (bordereau.isSelected()) {
            bordereau_input.setEnabled(true);
        }else{
            bordereau_input.setEnabled(false);
            bordereau_input.setText("");
        }
    }//GEN-LAST:event_bordereauStateChanged

    private void missing_carnetStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_missing_carnetStateChanged
        // TODO add your handling code here:
        if (missing_carnet.isSelected()) {
            missing_carnet_input.setEnabled(true);
        }else{
            missing_carnet_input.setEnabled(false);
            missing_carnet_input.setText("");
        }
    }//GEN-LAST:event_missing_carnetStateChanged

    private void carnetStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_carnetStateChanged
        // TODO add your handling code here:
        if (carnet.isSelected()) {
            carnet_input.setEnabled(true);
        }else{
            carnet_input.setEnabled(false);
            carnet_input.setText("");
        }
    }//GEN-LAST:event_carnetStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Deposit.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Deposit.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Deposit.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Deposit.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Deposit().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField account_number;
    private javax.swing.JCheckBox bordereau;
    private javax.swing.JTextField bordereau_input;
    private javax.swing.JButton calculate_button;
    private javax.swing.JCheckBox carnet;
    private javax.swing.JTextField carnet_input;
    private javax.swing.JCheckBox clearence_form;
    private javax.swing.JTextField clearence_form_input;
    private javax.swing.JTextField commission_input;
    private javax.swing.JTextField credited_amount;
    private javax.swing.JTextField current_balance;
    private javax.swing.JTextField customer_id_number;
    private javax.swing.JTextField customer_name;
    private javax.swing.JButton deposit;
    private javax.swing.JTextField epargne_obligatoire;
    private javax.swing.JCheckBox epargne_obligatoire_checkbox;
    private javax.swing.JCheckBox fiche;
    private javax.swing.JTextField fiche_input;
    private javax.swing.JCheckBox historique;
    private javax.swing.JTextField historique_input;
    private javax.swing.JTextField initial_deposit;
    private javax.swing.JLabel initial_deposit_label;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JCheckBox missing_carnet;
    private javax.swing.JTextField missing_carnet_input;
    private javax.swing.JTextField new_balance;
    private javax.swing.JCheckBox salary_commission;
    private javax.swing.JButton search_account_number;
    private javax.swing.JTextField teller;
    private javax.swing.JCheckBox tenue_de_compte;
    private javax.swing.JTextField tenue_de_compte_input;
    private javax.swing.JTextField total_deposit_charges;
    private javax.swing.JComboBox<String> transaction_code;
    private com.toedter.calendar.JDateChooser transaction_date;
    private javax.swing.JTextField transaction_description;
    private javax.swing.JComboBox<String> transaction_type;
    // End of variables declaration//GEN-END:variables
}