/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bank;

import java.awt.Desktop;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author chris
 */
public class Transaction extends javax.swing.JFrame {

    /**
     * Creates new form Transaction
     */
    String acc_no;
    PreparedStatement pst = null;
    ResultSet rs = null;
    DBConnection conn;
    DefaultTableModel model = new DefaultTableModel();
    DecimalFormat formatter = new DecimalFormat("#,###.00");

    public Transaction(String accountNumber) {
        initComponents();
        try {
            conn = new DBConnection();
        } catch (BackingStoreException ex) {
            Logger.getLogger(Transaction.class.getName()).log(Level.SEVERE, null, ex);
        }
        acc_no = accountNumber;
        account_number.setText(accountNumber);
        populateTransactions(accountNumber);

    }

    private Transaction() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        list_of_transactions = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        to_label = new javax.swing.JLabel();
        go = new javax.swing.JButton();
        transaction_type = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        transaction_date = new com.toedter.calendar.JDateChooser();
        account_number = new javax.swing.JTextField();
        date_choice = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        date_range_label = new javax.swing.JLabel();
        date_label = new javax.swing.JLabel();
        from_transaction_date = new com.toedter.calendar.JDateChooser();
        to_transaction_date = new com.toedter.calendar.JDateChooser();
        jToolBar1 = new javax.swing.JToolBar();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jLabel4 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        total_withdraw = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        total_deposit = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        total_w_d = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        list_of_transactions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Account Number", "Gross Amount", "Charges", "Net Amount", "Previous Balance", "Current Balance", "Transaction Type", "Description", "Transaction Date", "Teller"
            }
        ));
        jScrollPane1.setViewportView(list_of_transactions);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Transaction Filter"));

        to_label.setText("To");
        to_label.setEnabled(false);

        go.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/Button-Next-icon.png"))); // NOI18N
        go.setText("GO");
        go.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goActionPerformed(evt);
            }
        });

        transaction_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Deposit", "Withdraw" }));

        jLabel2.setText("Date Choice:");

        transaction_date.setEnabled(false);

        account_number.setEditable(false);

        date_choice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select One", "Specific Date", "Date Range" }));
        date_choice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                date_choiceActionPerformed(evt);
            }
        });

        jLabel1.setText("Account Number:");

        jLabel6.setText("Transaction Type:");

        date_range_label.setText("Date Range:");

        date_label.setText("Date:");

        from_transaction_date.setEnabled(false);

        to_transaction_date.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(date_label)
                            .addComponent(date_range_label))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(transaction_date, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(date_choice, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(account_number, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(from_transaction_date, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(to_label)
                                .addGap(16, 16, 16)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(go, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(to_transaction_date, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(transaction_type, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(120, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(account_number, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(date_choice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(date_label, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(transaction_date, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(date_range_label, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(to_transaction_date, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(to_label, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(from_transaction_date, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(transaction_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(go))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jToolBar1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jToolBar1.setRollover(true);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/print-icon.png"))); // NOI18N
        jLabel3.setText("EXPORT");
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });
        jToolBar1.add(jLabel3);
        jToolBar1.add(jSeparator1);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/wizard-icon.png"))); // NOI18N
        jLabel4.setText("DEPOSIT");
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });
        jToolBar1.add(jLabel4);
        jToolBar1.add(jSeparator2);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/web-icon.png"))); // NOI18N
        jLabel5.setText("WITHDRAW");
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });
        jToolBar1.add(jLabel5);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "TOTAL"));

        jLabel7.setText("Total Withdraw:");

        total_withdraw.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        total_withdraw.setText("00000.00");

        jLabel9.setText("Total Deposit:");

        total_deposit.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        total_deposit.setText("00000.00");

        jLabel11.setText("Total:");

        total_w_d.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        total_w_d.setText("00000.00");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel9)
                    .addComponent(jLabel11))
                .addGap(129, 129, 129)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(total_w_d)
                    .addComponent(total_deposit)
                    .addComponent(total_withdraw))
                .addContainerGap(184, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(total_withdraw))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(total_deposit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(total_w_d))
                .addGap(36, 36, 36))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private String formatFloat(String s) {
        double stringToDouble = Float.parseFloat(s);
        return String.valueOf(formatter.format(stringToDouble)).equals(".00") ? "0.0" : String.valueOf(formatter.format(stringToDouble));
    }

    //retrive all transaction
    private void populateTransactions(String acc) {
        String sql = "SELECT  `transaction_amount`, `transaction_charge`,`transaction_net_amount`, `previous_balance`, `current_balance`, `transaction_date`, `transaction_type`, `transaction_description`, `Account_Number`, e.firstname, e.lastname FROM `transactions`  INNER JOIN employees e on e.employee_key = transactions.employee_key WHERE Account_Number = ? ORDER BY transaction_date DESC";
        try {
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, acc);
            rs = pst.executeQuery();
            //int count = 0;
            list_of_transactions.setModel(model);
            model.addColumn("Account Number");
            model.addColumn("Gross Amount");
            model.addColumn("Charges");
            model.addColumn("Net Amount");
            model.addColumn("Previous Balance");
            model.addColumn("Current Balance");
            model.addColumn("Transaction Type");
            model.addColumn("Description");
            model.addColumn("Transaction Date");
            model.addColumn("Teller");
            int i = 0;
            double totalWithdraw = 0.0;
            double totalDeposit = 0.0;
            double totalCharges = 0.0;
            while (rs.next()) {
                if (rs.getString("transaction_type").equalsIgnoreCase("Withdraw")) {
                    totalWithdraw += Double.parseDouble(rs.getString("transaction_amount"));
                }
                if (rs.getString("transaction_type").equalsIgnoreCase("Deposit")) {
                    totalDeposit += Double.parseDouble(rs.getString("transaction_amount"));
                }
                
                totalCharges += Double.parseDouble(rs.getString("transaction_charge"));

                model.addRow(new Object[]{rs.getString("Account_Number"), formatFloat(rs.getString("transaction_amount")),
                    formatFloat(rs.getString("transaction_charge")), formatFloat(rs.getString("transaction_net_amount")),
                    formatFloat(rs.getString("previous_balance")),
                    formatFloat(rs.getString("current_balance")), rs.getString("transaction_type"),
                    rs.getString("transaction_description"), rs.getString("transaction_date"),
                    rs.getString("firstname") + " " + rs.getString("lastname")
                });
                i++;
            }
            total_deposit.setText(formatFloat(totalDeposit+""));
            total_withdraw.setText(formatFloat((totalWithdraw +totalCharges)+""));
            total_w_d.setText(formatFloat((totalDeposit - (totalWithdraw +totalCharges))+""));
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void filterData(String accountNumber, String transactionType) throws ParseException {

        if (transaction_date.getDate() == null) {
            JOptionPane.showMessageDialog(null, "The specific date is required for this filter!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            java.util.Date specificDate = transaction_date.getDate();
            java.sql.Date specificDateSql = new java.sql.Date(specificDate.getTime());
            String transactionDate = specificDateSql.toString();

            try {
                DefaultTableModel dtm = (DefaultTableModel) list_of_transactions.getModel();
                dtm.setRowCount(0);
                dtm.setColumnCount(0);
                String sql = null;                  ///transaction_charge

                if (transactionType.equalsIgnoreCase("All")) {

                    sql = "SELECT `transaction_amount`, `transaction_charge`,`transaction_net_amount`, `previous_balance`, `current_balance`, `transaction_date`, `transaction_type`, `transaction_description`, `Account_Number`, e.firstname, e.lastname FROM `transactions` INNER JOIN employees e on e.employee_key = transactions.employee_key WHERE Account_Number = ? and transaction_date LIKE ? ORDER BY transaction_date DESC";
                    pst = conn.connection.prepareStatement(sql);
                    pst.setString(1, accountNumber);
                    pst.setString(2, transactionDate);
                    rs = pst.executeQuery();
                    list_of_transactions.setModel(model);
                    model.addColumn("Account Number");
                    model.addColumn("Gross Amount");
                    model.addColumn("Charges");
                    model.addColumn("Net Amount");
                    model.addColumn("Previous Balance");
                    model.addColumn("Current Balance");
                    model.addColumn("Transaction Type");
                    model.addColumn("Description");
                    model.addColumn("Transaction Date");
                    model.addColumn("Teller");
                    double totalWithdraw = 0.0;
                    double totalDeposit = 0.0;
                    double totalCharges = 0.0;
                    while (rs.next()) {
                        if (rs.getString("transaction_type").equalsIgnoreCase("Withdraw")) {
                            totalWithdraw += Double.parseDouble(rs.getString("transaction_amount"));
                        }
                        if (rs.getString("transaction_type").equalsIgnoreCase("Deposit")) {
                            totalDeposit += Double.parseDouble(rs.getString("transaction_amount"));
                        }
                        
                        totalCharges += Double.parseDouble(rs.getString("transaction_charge"));
                        
                        model.addRow(new Object[]{rs.getString("Account_Number"), 
                            formatFloat(rs.getString("transaction_amount")),
                            formatFloat(rs.getString("transaction_charge")), 
                            formatFloat(rs.getString("transaction_net_amount")),
                            formatFloat(rs.getString("previous_balance")),
                            formatFloat(rs.getString("current_balance")), 
                            rs.getString("transaction_type"),
                            rs.getString("transaction_description"), 
                            rs.getString("transaction_date"),
                            rs.getString("firstname") + " " + rs.getString("lastname")
                        });
                    }
                    total_deposit.setText(formatFloat(totalDeposit+""));
                    total_withdraw.setText(formatFloat(totalWithdraw+""));
                    total_w_d.setText(formatFloat((totalDeposit - (totalWithdraw +totalCharges))+""));
                } else {

                    sql = "SELECT `transaction_amount`, `transaction_charge`, `transaction_net_amount`,`previous_balance`, `current_balance`, `transaction_date`, `transaction_type`, `transaction_description`, `Account_Number`, e.firstname, e.lastname FROM `transactions` INNER JOIN employees e on e.employee_key = transactions.employee_key WHERE Account_Number = ? and transaction_date LIKE ? AND transaction_type = ? ORDER BY transaction_date DESC";
                    pst = conn.connection.prepareStatement(sql);
                    pst.setString(1, accountNumber);
                    pst.setString(2, transactionDate);
                    pst.setString(3, transactionType);
                    rs = pst.executeQuery();
                    
                    list_of_transactions.setModel(model);
                    model.addColumn("Account Number");
                    model.addColumn("Gross Amount");
                    model.addColumn("Charges");
                    model.addColumn("Net Amount");
                    model.addColumn("Previous Balance");
                    model.addColumn("Current Balance");
                    model.addColumn("Transaction Type");
                    model.addColumn("Description");
                    model.addColumn("Transaction Date");
                    model.addColumn("Teller");
                    double totalWithdraw = 0.0;
                    double totalDeposit = 0.0;
                    double totalCharges = 0.0;
                    while (rs.next()) {
                        
                        if (rs.getString("transaction_type").equalsIgnoreCase("Withdraw")) {
                            totalWithdraw += Double.parseDouble(rs.getString("transaction_amount"));
                        }
                        if (rs.getString("transaction_type").equalsIgnoreCase("Deposit")) {
                            totalDeposit += Double.parseDouble(rs.getString("transaction_amount"));
                        }
                        
                        totalCharges += Double.parseDouble(rs.getString("transaction_charge"));
                        
                        model.addRow(new Object[]{rs.getString("Account_Number"), formatFloat(rs.getString("transaction_amount")),
                            formatFloat(rs.getString("transaction_charge")), formatFloat(rs.getString("transaction_net_amount")),
                            formatFloat(rs.getString("previous_balance")),
                            formatFloat(rs.getString("current_balance")), rs.getString("transaction_type"),
                            rs.getString("transaction_description"), rs.getString("transaction_date"),
                            rs.getString("firstname") + " " + rs.getString("lastname")
                        });
                    }
                    total_deposit.setText(formatFloat(totalDeposit+""));
                    total_withdraw.setText(formatFloat(totalWithdraw+""));
                    total_w_d.setText(formatFloat((totalDeposit - (totalWithdraw +totalCharges))+""));
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }

    private void filterDatabyDate() throws ParseException {
        String accountNumber = account_number.getText();
        String transactionType = transaction_type.getSelectedItem().toString();
        if (from_transaction_date.getDate() == null || to_transaction_date.getDate() == null) {
            JOptionPane.showMessageDialog(null, "The start and end dates are required for this filter!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            java.util.Date fromDate = from_transaction_date.getDate();
            java.util.Date toDate = to_transaction_date.getDate();

            java.sql.Date sqlFromDate = new java.sql.Date(fromDate.getTime());
            java.sql.Date sqlToDate = new java.sql.Date(toDate.getTime());
            String sql = null;

            try {
                DefaultTableModel dtm = (DefaultTableModel) list_of_transactions.getModel();
                dtm.setRowCount(0);
                dtm.setColumnCount(0);
                if (transactionType.equalsIgnoreCase("All")) {
                    
                    sql = "SELECT `transaction_amount`, `transaction_charge`, `transaction_net_amount`,`previous_balance`, `current_balance`, `transaction_date`, `transaction_type`, `transaction_description`, `Account_Number`, e.firstname, e.lastname FROM `transactions` INNER JOIN employees e on e.employee_key = transactions.employee_key WHERE Account_Number = ? and transaction_date BETWEEN '" + sqlFromDate.toString() + "%' AND '" + sqlToDate.toString() + "%' ORDER BY transaction_date DESC";
                    pst = conn.connection.prepareStatement(sql);
                    pst.setString(1, accountNumber);
                    rs = pst.executeQuery();
                   
                    list_of_transactions.setModel(model);
                    model.addColumn("Account Number");
                    model.addColumn("Gross Amount");
                    model.addColumn("Charges");
                    model.addColumn("Net Amount");
                    model.addColumn("Previous Balance");
                    model.addColumn("Current Balance");
                    model.addColumn("Transaction Type");
                    model.addColumn("Description");
                    model.addColumn("Transaction Date");
                    model.addColumn("Teller");
                    double totalWithdraw = 0.0;
                    double totalDeposit = 0.0;
                    double totalCharges = 0.0;
                    while (rs.next()) {
                        
                        if (rs.getString("transaction_type").equalsIgnoreCase("Withdraw")) {
                            totalWithdraw += Double.parseDouble(rs.getString("transaction_amount"));
                        }
                        if (rs.getString("transaction_type").equalsIgnoreCase("Deposit")) {
                            totalDeposit += Double.parseDouble(rs.getString("transaction_amount"));
                        }
                        
                        totalCharges += Double.parseDouble(rs.getString("transaction_charge"));
                        
                        model.addRow(new Object[]{rs.getString("Account_Number"), formatFloat(rs.getString("transaction_amount")),
                            formatFloat(rs.getString("transaction_charge")), formatFloat(rs.getString("transaction_net_amount")),
                            formatFloat(rs.getString("previous_balance")),
                            formatFloat(rs.getString("current_balance")), rs.getString("transaction_type"),
                            rs.getString("transaction_description"), rs.getString("transaction_date"),
                            rs.getString("firstname") + " " + rs.getString("lastname")
                        });
                    }
                    total_deposit.setText(formatFloat(totalDeposit+""));
                    total_withdraw.setText(formatFloat(totalWithdraw+""));
                    total_w_d.setText(formatFloat((totalDeposit - (totalWithdraw +totalCharges))+""));
                } else {
                    sql = "SELECT `transaction_amount`, `transaction_charge`, `transaction_net_amount`,`previous_balance`, `current_balance`, `transaction_date`, `transaction_type`, `transaction_description`, `Account_Number`, e.firstname, e.lastname FROM `transactions` INNER JOIN employees e on e.employee_key = transactions.employee_key WHERE Account_Number = ? and transaction_type = ? and transaction_date BETWEEN '" + sqlFromDate.toString() + "%' AND '" + sqlToDate.toString() + "%' ORDER BY transaction_date DESC";
                    pst = conn.connection.prepareStatement(sql);
                    pst.setString(1, accountNumber);
                    pst.setString(2, transactionType);
                    rs = pst.executeQuery();
                    
                    list_of_transactions.setModel(model);
                    model.addColumn("Account Number");
                    model.addColumn("Gross Amount");
                    model.addColumn("Charges");
                    model.addColumn("Net Amount");
                    model.addColumn("Previous Balance");
                    model.addColumn("Current Balance");
                    model.addColumn("Transaction Type");
                    model.addColumn("Description");
                    model.addColumn("Transaction Date");
                    model.addColumn("Teller");
                    double totalWithdraw = 0.0;
                    double totalDeposit = 0.0;
                    double totalCharges = 0.0;
                    while (rs.next()) {
                        
                        if (rs.getString("transaction_type").equalsIgnoreCase("Withdraw")) {
                            totalWithdraw += Double.parseDouble(rs.getString("transaction_amount"));
                        }
                        if (rs.getString("transaction_type").equalsIgnoreCase("Deposit")) {
                            totalDeposit += Double.parseDouble(rs.getString("transaction_amount"));
                        }
                        
                        totalCharges += Double.parseDouble(rs.getString("transaction_charge"));
                        
                        model.addRow(new Object[]{rs.getString("Account_Number"), 
                            formatFloat(rs.getString("transaction_amount")),
                            formatFloat(rs.getString("transaction_charge")), formatFloat(rs.getString("transaction_net_amount")),
                            formatFloat(rs.getString("previous_balance")),
                            formatFloat(rs.getString("current_balance")), rs.getString("transaction_type"),
                            rs.getString("transaction_description"), rs.getString("transaction_date"),
                            rs.getString("firstname") + " " + rs.getString("lastname")
                        });
                    }
                    total_deposit.setText(formatFloat(totalDeposit+""));
                    total_withdraw.setText(formatFloat(totalWithdraw+""));
                    total_w_d.setText(formatFloat((totalDeposit - (totalWithdraw +totalCharges))+""));
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }

    private void goActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goActionPerformed
        // TODO add your handling code here:
        String accountNumber = account_number.getText();
        String transactionType = (String) transaction_type.getSelectedItem();
        String dateChoice = (String) date_choice.getSelectedItem();
        java.sql.Timestamp date = new java.sql.Timestamp(new java.util.Date().getTime());

        if (dateChoice.equalsIgnoreCase("Specific Date")) {
            try {
                filterData(accountNumber, transactionType);
            } catch (ParseException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        } else if (dateChoice.equalsIgnoreCase("Date Range")) {
            //populateTransactions(accountNumber);
            try {
                filterDatabyDate();
            } catch (ParseException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please pick the date choice Filter!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_goActionPerformed

    private void date_choiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_date_choiceActionPerformed
        // TODO add your handling code here:
        String dateChoice = (String) date_choice.getSelectedItem();
        if (dateChoice.equals("Specific Date")) {
            date_label.setEnabled(true);
            transaction_date.setEnabled(true);
            date_range_label.setEnabled(false);
            from_transaction_date.setEnabled(false);
            to_transaction_date.setEnabled(false);
            to_label.setEnabled(false);
        } else if (dateChoice.equals("Date Range")) {
            date_label.setEnabled(false);
            transaction_date.setEnabled(false);
            date_range_label.setEnabled(true);
            from_transaction_date.setEnabled(true);
            to_transaction_date.setEnabled(true);
            to_label.setEnabled(true);
        }
    }//GEN-LAST:event_date_choiceActionPerformed
    
    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        // TODO add your handling code here:
        int dialogResult = JOptionPane.showConfirmDialog(null, "Would you like to EXPORT");
        if(dialogResult == JOptionPane.YES_OPTION){
          try {
            String fileName = "Sacco/";
            String directoryName = FileSystemView.getFileSystemView().getDefaultDirectory().getPath()+"/Documents/".concat(fileName);
            File dir = new File(directoryName);
             if (!dir.exists()) dir.mkdirs();
            
            ExcelExporter exp = new ExcelExporter();
            exp.exportTable(list_of_transactions, new File(directoryName+acc_no+"Transactions.xls"));
            
            //OPEN FILE
            File tmpDir = new File(directoryName+acc_no+"Transactions.xls");
            boolean exists = tmpDir.exists();
              if (exists) {
                  Desktop dt = Desktop.getDesktop();
                  dt.open(new File(directoryName+acc_no+"Transactions.xls"));
              }
          } catch (IOException ex) {
                Logger.getLogger(Transaction.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        // TODO add your handling code here:
        new Deposit().setVisible(true);
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        // TODO add your handling code here:
        new Withdraw().setVisible(true);
    }//GEN-LAST:event_jLabel5MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Transaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Transaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Transaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Transaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Transaction().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField account_number;
    private javax.swing.JComboBox<String> date_choice;
    private javax.swing.JLabel date_label;
    private javax.swing.JLabel date_range_label;
    private com.toedter.calendar.JDateChooser from_transaction_date;
    private javax.swing.JButton go;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTable list_of_transactions;
    private javax.swing.JLabel to_label;
    private com.toedter.calendar.JDateChooser to_transaction_date;
    private javax.swing.JLabel total_deposit;
    private javax.swing.JLabel total_w_d;
    private javax.swing.JLabel total_withdraw;
    private com.toedter.calendar.JDateChooser transaction_date;
    private javax.swing.JComboBox<String> transaction_type;
    // End of variables declaration//GEN-END:variables
}