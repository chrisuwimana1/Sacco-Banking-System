/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bank;

/**
 *
 * @author chris
 */
import java.awt.Toolkit;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;

public class CreateContractInformation extends javax.swing.JFrame {

    /**
     * Creates new form CreateContract
     */
    PreparedStatement pst = null;
    ResultSet rs = null;
    DBConnection conn;
    Helper helper;
    String country = "RW";
    String leBook = "519";
    DecimalFormat formatter = new DecimalFormat("#,###.00");
    boolean doesCustomerHasEpargneObligatoire = false;
    float epargneObligatoire = 0;
    float total_amount_due;
    String loan_application_id;
       
    
    //loan_epargne_obligatoire
    public CreateContractInformation(String loanApplicationId) {

        initComponents();
        conn = new DBConnection();
        helper = new Helper();
        loan_application_id =loanApplicationId;
        save_contract.setEnabled(false);
        cancel.setEnabled(false);
        lastContractID();
        searchLoanApplicationId(loanApplicationId);
        Toolkit tk = Toolkit.getDefaultToolkit();
        int xsize = (int) tk.getScreenSize().getWidth();
        int ysize = (int) tk.getScreenSize().getHeight();
        this.setSize(xsize, ysize);
    }
    
    private CreateContractInformation() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel10 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        customer_name = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        customer_gender = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        vision_sbu = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        vision_ouc = new javax.swing.JTextField();
        customer_id = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        account_number = new javax.swing.JTextField();
        save_contract = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        contract_status = new javax.swing.JComboBox<>();
        contract_administrative_fee = new javax.swing.JTextField();
        currency_label = new javax.swing.JLabel();
        contract_application_fee_label = new javax.swing.JLabel();
        settlement_date = new com.toedter.calendar.JDateChooser();
        apr_rate = new javax.swing.JTextField();
        commissions = new javax.swing.JTextField();
        apr_rate_label = new javax.swing.JLabel();
        insurance_expiry_date_label = new javax.swing.JLabel();
        principal_gl = new javax.swing.JTextField();
        govt_schemes_description_label = new javax.swing.JLabel();
        start_date = new com.toedter.calendar.JDateChooser();
        insurance_expiry_date = new com.toedter.calendar.JDateChooser();
        govt_schemes_flag = new javax.swing.JComboBox<>();
        interest_rate_dr_label = new javax.swing.JLabel();
        deal_sub_type_label = new javax.swing.JLabel();
        insured_flag_label = new javax.swing.JLabel();
        maturity_date_label = new javax.swing.JLabel();
        interest_rate_method_template_label = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        govt_schemes_description = new javax.swing.JTextArea();
        settlement_date_label = new javax.swing.JLabel();
        contract_status_label = new javax.swing.JLabel();
        principal_gl_label = new javax.swing.JLabel();
        interest_rate_cr = new javax.swing.JTextField();
        govt_schemes_flag_label = new javax.swing.JLabel();
        start_date_label = new javax.swing.JLabel();
        deal_type_label = new javax.swing.JLabel();
        currency = new javax.swing.JComboBox<>();
        other_contract_charges = new javax.swing.JTextField();
        deal_sub_type = new javax.swing.JComboBox<>();
        contract_administrative_fee_label = new javax.swing.JLabel();
        interest_rate_cr_label = new javax.swing.JLabel();
        deal_type = new javax.swing.JComboBox<>();
        commissions_label = new javax.swing.JLabel();
        maturity_date = new com.toedter.calendar.JDateChooser();
        interest_rate_dr = new javax.swing.JTextField();
        interest_rate_method_template = new javax.swing.JComboBox<>();
        contract_insurance_charges_label = new javax.swing.JLabel();
        other_contract_charges_label = new javax.swing.JLabel();
        interest_gl = new javax.swing.JTextField();
        insured_flag = new javax.swing.JComboBox<>();
        contract_insurance_charges = new javax.swing.JTextField();
        interest_gl_label = new javax.swing.JLabel();
        contract_application_fee = new javax.swing.JTextField();
        principal_amount_label = new javax.swing.JLabel();
        interest_amount_label = new javax.swing.JLabel();
        principal_amount = new javax.swing.JTextField();
        interest_amount = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        number_of_payments_per_year_label = new javax.swing.JLabel();
        loan_period_label = new javax.swing.JLabel();
        start_date_of_loan_label = new javax.swing.JLabel();
        loan_amount_label = new javax.swing.JLabel();
        loan_amortization = new javax.swing.JButton();
        start_date_of_loan = new com.toedter.calendar.JDateChooser();
        annual_interest_rate_label = new javax.swing.JLabel();
        refresh = new javax.swing.JButton();
        number_of_payments = new javax.swing.JTextField();
        loan_period = new javax.swing.JTextField();
        annual_interest_rate = new javax.swing.JTextField();
        loan_amount = new javax.swing.JTextField();
        contract_id_label = new javax.swing.JLabel();
        contract_id = new javax.swing.JFormattedTextField();
        interest_rate_method_label = new javax.swing.JLabel();
        interest_rate_method = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        total_interest_label = new javax.swing.JLabel();
        epargne_obligatoire = new javax.swing.JTextField();
        emi_amount = new javax.swing.JTextField();
        total_interest = new javax.swing.JTextField();
        epargne_obligatoire_label = new javax.swing.JLabel();
        emi_label = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Account Details"));

        jLabel2.setText("Customer Name:");

        customer_name.setEditable(false);

        jLabel3.setText("Gender:");

        customer_gender.setEditable(false);

        jLabel4.setText("Business Segment:");

        vision_sbu.setEditable(false);

        jLabel17.setText("Customer ID:");

        jLabel19.setText("Sacco Branch:");

        vision_ouc.setEditable(false);

        customer_id.setEditable(false);
        customer_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customer_idActionPerformed(evt);
            }
        });

        jLabel5.setText("Account Number:");

        account_number.setEditable(false);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel19))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(vision_sbu)
                            .addComponent(vision_ouc, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel17))
                                .addGap(38, 38, 38)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(customer_gender, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(customer_id, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel5))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(account_number, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                                    .addComponent(customer_name))))
                        .addGap(0, 58, Short.MAX_VALUE))))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(customer_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(account_number, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(customer_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(customer_gender, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(vision_sbu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(vision_ouc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        save_contract.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        save_contract.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/Save-icon 2.png"))); // NOI18N
        save_contract.setText("SAVE");
        save_contract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_contractActionPerformed(evt);
            }
        });

        cancel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/cancel-icon.png"))); // NOI18N
        cancel.setText("CANCEL");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        jScrollPane2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        contract_status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Active", "Pre-Matured", "Matured", "Applied", "Rejected", "Writeoff" }));
        contract_status.setEnabled(false);

        contract_administrative_fee.setText("0");
        contract_administrative_fee.setEnabled(false);

        currency_label.setText("Currency (*):");
        currency_label.setEnabled(false);

        contract_application_fee_label.setText("Contract Application Fee (*):");
        contract_application_fee_label.setEnabled(false);

        settlement_date.setEnabled(false);

        apr_rate.setText("0");
        apr_rate.setEnabled(false);
        apr_rate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apr_rateActionPerformed(evt);
            }
        });

        commissions.setEditable(false);
        commissions.setText("0");
        commissions.setEnabled(false);

        apr_rate_label.setText("APR Rate (*):");
        apr_rate_label.setEnabled(false);

        insurance_expiry_date_label.setText("Insurance Expiry Date (*):");
        insurance_expiry_date_label.setEnabled(false);

        principal_gl.setText("0");
        principal_gl.setEnabled(false);
        principal_gl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                principal_glActionPerformed(evt);
            }
        });

        govt_schemes_description_label.setText("Govt Schemes Description:");
        govt_schemes_description_label.setEnabled(false);

        start_date.setEnabled(false);

        insurance_expiry_date.setEnabled(false);

        govt_schemes_flag.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Y", "N" }));
        govt_schemes_flag.setEnabled(false);
        govt_schemes_flag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                govt_schemes_flagActionPerformed(evt);
            }
        });

        interest_rate_dr_label.setText("Interest Rate Dr (*):");
        interest_rate_dr_label.setEnabled(false);

        deal_sub_type_label.setText("Deal Sub Type (*):");
        deal_sub_type_label.setEnabled(false);

        insured_flag_label.setText("Insured Flag (*):");
        insured_flag_label.setEnabled(false);

        maturity_date_label.setText("Maturity Date (*):");
        maturity_date_label.setEnabled(false);

        interest_rate_method_template_label.setText("Interest Rate Method (*):");
        interest_rate_method_template_label.setEnabled(false);

        govt_schemes_description.setColumns(20);
        govt_schemes_description.setRows(5);
        govt_schemes_description.setEnabled(false);
        jScrollPane1.setViewportView(govt_schemes_description);

        settlement_date_label.setText("Settlement Date (*):");
        settlement_date_label.setEnabled(false);

        contract_status_label.setText("Contract Status (*):");
        contract_status_label.setEnabled(false);

        principal_gl_label.setText("Principal GL (*):");
        principal_gl_label.setEnabled(false);

        interest_rate_cr.setEditable(false);
        interest_rate_cr.setText("0");
        interest_rate_cr.setEnabled(false);

        govt_schemes_flag_label.setText("Govt Schemes Flag (*):");
        govt_schemes_flag_label.setEnabled(false);

        start_date_label.setText("Start Date (*):");
        start_date_label.setEnabled(false);

        deal_type_label.setText("Deal Type (*):");
        deal_type_label.setEnabled(false);

        currency.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RWF" }));
        currency.setEnabled(false);

        other_contract_charges.setText("0");
        other_contract_charges.setEnabled(false);

        deal_sub_type.setEnabled(false);
        deal_sub_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deal_sub_typeActionPerformed(evt);
            }
        });

        contract_administrative_fee_label.setText("Contract Administrative Fee (*):");
        contract_administrative_fee_label.setEnabled(false);

        interest_rate_cr_label.setText("Interest Rate Cr (*):");
        interest_rate_cr_label.setEnabled(false);

        deal_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Deal Type", "OVRDFT", "SECDEP", "MFIBOW", "MFILON" }));
        deal_type.setEnabled(false);
        deal_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deal_typeActionPerformed(evt);
            }
        });

        commissions_label.setText("Commissions (*):");
        commissions_label.setEnabled(false);

        maturity_date.setEnabled(false);

        interest_rate_dr.setText("0");
        interest_rate_dr.setEnabled(false);

        interest_rate_method_template.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Declining", "Flat ", "Floating", "Not Applicable" }));
        interest_rate_method_template.setEnabled(false);

        contract_insurance_charges_label.setText("Contract Insurance Charges (*):");
        contract_insurance_charges_label.setEnabled(false);

        other_contract_charges_label.setText("Other Contract Charges (*):");
        other_contract_charges_label.setEnabled(false);

        interest_gl.setText("0");
        interest_gl.setEnabled(false);

        insured_flag.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Y", "N" }));
        insured_flag.setEnabled(false);

        contract_insurance_charges.setText("0");
        contract_insurance_charges.setEnabled(false);

        interest_gl_label.setText("Interest GL (*):");
        interest_gl_label.setEnabled(false);

        contract_application_fee.setEditable(false);
        contract_application_fee.setText("0");
        contract_application_fee.setEnabled(false);

        principal_amount_label.setText("Principal Amount (*):");
        principal_amount_label.setEnabled(false);

        interest_amount_label.setText("Interest Amount (*):");
        interest_amount_label.setEnabled(false);

        principal_amount.setEditable(false);
        principal_amount.setText("0");
        principal_amount.setEnabled(false);

        interest_amount.setEditable(false);
        interest_amount.setText("0");
        interest_amount.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(contract_insurance_charges_label)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(contract_insurance_charges))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(contract_administrative_fee_label)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(other_contract_charges_label)
                                        .addGap(28, 28, 28)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(commissions_label)
                                    .addGap(88, 88, 88))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(insured_flag_label)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(contract_administrative_fee)
                                .addComponent(other_contract_charges)
                                .addComponent(commissions)
                                .addComponent(insured_flag, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(contract_application_fee_label)
                                .addComponent(apr_rate_label, javax.swing.GroupLayout.Alignment.LEADING))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(apr_rate, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(contract_application_fee, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(insurance_expiry_date_label)
                            .addComponent(currency_label)
                            .addComponent(principal_gl_label)
                            .addComponent(interest_gl_label)
                            .addComponent(contract_status_label))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(currency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(insurance_expiry_date, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(contract_status, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(interest_gl, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(principal_gl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(start_date_label)
                            .addComponent(settlement_date_label)
                            .addComponent(maturity_date_label)
                            .addComponent(deal_type_label)
                            .addComponent(deal_sub_type_label)
                            .addComponent(govt_schemes_flag_label)
                            .addComponent(interest_rate_method_template_label)
                            .addComponent(interest_rate_dr_label)
                            .addComponent(interest_rate_cr_label)
                            .addComponent(govt_schemes_description_label)
                            .addComponent(principal_amount_label)
                            .addComponent(interest_amount_label))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(maturity_date, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(settlement_date, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(start_date, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(interest_amount, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(principal_amount, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(interest_rate_method_template, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(interest_rate_dr, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(interest_rate_cr, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                            .addComponent(govt_schemes_flag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(deal_sub_type, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deal_type, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(start_date_label)
                    .addComponent(start_date, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(settlement_date_label)
                    .addComponent(settlement_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(maturity_date_label)
                    .addComponent(maturity_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deal_type_label)
                    .addComponent(deal_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deal_sub_type_label)
                    .addComponent(deal_sub_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(govt_schemes_flag_label)
                    .addComponent(govt_schemes_flag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(govt_schemes_description_label)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(principal_amount_label)
                    .addComponent(principal_amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(interest_amount_label)
                    .addComponent(interest_amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(interest_rate_method_template_label)
                    .addComponent(interest_rate_method_template, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(interest_rate_dr_label)
                    .addComponent(interest_rate_dr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(interest_rate_cr_label)
                    .addComponent(interest_rate_cr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(apr_rate_label)
                    .addComponent(apr_rate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contract_application_fee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(contract_application_fee_label))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contract_administrative_fee_label)
                    .addComponent(contract_administrative_fee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(other_contract_charges_label)
                    .addComponent(other_contract_charges, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commissions_label)
                    .addComponent(commissions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(insured_flag_label)
                    .addComponent(insured_flag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contract_insurance_charges_label)
                    .addComponent(contract_insurance_charges, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(insurance_expiry_date_label)
                    .addComponent(insurance_expiry_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currency_label)
                    .addComponent(currency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(principal_gl_label)
                    .addComponent(principal_gl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(interest_gl_label)
                    .addComponent(interest_gl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contract_status_label)
                    .addComponent(contract_status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jScrollPane2.setViewportView(jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Loan Details"));

        number_of_payments_per_year_label.setText("Number of payments Per year:");
        number_of_payments_per_year_label.setEnabled(false);

        loan_period_label.setText("Loan Period (In Months):");
        loan_period_label.setEnabled(false);

        start_date_of_loan_label.setText("Start Date of Loan:");
        start_date_of_loan_label.setEnabled(false);

        loan_amount_label.setText("Loan Amount:");
        loan_amount_label.setEnabled(false);

        loan_amortization.setText("Loan Amortization");
        loan_amortization.setEnabled(false);
        loan_amortization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loan_amortizationActionPerformed(evt);
            }
        });

        start_date_of_loan.setEnabled(false);

        annual_interest_rate_label.setText("Annual Interest rate:");
        annual_interest_rate_label.setEnabled(false);

        refresh.setText("Refresh");
        refresh.setEnabled(false);
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        number_of_payments.setText("12");
        number_of_payments.setEnabled(false);

        loan_period.setText("36");
        loan_period.setEnabled(false);

        annual_interest_rate.setText("24");
        annual_interest_rate.setEnabled(false);

        loan_amount.setText("3500000");
        loan_amount.setEnabled(false);

        contract_id_label.setText("Contract ID:");
        contract_id_label.setEnabled(false);

        contract_id.setEnabled(false);

        interest_rate_method_label.setText("Interest Rate Method:");
        interest_rate_method_label.setEnabled(false);

        interest_rate_method.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Declining", "Flat", "Floating", "Not Applicable" }));
        interest_rate_method.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(refresh)
                        .addGap(18, 18, 18)
                        .addComponent(loan_amortization))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(start_date_of_loan_label)
                        .addGap(18, 18, 18)
                        .addComponent(start_date_of_loan, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(loan_period_label)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(loan_period))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(annual_interest_rate_label)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(annual_interest_rate, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(number_of_payments_per_year_label)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(number_of_payments, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(contract_id_label)
                                .addComponent(loan_amount_label))
                            .addGap(42, 42, 42)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(loan_amount, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                                .addComponent(contract_id))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(interest_rate_method_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(interest_rate_method, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(71, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contract_id_label)
                    .addComponent(contract_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loan_amount_label)
                    .addComponent(loan_amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(annual_interest_rate_label)
                    .addComponent(annual_interest_rate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loan_period_label)
                    .addComponent(loan_period, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(number_of_payments_per_year_label)
                    .addComponent(number_of_payments, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(start_date_of_loan_label)
                    .addComponent(start_date_of_loan, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(interest_rate_method_label)
                    .addComponent(interest_rate_method, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refresh)
                    .addComponent(loan_amortization))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Some Loan numbers"));

        total_interest_label.setText("Total Interest:");
        total_interest_label.setEnabled(false);

        epargne_obligatoire.setEditable(false);
        epargne_obligatoire.setEnabled(false);

        emi_amount.setEditable(false);
        emi_amount.setEnabled(false);

        total_interest.setEditable(false);
        total_interest.setEnabled(false);

        epargne_obligatoire_label.setText("Epargne Obligatoire:");
        epargne_obligatoire_label.setEnabled(false);

        emi_label.setText("EMI:");
        emi_label.setEnabled(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(epargne_obligatoire_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(epargne_obligatoire))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(total_interest_label)
                            .addComponent(emi_label))
                        .addGap(41, 41, 41)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(total_interest)
                            .addComponent(emi_amount, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emi_label)
                    .addComponent(emi_amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(total_interest_label)
                    .addComponent(total_interest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(epargne_obligatoire_label)
                    .addComponent(epargne_obligatoire, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(save_contract)
                        .addGap(18, 18, 18)
                        .addComponent(cancel))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancel)
                    .addComponent(save_contract))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public Calendar toCalendar(Date date) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        return cal;
    }

    private void lastContractID() {
        try {
            String sql = "SELECT COUNT(*) AS counts FROM (SELECT contract_information.Contract_ID FROM contract_information) x";
            pst = conn.connection.prepareStatement(sql);
            rs = pst.executeQuery();
            if (rs.next()) {
                //String numberAsString = String.format("%04d", rs.getInt("counts") + 1);
                String contractIDAsString = String.format("%010d", rs.getInt("counts") + 1);
                contractIDAsString += "L";
                contract_id.setValue(contractIDAsString);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private boolean doesContractLoanExist(String contractID) {
        boolean contractExists = false;
        // TODO Auto-generated method stub
        if (!contractID.isEmpty()) {
            try {
                String sql;
                sql = "SELECT `Contract_ID` FROM `contract_information` WHERE Contract_ID = ?";
                pst = conn.connection.prepareStatement(sql);
                pst.setString(1, contractID);
                rs = pst.executeQuery();
                if (rs.next()) {
                    contractExists = true;
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
        return contractExists;
    }



    private void searchLoanApplicationId(String loanApplicationID) {

        try {
            String sql = "SELECT lo.Country,lo.LE_Book, lo.Customer_ID, lo.Vision_OUC, lo.Vision_SBU, cu.Customer_Name, cu.Customer_Gender, cu.Account_Number from loan_application_analysis lo inner join customer_information cu on lo.Customer_ID = cu.Customer_ID WHERE Loan_Application_Id =?";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, loanApplicationID);
            rs = pst.executeQuery();
            if (rs.next()) {
                customer_id.setText(rs.getString("Customer_ID"));
                vision_ouc.setText(rs.getString("Vision_OUC"));
                vision_sbu.setText(rs.getString("Vision_SBU"));
                customer_name.setText(rs.getString("Customer_Name"));
                customer_gender.setText(rs.getString("Customer_Gender"));
                account_number.setText(rs.getString("Account_Number"));
                enableLoanAmortizationFields();
            } else {
                JOptionPane.showMessageDialog(null, "The loan application ID you entered doesn't exist!", "Error", JOptionPane.ERROR_MESSAGE);
                disableLoanAmortizationFields(); 
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void doesEpargneObligatoireExist(String accountNumber) {

        //getEpargneObligatoire(accountNumber);
        //boolean status = false;
        if (!accountNumber.isEmpty()) {
            try {
                String sql = "SELECT Account_Number, Amount from loan_epargne_obligatoire where Account_Number = ?";
                pst = conn.connection.prepareStatement(sql);
                pst.setString(1, accountNumber);
                rs = pst.executeQuery();
                if (rs.next()) {
                    doesCustomerHasEpargneObligatoire = true;
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }

    private void saveLoanContract() {
        java.util.Date startDate = start_date.getDate();
        java.util.Date settlementDate = settlement_date.getDate();
        java.util.Date maturityDate = maturity_date.getDate();
        java.util.Date insuranceExpiryDate = insurance_expiry_date.getDate();

        java.sql.Date sqlStartDate = new java.sql.Date(startDate.getTime());
        java.sql.Date sqlSettlementDate = new java.sql.Date(settlementDate.getTime());
        java.sql.Date sqlMaturityDate = new java.sql.Date(maturityDate.getTime());
        java.sql.Date sqlInsuranceExpiryDate = new java.sql.Date(insuranceExpiryDate.getTime());

        String contractID = contract_id.getText();
        String customerID = customer_id.getText();
        String visionOUC = vision_ouc.getText();
        String visionSBU = vision_sbu.getText();

        float interestRateDr = Float.parseFloat(interest_rate_dr.getText());
        float interestRateCr = Float.parseFloat(interest_rate_cr.getText());
        float aprRate = Float.parseFloat(apr_rate.getText());
        float contractApplicationFee = Float.parseFloat(contract_application_fee.getText());
        float contractAdministrativeFee = Float.parseFloat(contract_administrative_fee.getText());
        float otherContractCharges = Float.parseFloat(other_contract_charges.getText());
        float commissionsinFloat = Float.parseFloat(commissions.getText());
        float contractInsuranceCharges = Float.parseFloat(contract_insurance_charges.getText());
        String principalGl = principal_gl.getText();
        String interestGl = interest_gl.getText();
        float principalAmount = Float.parseFloat(principal_amount.getText());
        float interestAmount = Float.parseFloat(interest_amount.getText());
        int contractStatusCode = helper.getContractStatusCode(contract_status.getSelectedItem().toString());
        float emiAmount = Float.parseFloat(emi_amount.getText());
        int loanPeriod = Integer.parseInt(loan_period.getText());
        String accountNumber = account_number.getText().trim();
        String customerName = customer_name.getText().trim();

        try {
            String sql = "insert into contract_information(Country,"
                    + "LE_Book,"
                    + "Contract_ID,"
                    + "Customer_ID,"
                    + "Vision_OUC,"
                    + "Vision_SBU,"
                    + "Start_Date,"
                    + "Maturity_Date,"
                    + "Settlement_Date,"
                    + "Deal_Type,"
                    + "Deal_Sub_Type,"
                    + "Govt_Schemes_Flag,"
                    + "Govt_Schemes_Desc,"
                    + "Interest_Rate_Method,"
                    + "Interest_Rate_DR,"
                    + "Interest_Rate_CR,"
                    + "APR_Rate,"
                    + "Contract_Application_Fee,"
                    + "Contract_Administrative_Fee,"
                    + "Other_Contract_Charges,"
                    + "Commissions,"
                    + "Insured_Flag,"
                    + "Contract_Insurance_Charges,"
                    + "Ins_Expiry_Date,"
                    + "Currency,"
                    + "Principal_GL,"
                    + "Interest_GL,"
                    + "Principal_Amount_FCY,"
                    + "Principal_Amount_LCY,"
                    + "Interest_Amount_FCY,"
                    + "Interest_Amount_LCY,"
                    + "Loan_Application_Id,"
                    + "Contract_Status) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, country);
            pst.setString(2, leBook);
            pst.setString(3, contractID);
            pst.setString(4, customerID);
            pst.setString(5, visionOUC);
            pst.setString(6, visionSBU);
            pst.setString(7, sqlStartDate.toString());
            pst.setString(8, sqlSettlementDate.toString());
            pst.setString(9, sqlMaturityDate.toString());
            pst.setString(10, deal_type.getSelectedItem().toString());
            pst.setString(11, deal_sub_type.getSelectedItem().toString());
            pst.setString(12, govt_schemes_flag.getSelectedItem().toString());
            pst.setString(13, govt_schemes_description.getText());
            pst.setInt(14, helper.getInterestRateMethodCode(interest_rate_method_template.getSelectedItem().toString()));
            pst.setFloat(15, interestRateDr);
            pst.setFloat(16, interestRateCr);
            pst.setFloat(17, aprRate);
            pst.setFloat(18, contractApplicationFee);
            pst.setFloat(19, contractAdministrativeFee);
            pst.setFloat(20, otherContractCharges);
            pst.setFloat(21, commissionsinFloat);
            pst.setString(22, insured_flag.getSelectedItem().toString());
            pst.setFloat(23, contractInsuranceCharges);
            pst.setString(24, sqlInsuranceExpiryDate.toString());
            pst.setString(25, currency.getSelectedItem().toString());
            pst.setString(26, principalGl);
            pst.setString(27, interestGl);
            pst.setFloat(28, principalAmount);
            pst.setFloat(29, principalAmount);
            pst.setFloat(30, interestAmount);
            pst.setFloat(31, interestAmount);
            pst.setString(32, loan_application_id);
            pst.setInt(33, contractStatusCode);
            int saved = pst.executeUpdate();
            if (saved > 0) {
                //createContractSchedule(country,leBook,YearMonth,principalAmount,)
                JOptionPane.showMessageDialog(null, "The contract Information has been Created");
                new Loan_Account_Info(country, leBook, customerID, accountNumber,customerName,visionOUC, 
                        visionSBU, contractID, 
                        emiAmount, loanPeriod, sqlStartDate.toString(), principalAmount, 
                        interestAmount, sqlSettlementDate.toString()).setVisible(true);
                this.dispose();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void createEpargneObligatoire(String accountNumber, float epargneAmount) {
        try {
            String sql = "INSERT into loan_epargne_obligatoire (Contract_ID,Account_Number,Amount) values(?,?,?)";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, contract_id.getText());
            pst.setString(2, accountNumber);
            pst.setFloat(3, epargneAmount);
            pst.execute();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private void updateEpargneObligatoire(String accountNumber, float epargneAmount) {

        float currentEpargne = getEpargneObligatoire(accountNumber);
        float newEpargne = currentEpargne + epargneAmount;

        try {
            String sql = "update loan_epargne_obligatoire set Amount	='" + newEpargne + "' where Account_Number='" + accountNumber + "'";
            pst = conn.connection.prepareStatement(sql);
            pst.execute();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private float getEpargneObligatoire(String accountNumber) {
        try {
            String sql = "SELECT Amount from loan_epargne_obligatoire where Account_Number = ?";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, accountNumber);
            rs = pst.executeQuery();
            if (rs.next()) {
                epargneObligatoire = rs.getFloat("Amount");
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
        return epargneObligatoire;
    }

    private void enableContractInformationFields() {
        start_date_label.setEnabled(true);
        start_date.setEnabled(true);
        settlement_date_label.setEnabled(true);
        settlement_date.setEnabled(true);
        maturity_date_label.setEnabled(true);
        maturity_date.setEnabled(true);
        deal_type_label.setEnabled(true);
        deal_type.setEnabled(true);
        deal_sub_type_label.setEnabled(true);
        deal_sub_type.setEnabled(true);
        govt_schemes_flag_label.setEnabled(true);
        govt_schemes_flag.setEnabled(true);
        govt_schemes_description_label.setEnabled(true);
        govt_schemes_description.setEnabled(true);
        interest_rate_method_template_label.setEnabled(true);
        interest_rate_method_template.setEnabled(true);
        interest_rate_dr_label.setEnabled(true);
        interest_rate_dr.setEnabled(true);
        interest_rate_cr_label.setEnabled(true);
        interest_rate_cr.setEnabled(true);
        apr_rate_label.setEnabled(true);
        apr_rate.setEnabled(true);
        contract_application_fee_label.setEnabled(true);
        contract_application_fee.setEnabled(true);

        contract_administrative_fee_label.setEnabled(true);
        contract_administrative_fee.setEnabled(true);
        contract_application_fee_label.setEnabled(true);
        contract_application_fee.setEnabled(true);

        other_contract_charges_label.setEnabled(true);
        other_contract_charges.setEnabled(true);
        commissions_label.setEnabled(true);
        commissions.setEnabled(true);

        insured_flag_label.setEnabled(true);
        insured_flag.setEnabled(true);
        contract_insurance_charges_label.setEnabled(true);
        contract_insurance_charges.setEnabled(true);

        insurance_expiry_date_label.setEnabled(true);
        insurance_expiry_date.setEnabled(true);
        currency_label.setEnabled(true);
        currency.setEnabled(true);

        principal_amount_label.setEnabled(true);
        principal_amount.setEnabled(true);
        interest_amount_label.setEnabled(true);
        interest_amount.setEnabled(true);

        principal_gl_label.setEnabled(true);
        principal_gl.setEnabled(true);
        interest_gl_label.setEnabled(true);
        interest_gl.setEnabled(true);

        contract_status_label.setEnabled(true);
        contract_status.setEnabled(true);
        save_contract.setEnabled(true);
        cancel.setEnabled(true);
    }

    private void disableContractInformationFields() {
        start_date_label.setEnabled(true);
        start_date.setEnabled(true);
        settlement_date_label.setEnabled(true);
        settlement_date.setEnabled(true);
        maturity_date_label.setEnabled(true);
        maturity_date.setEnabled(true);
        deal_type_label.setEnabled(true);
        deal_type.setEnabled(true);
        deal_sub_type_label.setEnabled(true);
        deal_sub_type.setEnabled(true);
        govt_schemes_flag_label.setEnabled(true);
        govt_schemes_flag.setEnabled(true);
        govt_schemes_description_label.setEnabled(true);
        govt_schemes_description.setEnabled(true);
        interest_rate_method_template_label.setEnabled(true);
        interest_rate_method_template.setEnabled(true);
        interest_rate_dr_label.setEnabled(true);
        interest_rate_dr.setEnabled(true);
        interest_rate_cr_label.setEnabled(true);
        interest_rate_cr.setEnabled(true);
        apr_rate_label.setEnabled(true);
        apr_rate.setEnabled(true);
        contract_application_fee_label.setEnabled(true);
        contract_application_fee.setEnabled(true);

        contract_administrative_fee_label.setEnabled(true);
        contract_administrative_fee.setEnabled(true);
        contract_application_fee_label.setEnabled(true);
        contract_application_fee.setEnabled(true);

        other_contract_charges_label.setEnabled(true);
        other_contract_charges.setEnabled(true);
        commissions_label.setEnabled(true);
        commissions.setEnabled(true);

        insured_flag_label.setEnabled(true);
        insured_flag.setEnabled(true);
        contract_insurance_charges_label.setEnabled(true);
        contract_insurance_charges.setEnabled(true);

        insurance_expiry_date_label.setEnabled(true);
        insurance_expiry_date.setEnabled(true);
        currency_label.setEnabled(true);
        currency.setEnabled(true);

        principal_amount_label.setEnabled(true);
        principal_amount.setEnabled(true);
        interest_amount_label.setEnabled(true);
        interest_amount.setEnabled(true);

        contract_status_label.setEnabled(true);
        contract_status.setEnabled(true);
    }

    private void enableLoanAmortizationFields() {
        contract_id_label.setEnabled(true);
        contract_id.setEnabled(true);
        loan_amount_label.setEnabled(true);
        loan_amount.setEnabled(true);
        annual_interest_rate_label.setEnabled(true);
        annual_interest_rate.setEnabled(true);

        loan_period_label.setEnabled(true);
        loan_period.setEnabled(true);
        number_of_payments_per_year_label.setEnabled(true);
        number_of_payments.setEnabled(true);
        start_date_of_loan_label.setEnabled(true);
        start_date_of_loan.setEnabled(true);
        refresh.setEnabled(true);
        interest_rate_method_label.setEnabled(true);
        interest_rate_method.setEnabled(true);
        //loan_amortization.setEnabled(true);
    }

    private void disableLoanAmortizationFields() {
        contract_id_label.setEnabled(false);
        contract_id.setEnabled(false);
        loan_amount_label.setEnabled(false);
        loan_amount.setEnabled(false);
        annual_interest_rate_label.setEnabled(false);
        annual_interest_rate.setEnabled(false);

        loan_period_label.setEnabled(false);
        loan_period.setEnabled(false);
        number_of_payments_per_year_label.setEnabled(false);
        number_of_payments.setEnabled(false);
        start_date_of_loan_label.setEnabled(false);
        start_date_of_loan.setEnabled(false);
        refresh.setEnabled(false);
        loan_amortization.setEnabled(false);
        interest_rate_method_label.setEnabled(false);
        interest_rate_method.setEnabled(false);
    }

    private boolean validateFields() {
        if (contract_id.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The contract ID is required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (contract_id.getText().length() != 11) {
            JOptionPane.showMessageDialog(null, "The contract ID is badly formatted!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (start_date.getDate() == null) {
            JOptionPane.showMessageDialog(null, "The start date is required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (settlement_date.getDate() == null) {
            JOptionPane.showMessageDialog(null, "The settlement date is required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (maturity_date.getDate() == null) {
            JOptionPane.showMessageDialog(null, "The maturity date is required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (deal_type.getSelectedItem().toString().equalsIgnoreCase("Select Deal Type")) {
            JOptionPane.showMessageDialog(null, "The deal type field is required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (deal_sub_type.getSelectedItem().toString().equalsIgnoreCase("Select Deal Sub Type")) {
            JOptionPane.showMessageDialog(null, "The deal sub type field is required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (govt_schemes_flag.getSelectedItem().toString().equalsIgnoreCase("Select Y/N")) {
            JOptionPane.showMessageDialog(null, "The deal sub type field is required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (helper.getInterestRateMethodCode(interest_rate_method_template.getSelectedItem().toString()) == -1) {
            JOptionPane.showMessageDialog(null, "The interest rate method field is required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (interest_rate_dr.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The interest rate debit is required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (interest_rate_cr.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The interest rate credit is required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (apr_rate.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The APR rate is required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (contract_application_fee.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The contract application fee is required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (contract_administrative_fee.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The contract administrative fee is required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (other_contract_charges.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The other contract charge is required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (commissions.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The commission is required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (contract_insurance_charges.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The contract insurance charges is required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (insurance_expiry_date.getDate() == null) {
            JOptionPane.showMessageDialog(null, "The insurance expiry date is required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (principal_gl.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The principal GL is required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (interest_gl.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The interest GL field is required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (principal_amount.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The principal amount field is required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (interest_amount.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The interest amount field is required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (helper.getContractStatusCode(contract_status.getSelectedItem().toString()) == -1) {
            JOptionPane.showMessageDialog(null, "The contract status field is required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (epargne_obligatoire.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The contract status is required!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (doesContractLoanExist(contract_id.getText()) == true) {
            JOptionPane.showMessageDialog(null, "The contract loan already exists!", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        } else {
            return true;
        }
    }

    private float calculateTotalInterest(float loanAmount, int loanPeriod, float annualInterestRate, int numberOfPayments, String interestRateMethod) {

        if (interestRateMethod.equalsIgnoreCase("Declining")) {

            float beginningBalance = loanAmount;
            float totalPayment;
            float interest;
            float principal;
            float endingBalance = beginningBalance;
            float monthlyInterestRate = annualInterestRate / 1200;
            float loanOutstandingAmount = loanAmount;
            float interestSum = 0;

            for (int i = 1; i <= numberOfPayments; i++) {

                principal = loanAmount / numberOfPayments;
                interest = loanOutstandingAmount * monthlyInterestRate;
                interestSum += interest;
                totalPayment = principal + interest;
                endingBalance = beginningBalance - principal;
                beginningBalance = endingBalance;
                loanOutstandingAmount = loanOutstandingAmount - principal;
            }
            return Math.round(interestSum);

        } else if (interestRateMethod.equalsIgnoreCase("Flat")) {
            float totalFlatInterest = loanAmount * (loanPeriod / 12) * (annualInterestRate / 100);
            return totalFlatInterest;
        } else {
            JOptionPane.showMessageDialog(null, "Choose Either Declining or Flat!", "Error", JOptionPane.ERROR_MESSAGE);
            return 0;
        }
    }

    private void saveIntoLoanTable() {
        try {
 
            total_amount_due = Float.parseFloat(principal_amount.getText()) + Float.parseFloat(interest_amount.getText());
            String sql = "INSERT into loan_table (Contract_ID,Principal,Interest,Principal_Outstanding,Interest_Outstanding,Outstanding_Amount) values(?,?,?,?,?,?)";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, contract_id.getText());
            pst.setFloat(2, Float.parseFloat(principal_amount.getText()));
            pst.setFloat(3, Float.parseFloat(interest_amount.getText()));
            pst.setFloat(4, Float.parseFloat(principal_amount.getText()));
            pst.setFloat(5, Float.parseFloat(interest_amount.getText()));
            pst.setFloat(6, total_amount_due);
            pst.execute();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private void apr_rateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apr_rateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_apr_rateActionPerformed

    private void principal_glActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_principal_glActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_principal_glActionPerformed

    private void save_contractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_contractActionPerformed
        // TODO add your handling code here:

        if (validateFields() != true) {
        } else {
            saveLoanContract();
            float floatEpargneObligatoire = Float.parseFloat(epargne_obligatoire.getText());
            doesEpargneObligatoireExist(account_number.getText());
            if (doesCustomerHasEpargneObligatoire == false) {
                createEpargneObligatoire(account_number.getText(), floatEpargneObligatoire);
            } else {
                updateEpargneObligatoire(account_number.getText(), floatEpargneObligatoire);
            }
            saveIntoLoanTable();
        }
    }//GEN-LAST:event_save_contractActionPerformed

    private void govt_schemes_flagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_govt_schemes_flagActionPerformed
        // TODO add your handling code here:
        if (govt_schemes_flag.getSelectedItem().toString().equalsIgnoreCase("Y")) {
            govt_schemes_description_label.setEnabled(true);
            govt_schemes_description.setEnabled(true);
        } else {
            govt_schemes_description_label.setEnabled(false);
            govt_schemes_description.setEnabled(false);
        }
    }//GEN-LAST:event_govt_schemes_flagActionPerformed

    private void deal_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deal_typeActionPerformed
        // TODO add your handling code here:

        if (deal_type.getSelectedItem().toString().equalsIgnoreCase("OVRDFT")) {
            deal_sub_type.removeAllItems();
            deal_sub_type.getModel().setSelectedItem("ODLOAN");

        } else if (deal_type.getSelectedItem().toString().equalsIgnoreCase("SECDEP")) {
            deal_sub_type.removeAllItems();
            deal_sub_type.addItem("SHTDEP");
            deal_sub_type.addItem("MEDDEP");
            deal_sub_type.addItem("LNGDEP");

        } else if (deal_type.getSelectedItem().toString().equalsIgnoreCase("MFIBOW")) {
            deal_sub_type.removeAllItems();
            deal_sub_type.getModel().setSelectedItem("MFIBOW");
        } else if (deal_type.getSelectedItem().toString().equalsIgnoreCase("MFILON")) {
            deal_sub_type.removeAllItems();
            deal_sub_type.getModel().setSelectedItem("MFILON");
        } else {
            deal_sub_type.removeAllItems();
            deal_sub_type.getModel().setSelectedItem("Select Sub Deal Type");
        }
    }//GEN-LAST:event_deal_typeActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancelActionPerformed

    private void loan_amortizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loan_amortizationActionPerformed
        // TODO add your handling code here:

        if (contract_id.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The contract ID field is required", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (loan_amount.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The loan amount field is required", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (annual_interest_rate.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The annual interest rate  field is required", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (loan_period.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The loan period in months field is required", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (number_of_payments.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The number of payments field is required", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (start_date_of_loan.getDate() == null) {
            JOptionPane.showMessageDialog(null, "The start date loan is required!", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (contract_id.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The Contract ID field is required", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            float loanAmount = Float.parseFloat(loan_amount.getText());
            float annualInterestRate = Float.parseFloat(annual_interest_rate.getText());
            int loanPeriod = Integer.parseInt(loan_period.getText());
            int numberOfPayments = Integer.parseInt(loan_period.getText());
            Date startDate = start_date_of_loan.getDate();
            String interestRateMethod = interest_rate_method.getSelectedItem().toString();
            new LoanAmortizationSchedule(contract_id.getText(), loanAmount, loanPeriod, numberOfPayments, annualInterestRate, startDate, interestRateMethod).setVisible(true);
            disableLoanAmortizationFields();
            enableContractInformationFields();
        }
    }//GEN-LAST:event_loan_amortizationActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        // TODO add your handling code here:
        if (loan_amount.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The loan amount field is required", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (annual_interest_rate.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The annual interest field is required", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (loan_period.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The loan period field is required", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (number_of_payments.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "The number of payments field is required", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (start_date_of_loan.getDate() == null) {
            JOptionPane.showMessageDialog(null, "The Start date of loan field is required", "Error", JOptionPane.ERROR_MESSAGE);
        } else {

            float loanAmount = Float.parseFloat(loan_amount.getText());
            int loanPeriod = Integer.parseInt(loan_period.getText());
            float annualInterestRate = Float.parseFloat(annual_interest_rate.getText());
            int numberOfPayments = Integer.parseInt(loan_period.getText());
            String interestRateMethod = interest_rate_method.getSelectedItem().toString().trim();
            System.out.println(interestRateMethod + " with length" + interestRateMethod.length());

            float totalInterest = calculateTotalInterest(loanAmount, loanPeriod, annualInterestRate, numberOfPayments, interestRateMethod);

            //float totalFlatInterest = loanAmount * (loanPeriod / 12) * (annualInterestRate / 100);
            float contractApplicationFee = Float.parseFloat(loan_amount.getText()) / 100;
            float commissionCharges = Float.parseFloat(loan_amount.getText()) * 2 / 100;
            epargneObligatoire = Float.parseFloat(loan_amount.getText()) * 10 / 100;
            float emiAmount = (loanAmount * (loanPeriod / 12) * (annualInterestRate / 100)) / numberOfPayments;

            contract_application_fee.setText(String.valueOf(contractApplicationFee));
            commissions.setText(String.valueOf(commissionCharges));
            epargne_obligatoire.setText(String.valueOf(epargneObligatoire));
            emi_amount.setText(String.valueOf(emiAmount));
            total_interest.setText(String.valueOf(totalInterest));
            interest_amount.setText(String.valueOf(totalInterest));
            interest_rate_cr.setText(String.valueOf(annualInterestRate));
            principal_amount.setText(String.valueOf(loanAmount));
            interest_rate_method_template.getModel().setSelectedItem(interestRateMethod);

            Calendar startingDateCalendar = toCalendar(start_date_of_loan.getDate());
            start_date.setDate(start_date_of_loan.getDate());
            startingDateCalendar.add(Calendar.MONTH, 1);

            java.util.Date utilDate = startingDateCalendar.getTime();
            settlement_date.setDate(utilDate);

            startingDateCalendar.add(Calendar.MONTH, numberOfPayments - 1);
            java.util.Date utilMaturityDate = startingDateCalendar.getTime();
            maturity_date.setDate(utilMaturityDate);

            loan_amortization.setEnabled(true);
            emi_label.setEnabled(true);
            emi_amount.setEnabled(true);
            total_interest_label.setEnabled(true);
            total_interest.setEnabled(true);
            epargne_obligatoire_label.setEnabled(true);
            epargne_obligatoire.setEnabled(true);
        }

    }//GEN-LAST:event_refreshActionPerformed

    private void customer_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customer_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customer_idActionPerformed

    private void deal_sub_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deal_sub_typeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deal_sub_typeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateContractInformation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateContractInformation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateContractInformation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateContractInformation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateContractInformation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField account_number;
    private javax.swing.JTextField annual_interest_rate;
    private javax.swing.JLabel annual_interest_rate_label;
    private javax.swing.JTextField apr_rate;
    private javax.swing.JLabel apr_rate_label;
    private javax.swing.JButton cancel;
    private javax.swing.JTextField commissions;
    private javax.swing.JLabel commissions_label;
    private javax.swing.JTextField contract_administrative_fee;
    private javax.swing.JLabel contract_administrative_fee_label;
    private javax.swing.JTextField contract_application_fee;
    private javax.swing.JLabel contract_application_fee_label;
    private javax.swing.JFormattedTextField contract_id;
    private javax.swing.JLabel contract_id_label;
    private javax.swing.JTextField contract_insurance_charges;
    private javax.swing.JLabel contract_insurance_charges_label;
    private javax.swing.JComboBox<String> contract_status;
    private javax.swing.JLabel contract_status_label;
    private javax.swing.JComboBox<String> currency;
    private javax.swing.JLabel currency_label;
    private javax.swing.JTextField customer_gender;
    private javax.swing.JFormattedTextField customer_id;
    private javax.swing.JTextField customer_name;
    private javax.swing.JComboBox<String> deal_sub_type;
    private javax.swing.JLabel deal_sub_type_label;
    private javax.swing.JComboBox<String> deal_type;
    private javax.swing.JLabel deal_type_label;
    private javax.swing.JTextField emi_amount;
    private javax.swing.JLabel emi_label;
    private javax.swing.JTextField epargne_obligatoire;
    private javax.swing.JLabel epargne_obligatoire_label;
    private javax.swing.JTextArea govt_schemes_description;
    private javax.swing.JLabel govt_schemes_description_label;
    private javax.swing.JComboBox<String> govt_schemes_flag;
    private javax.swing.JLabel govt_schemes_flag_label;
    private com.toedter.calendar.JDateChooser insurance_expiry_date;
    private javax.swing.JLabel insurance_expiry_date_label;
    private javax.swing.JComboBox<String> insured_flag;
    private javax.swing.JLabel insured_flag_label;
    private javax.swing.JTextField interest_amount;
    private javax.swing.JLabel interest_amount_label;
    private javax.swing.JTextField interest_gl;
    private javax.swing.JLabel interest_gl_label;
    private javax.swing.JTextField interest_rate_cr;
    private javax.swing.JLabel interest_rate_cr_label;
    private javax.swing.JTextField interest_rate_dr;
    private javax.swing.JLabel interest_rate_dr_label;
    private javax.swing.JComboBox<String> interest_rate_method;
    private javax.swing.JLabel interest_rate_method_label;
    private javax.swing.JComboBox<String> interest_rate_method_template;
    private javax.swing.JLabel interest_rate_method_template_label;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton loan_amortization;
    private javax.swing.JTextField loan_amount;
    private javax.swing.JLabel loan_amount_label;
    private javax.swing.JTextField loan_period;
    private javax.swing.JLabel loan_period_label;
    private com.toedter.calendar.JDateChooser maturity_date;
    private javax.swing.JLabel maturity_date_label;
    private javax.swing.JTextField number_of_payments;
    private javax.swing.JLabel number_of_payments_per_year_label;
    private javax.swing.JTextField other_contract_charges;
    private javax.swing.JLabel other_contract_charges_label;
    private javax.swing.JTextField principal_amount;
    private javax.swing.JLabel principal_amount_label;
    private javax.swing.JTextField principal_gl;
    private javax.swing.JLabel principal_gl_label;
    private javax.swing.JButton refresh;
    private javax.swing.JButton save_contract;
    private com.toedter.calendar.JDateChooser settlement_date;
    private javax.swing.JLabel settlement_date_label;
    private com.toedter.calendar.JDateChooser start_date;
    private javax.swing.JLabel start_date_label;
    private com.toedter.calendar.JDateChooser start_date_of_loan;
    private javax.swing.JLabel start_date_of_loan_label;
    private javax.swing.JTextField total_interest;
    private javax.swing.JLabel total_interest_label;
    private javax.swing.JTextField vision_ouc;
    private javax.swing.JTextField vision_sbu;
    // End of variables declaration//GEN-END:variables
}
