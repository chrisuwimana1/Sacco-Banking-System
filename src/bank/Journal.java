/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bank;

import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author didier
 */
public class Journal extends javax.swing.JFrame {

    /**
     * Creates new form Journal
     */
    String acc_no;
    PreparedStatement pst = null;
    ResultSet rs = null;
    DBConnection conn;
    DefaultTableModel model = new DefaultTableModel();
    DecimalFormat formatter = new DecimalFormat("#,###.00");
    Preferences prefs = Preferences.userNodeForPackage(Login.class);
    public Journal() {
        initComponents();
        
        setExtendedState(this.MAXIMIZED_BOTH); 
        
        try {
            conn = new DBConnection();
        } catch (BackingStoreException ex) {
            Logger.getLogger(Transaction.class.getName()).log(Level.SEVERE, null, ex);
        }
        transaction_date.setEnabled(true);
        transaction_date.setDate(new Date());
        
        j_table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        getAllTellers();
        
        try {
            create_jounal();
        } catch (SQLException ex) {
            Logger.getLogger(Journal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(Journal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void getAllTellers() {
        if(prefs.get("title", "").equalsIgnoreCase("Teller")){
            String sql = "Select firstname,lastname from employees where title = 'Teller' and employee_key=?";
            String employeeName = "";
            try {
                pst = conn.connection.prepareStatement(sql);
                pst.setString(1, prefs.get("employee_key", ""));
                rs = pst.executeQuery();
                while (rs.next()) {
                    employeeName = rs.getString("firstname") + " " + rs.getString("lastname");
                    teller.addItem(employeeName);
                }
            } catch (SQLException e1) {
                JOptionPane.showMessageDialog(null, e1);
            }
        }
        else{
            String sql = "Select firstname,lastname from employees where title = 'Teller'";
            String employeeName = "";
            try {
                pst = conn.connection.prepareStatement(sql);
                rs = pst.executeQuery();
                while (rs.next()) {
                    employeeName = rs.getString("firstname") + " " + rs.getString("lastname");
                    teller.addItem(employeeName);
                }
            } catch (SQLException e1) {
                JOptionPane.showMessageDialog(null, e1);
            }
        }
    }
    
    private String getEmployeeKey(String lastName, String firstName) {

        String sql = "Select employee_key from employees where lastname = ? and firstname = ?";
        String employeeKey = "";
        try {
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, lastName);
            pst.setString(2, firstName);
            rs = pst.executeQuery();
            if (rs.next()) {
                employeeKey = rs.getString("employee_key");
            } else {
                JOptionPane.showMessageDialog(null, "No Teller Found!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e1) {
            JOptionPane.showMessageDialog(null, e1);
        }
        return employeeKey;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        go = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        transaction_date = new com.toedter.calendar.JDateChooser();
        date_choice = new javax.swing.JComboBox<>();
        date_label = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        teller = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        j_table = new javax.swing.JTable();
        generate1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Transaction Filter"));

        go.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/Button-Next-icon.png"))); // NOI18N
        go.setText("GO");
        go.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goActionPerformed(evt);
            }
        });

        jLabel2.setText("Date Choice:");

        transaction_date.setEnabled(false);

        date_choice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Specific Date" }));
        date_choice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                date_choiceActionPerformed(evt);
            }
        });

        date_label.setText("Date:");

        jLabel1.setText("Teller");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(date_label)
                    .addComponent(jLabel1))
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(teller, 0, 201, Short.MAX_VALUE)
                    .addComponent(transaction_date, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                    .addComponent(date_choice, 0, 201, Short.MAX_VALUE)
                    .addComponent(go, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(teller, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(date_choice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(date_label, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(transaction_date, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(go)
                .addContainerGap())
        );

        j_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "DESCRIPTION DE L'OPERATION", "REFERENCE", "NON DE MEMBRE DU BENEFICIARE DU FOURNISSEUR", "MEMBER NO", "SOLDE INITIAL", "CAISE", "BANQUE", "CREDIT SAIN ", "CREDIT EN SOUFRANCE", "AUTRES ACTIVE", "DEPOTS A VUE", "DEPOTS OBL. DAT DEP DES AGENCES AUTRES", "SECRETARIAT", "AUTRES PASSIF", "COMPTE DE RESULTAT", "SOLDE FINAL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        j_table.setCellSelectionEnabled(true);
        j_table.setDragEnabled(true);
        j_table.setGridColor(new java.awt.Color(0, 0, 0));
        j_table.setShowGrid(true);
        jScrollPane1.setViewportView(j_table);

        jScrollPane3.setViewportView(jScrollPane1);

        generate1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        generate1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/Generate-tables-icon.png"))); // NOI18N
        generate1.setText("GENERATE");
        generate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generate1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(280, 280, 280)
                        .addComponent(generate1)
                        .addGap(0, 836, Short.MAX_VALUE))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(generate1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void goActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goActionPerformed
        // TODO add your handling code here:
        String dateChoice = (String) date_choice.getSelectedItem();
        if (dateChoice.equalsIgnoreCase("Specific Date")) {
            try {
                create_jounal();
            } catch (SQLException ex) {
                Logger.getLogger(Journal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(Journal.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (dateChoice.equalsIgnoreCase("Date Range")) {
            //populateTransactions(accountNumber);
            
        } else {
            JOptionPane.showMessageDialog(null, "Please pick the date choice Filter!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_goActionPerformed

    private void date_choiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_date_choiceActionPerformed
        // TODO add your handling code here:
        String dateChoice = (String) date_choice.getSelectedItem();
        if (dateChoice.equals("Specific Date")) {
            date_label.setEnabled(true);
            transaction_date.setEnabled(true);
        } else if (dateChoice.equals("Date Range")) {
            date_label.setEnabled(false);
            transaction_date.setEnabled(false);
        }
    }//GEN-LAST:event_date_choiceActionPerformed

    private void generate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generate1ActionPerformed
        exportTable();
    }//GEN-LAST:event_generate1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Journal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Journal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Journal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Journal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Journal().setVisible(true);
            }
        });
    }
    
    private String formatFloat(String s) {
        double stringToDouble = s != null ? Float.parseFloat(s) : 0;
        return String.valueOf(formatter.format(stringToDouble)).equals(".00") ? "" : String.valueOf(formatter.format(stringToDouble));
    }
    
    private void create_jounal() throws SQLException, ParseException{
        
        model.setRowCount(0);
        model.setColumnCount(0);
        String sql = null;
        String employeeName = teller.getSelectedItem().toString();
        String arr[] = employeeName.split(" ", 2);
        String employeeLastName = arr[1];   //the
        String employeeFirstName = arr[0];
        String employeeKey = getEmployeeKey(employeeLastName, employeeFirstName);
        
        java.util.Date specificDate = transaction_date.getDate();
        java.sql.Date specificDateSql = new java.sql.Date(specificDate.getTime());
        String transactionDate = specificDateSql.toString();        
        String transactionDate2 = specificDateSql.toString();

        //on get yestarday closing balance
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-mm-dd", Locale.ENGLISH);
        Date date = sdf.parse(transactionDate2);
        Calendar cal = sdf.getCalendar();
        cal.add(Calendar.DATE, -1);
        
        java.sql.Date specificDateSql2 = new java.sql.Date(cal.getTime().getTime());
        
        sql = "SELECT DISTINCT transactions.transaction_id, transactions.`transaction_amount`, transactions.`transaction_charge`,transactions.`transaction_net_amount`, transactions.`previous_balance`, transactions.`current_balance`, transactions.`transaction_date`, transactions.`transaction_type`, transactions.`transaction_description`, transactions.`Account_Number`, ci.Customer_Name, tb.currentBalance, initd.Initial_Deposit_Amount, ad.amount as adhesion, p.total_amount, transactions.requestee, ep.Amount AS epargne_obligatoire_amount, ep.transaction_type as epargne_obligatoire_type FROM `transactions` "
                + "LEFT JOIN customer_information ci on ci.Account_Number = transactions.Account_Number "
                + "LEFT JOIN teller_balance tb on tb.teller=? AND tb.addedDate=? "
                + "LEFT JOIN initial_deposit initd on initd.Account_Number = transactions.Account_Number AND initd.Initial_Deposit_Date=? "
                + "LEFT JOIN adhesion ad on ad.AccountNumber=transactions.Account_Number and ad.date_added=? LEFT JOIN (SELECT Account_Number as cn, product_date as pd, SUM(amount) total_amount FROM product GROUP BY product.Account_Number) AS p ON p.cn = transactions.Account_Number AND p.pd=?"
                + "LEFT JOIN epargne_obligatoire ep on ep.Account_Number=transactions.Account_Number and ep.last_modified LIKE '"+transactionDate+"'"
                + "where transactions.transaction_date=? and transactions.employee_key = ? ORDER BY transactions.transaction_id";
        pst = conn.connection.prepareStatement(sql);
        
        pst.setString(1, employeeKey);
        pst.setString(2, specificDateSql2.toString());
        pst.setString(3, transactionDate);
        pst.setString(4, transactionDate);
        pst.setString(5, transactionDate);
        pst.setString(6, transactionDate);
        pst.setString(7, employeeKey);
        rs = pst.executeQuery();
        
        j_table.setModel(model);
        
        model.addColumn("DESCRIPTION DE L' OPERATION");
        model.addColumn("REFERENCE");
        model.addColumn("NON DU MEMBRE");
        model.addColumn("MEMBRE NO");        
        model.addColumn("SOLDE INITIAL");
        model.addColumn("CAISE (+)");
        model.addColumn("CAISE (-)");
        model.addColumn("BANQUE (+)");
        model.addColumn("BANQUE (-)");
        model.addColumn("CREDIT SAIN (+)");
        model.addColumn("CREDIT SAIN (-)");
        model.addColumn("CREDIT EN SUFRANCE (+)");
        model.addColumn("CREDIT EN SOUFRANCE (-)");
        model.addColumn("AUTRE ACTIFS");
        model.addColumn("DEPOTS A VUE (+)");
        model.addColumn("DEPOTS A VUE (-)");
        model.addColumn("DEPOTS OBLIG. DAT DEPO DES AGENCES AUTRES (+)");
        model.addColumn("DEPOTS OBLIG. DAT DEPO DES AGENCES AUTRES (-)");
        model.addColumn("SECRETARIAT (PARTS SOC.)");
        model.addColumn("SECREATRIAT (ADHESION)");
        model.addColumn("AUTRES PASSIF");
        model.addColumn("COMPTE DE RESULTAT (CHARGES)");
        model.addColumn("COMPTE DE RESULTAT (PRODUITS)");
        model.addColumn("SOLDE FINAL");
        
        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getString("transaction_date"), 
                rs.getString("transaction_id"),
                rs.getString("transaction_description").equalsIgnoreCase("EXPENSE") ? rs.getString("requestee") : rs.getString("customer_name"),
                !rs.getString("account_number").equalsIgnoreCase("saccokacyiru") ? rs.getString("account_number") : "",
                rs.getFloat("currentBalance"),
                rs.getString("transaction_type").equalsIgnoreCase("Deposit") || rs.getString("transaction_type").equalsIgnoreCase("BANK") || rs.getString("transaction_type").equalsIgnoreCase("OTHER_ASSET") ? formatFloat(rs.getString("transaction_amount")) : "",
                rs.getString("transaction_type").equalsIgnoreCase("Withdraw") || rs.getString("transaction_type").equalsIgnoreCase("OTHER_LIABLITY") ? formatFloat(rs.getString("transaction_amount")) : "",
                rs.getString("transaction_type").equalsIgnoreCase("CAISETOBANK") ? formatFloat(rs.getString("transaction_amount")) : rs.getString("transaction_description").equalsIgnoreCase("BANK DEPOSIT") ? formatFloat(rs.getString("transaction_amount")) :"",                
                rs.getString("transaction_type").equalsIgnoreCase("BANK") ? formatFloat(rs.getString("transaction_amount")) : rs.getString("transaction_description").equalsIgnoreCase("BANK WITHDRAW") ? formatFloat(rs.getString("transaction_amount")) : "",
                "",
                "",
                "",
                "",
                rs.getString("transaction_type").equalsIgnoreCase("OTHER_ASSET") ? formatFloat(rs.getString("transaction_amount")) : "",
                rs.getString("transaction_type").equalsIgnoreCase("Deposit") && !rs.getString("transaction_description").equalsIgnoreCase("OTHER") ? formatFloat(rs.getString("transaction_amount")) : "",
                rs.getString("transaction_type").equalsIgnoreCase("Withdraw") && !rs.getString("transaction_description").equalsIgnoreCase("EXPENSE") ? formatFloat(rs.getString("transaction_amount")) : "",
                rs.getString("epargne_obligatoire_type") != null && rs.getString("epargne_obligatoire_type").equalsIgnoreCase("Deposit") && rs.getString("epargne_obligatoire_amount") != null ? rs.getString("epargne_obligatoire_amount") : "" ,
                rs.getString("epargne_obligatoire_type") != null && rs.getString("epargne_obligatoire_type").equalsIgnoreCase("Withdraw") && rs.getString("epargne_obligatoire_amount") != null ? rs.getString("epargne_obligatoire_amount") : "",
                formatFloat(rs.getString("Initial_Deposit_Amount")),
                formatFloat(rs.getString("adhesion")),
                rs.getString("transaction_type").equalsIgnoreCase("OTHER_LIABLITY") ? formatFloat(rs.getString("transaction_amount")) : "",
                formatFloat(rs.getString("transaction_charge")),
                formatFloat(rs.getString("total_amount")),
                (
                        rs.getString("transaction_type").equalsIgnoreCase("Deposit") ? 
                                Float.parseFloat(rs.getString("transaction_amount")) : 0) - Float.parseFloat(rs.getString("transaction_charge")) + (rs.getString("transaction_type").equalsIgnoreCase("Withdraw") ? Float.parseFloat(rs.getString("transaction_amount")) : 0),

            });
        }
    }
    
    
    public void exportTable() {
        java.util.Date specificDate = transaction_date.getDate();
        java.sql.Date specificDateSql = new java.sql.Date(specificDate.getTime());
           try {
            String fileName = "Sacco/";
            String directoryName = FileSystemView.getFileSystemView().getDefaultDirectory().getPath()+"/Documents/".concat(fileName);
            File dir = new File(directoryName);
             if (!dir.exists()) dir.mkdirs();
            
            ExcelExporter exp = new ExcelExporter();
            exp.exportTable(j_table, new File(directoryName+specificDateSql+"_JOURNAL.xls"));
            
            //OPEN FILE
            File tmpDir = new File(directoryName+specificDateSql+"_JOURNAL.xls");
            boolean exists = tmpDir.exists();
              if (exists) {
                  Desktop dt = Desktop.getDesktop();
                  dt.open(new File(directoryName+specificDateSql+"_JOURNAL.xls"));
              }
          } catch (IOException ex) {
            Logger.getLogger(Transaction.class.getName()).log(Level.SEVERE, null, ex);
          }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> date_choice;
    private javax.swing.JLabel date_label;
    private javax.swing.JButton generate1;
    private javax.swing.JButton go;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable j_table;
    private javax.swing.JComboBox<String> teller;
    private com.toedter.calendar.JDateChooser transaction_date;
    // End of variables declaration//GEN-END:variables
    
    private float calculateProductByDate(String date, String account_number){
        String sql = "SELECT `amount` FROM `product` WHERE product_date = ? AND Account_Number=?";
        
        double total = 0;
   
        try {
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, date);
            pst.setString(2, account_number);
            rs = pst.executeQuery();
            while (rs.next()) {
                total+= rs.getDouble("amount");
            }

        } catch (SQLException e1) {
            JOptionPane.showMessageDialog(null, e1);
           
        }
        
        return (float) total;
    }
}
