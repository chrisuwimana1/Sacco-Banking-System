/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bank;

/**
 *
 * @author chris
 */
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;

public class Template_Account_Information extends javax.swing.JFrame {

    /**
     * Creates new form Template_Account_Information
     */
    String acc_no;
    PreparedStatement pst = null;
    ResultSet rs = null;
    DBConnection conn;
    DefaultTableModel model = new DefaultTableModel();
    String input_date;

    public Template_Account_Information() {
        initComponents();
        conn = new DBConnection();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        account_information = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        to_opening_date = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        from_opening_date = new com.toedter.calendar.JDateChooser();
        date_choice = new javax.swing.JComboBox<>();
        date_last_modified = new com.toedter.calendar.JDateChooser();
        date_range_label = new javax.swing.JLabel();
        date_label = new javax.swing.JLabel();
        to_label = new javax.swing.JLabel();
        generate1 = new javax.swing.JButton();
        export = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        account_information.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Country", "LE_Book", "Account_No", "Account_Name", "Vision_OUC", "Vision_SBU", "Account_Status", "Account_Status_Date", "Customer_ID", "Currency", "Vision_GL", "Account_Type", "Account_Open_Date", "Account_Closing_Date", "Freeze_Status", "Int_Rate_Dr", "Int_Rate_Cr", "Economic_Sub_Sector_Code", "Economic_Sub_Sector_Code_ISIC", "Public_Sector_Code", "Institutional_Sector_Code", "Last_Transaction_Date", "Account_Ownership", "Joint_Participant_Count", "Card_Subscription", "Performance_Class", "Credit_Category", "Merchant_Id", "Date_Last_Modified"
            }
        ));
        jScrollPane1.setViewportView(account_information);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 4377, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(123, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Account Info Template Filter"));

        to_opening_date.setEnabled(false);

        jLabel3.setText("Date Choice:");

        from_opening_date.setEnabled(false);

        date_choice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Date Last Modified", "Account Opening Date" }));
        date_choice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                date_choiceActionPerformed(evt);
            }
        });

        date_range_label.setText("Date Range:");

        date_label.setText("Date:");

        to_label.setText("To");
        to_label.setEnabled(false);

        generate1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        generate1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/Generate-tables-icon.png"))); // NOI18N
        generate1.setText("GENERATE");
        generate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generate1ActionPerformed(evt);
            }
        });

        export.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        export.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/Export-To-File-icon.png"))); // NOI18N
        export.setText("EXPORT");
        export.setEnabled(false);
        export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(date_label)
                                    .addComponent(date_range_label))
                                .addGap(40, 40, 40)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(from_opening_date, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(to_label)
                                        .addGap(16, 16, 16)
                                        .addComponent(to_opening_date, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(date_last_modified, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(38, 38, 38)
                                .addComponent(date_choice, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(277, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(generate1)
                        .addGap(18, 18, 18)
                        .addComponent(export)
                        .addGap(142, 142, 142))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(date_choice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(date_label, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(date_last_modified, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(date_range_label)
                    .addComponent(to_opening_date, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(from_opening_date, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(to_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generate1)
                    .addComponent(export))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 987, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateTemplateByDateLastModified() {
        //String sql = "SELECT DATE_FORMAT(Account_Open_Date, '%d-%b-%Y') AS Account_Open_Date,DATE_FORMAT(Last_Transaction_Date, '%d-%b-%Y') AS Last_Transaction_Date, DATE_FORMAT(Account_Status_Date, '%d-%b-%Y') AS Account_Status_Date,`Country`, `LE_Book`, `Account_No`, `Account_Name`, `Vision_OUC`, `Vision_SBU`, `Account_Status`, `Customer_ID`, `Account_Officer`, `Currency`, `Vision_GL`, `Account_Type`, `Account_Open_Date`, `Account_Closing_Date`, `Freeze_Status`, `Int_Rate_Dr`, `Int_Rate_Cr`, `Economic_Sub_Sector_Code`, `Economic_Sub_Sector_Code_ISIC`, `Public_Sector_Code`, `Institutional_Sector_Code`, `Account_Ownership`, `Joint_Participant_Count`, `Card_Subscription`, `Performance_Class`, `Credit_Category`, `Merchant_Id`, DATE_FORMAT(Date_Last_Modified, '%d-%m-%Y %T') AS Date_Last_Modified FROM `account_information` WHERE DATE (Date_Last_Modified) =?";
        if (date_last_modified.getDate() == null) {
            JOptionPane.showMessageDialog(null, "The Date last modified is required for this filter!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            java.util.Date specificDate = date_last_modified.getDate();
            java.sql.Date specificDateSql = new java.sql.Date(specificDate.getTime());
            String inputDate = specificDateSql.toString();
            input_date=inputDate;
            try {
                DefaultTableModel dtm = (DefaultTableModel) account_information.getModel();
                dtm.setRowCount(0);
                dtm.setColumnCount(0);

                String sql = "SELECT DATE_FORMAT(Account_Open_Date, '%d-%b-%Y') AS Account_Open_Date,DATE_FORMAT(Last_Transaction_Date, '%d-%b-%Y') AS Last_Transaction_Date, DATE_FORMAT(Account_Status_Date, '%d-%b-%Y') AS Account_Status_Date,`Country`, `LE_Book`, `Account_No`, `Account_Name`, `Vision_OUC`, `Vision_SBU`, `Account_Status`, `Customer_ID`, `Account_Officer`, `Currency`, `Vision_GL`, `Account_Type`, `Account_Open_Date`, `Account_Closing_Date`, `Freeze_Status`, `Int_Rate_Dr`, `Int_Rate_Cr`, `Economic_Sub_Sector_Code`, `Economic_Sub_Sector_Code_ISIC`, `Public_Sector_Code`, `Institutional_Sector_Code`, `Account_Ownership`, `Joint_Participant_Count`, `Card_Subscription`, `Performance_Class`, `Credit_Category`, `Merchant_Id`, DATE_FORMAT(Date_Last_Modified, '%d-%m-%Y %T') AS Date_Last_Modified FROM `account_information` WHERE DATE (Date_Last_Modified) =?";
                pst = conn.connection.prepareStatement(sql);
                pst.setString(1, inputDate);
                rs = pst.executeQuery();
                //int count = 0;
                account_information.setModel(model);
                model.addColumn("Country");
                model.addColumn("LE_Book");
                model.addColumn("Account_No");
                model.addColumn("Account_Name");
                model.addColumn("Vision_OUC");
                model.addColumn("Vision_SBU");
                model.addColumn("Account_Status");
                model.addColumn("Account_Status_Date");
                model.addColumn("Customer_ID");
                model.addColumn("Account_Officer");
                model.addColumn("Currency");
                model.addColumn("Vision_GL");
                model.addColumn("Account_Type");
                model.addColumn("Account_Open_Date");
                model.addColumn("Account_Closing_Date");
                model.addColumn("Freeze_Status");
                model.addColumn("Int_Rate_Dr");
                model.addColumn("Int_Rate_Cr");
                model.addColumn("Economic_Sub_Sector_Code");
                model.addColumn("Economic_Sub_Sector_Code_ISIC");
                model.addColumn("Public_Sector_Code");
                model.addColumn("Institutional_Sector_Code");
                model.addColumn("Last_Transaction_Date");
                model.addColumn("Account_Ownership");
                model.addColumn("Joint_Participant_Count");
                model.addColumn("Card_Subscription");
                model.addColumn("Performance_Class");
                model.addColumn("Credit_Category");
                model.addColumn("Merchant_Id");
                model.addColumn("Date_Last_Modified");

                while (rs.next()) {

                    model.addRow(new Object[]{rs.getString("Country"), rs.getString("LE_Book"),
                        rs.getString("Account_No"), rs.getString("Account_Name"),
                        rs.getString("Vision_OUC"), rs.getString("Vision_SBU"),
                        rs.getString("Account_Status"), rs.getString("Account_Status_Date"),
                        rs.getString("Customer_ID"), rs.getString("Account_Officer"),
                        rs.getString("Currency"), rs.getString("Vision_GL"),
                        rs.getString("Account_Type"), rs.getString("Account_Open_Date"),
                        rs.getString("Account_Closing_Date"), rs.getString("Freeze_Status"),
                        rs.getString("Int_Rate_Dr"), rs.getString("Int_Rate_Cr"),
                        rs.getString("Economic_Sub_Sector_Code"), rs.getString("Economic_Sub_Sector_Code_ISIC"),
                        rs.getString("Public_Sector_Code"), rs.getString("Institutional_Sector_Code"),
                        rs.getString("Last_Transaction_Date"), rs.getString("Account_Ownership"),
                        rs.getString("Joint_Participant_Count"), rs.getString("Card_Subscription"),
                        rs.getString("Performance_Class"), rs.getString("Credit_Category"),
                        rs.getString("Merchant_Id"), rs.getString("Date_Last_Modified")});
                }
                export.setEnabled(true);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }

    private void generateTemplateByAccountOpeningDate() {

        if (from_opening_date.getDate() == null || to_opening_date.getDate() == null) {
            JOptionPane.showMessageDialog(null, "The start and end dates are required for this filter!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {

            java.util.Date fromDate = from_opening_date.getDate();
            java.util.Date toDate = to_opening_date.getDate();

            java.sql.Date sqlFromDate = new java.sql.Date(fromDate.getTime());
            java.sql.Date sqlToDate = new java.sql.Date(toDate.getTime());
            input_date= sqlFromDate.toString()+"-"+sqlToDate.toString();
            try {
                DefaultTableModel dtm = (DefaultTableModel) account_information.getModel();
                dtm.setRowCount(0);
                dtm.setColumnCount(0);

                String sql = "SELECT DATE_FORMAT(Account_Open_Date, '%d-%b-%Y') AS Account_Open_Date,"
                        + "DATE_FORMAT(Last_Transaction_Date, '%d-%b-%Y') AS Last_Transaction_Date, "
                        + "DATE_FORMAT(Account_Status_Date, '%d-%b-%Y') AS Account_Status_Date,`Country`, "
                        + "`LE_Book`, `Account_No`, `Account_Name`, `Vision_OUC`, `Vision_SBU`, `Account_Status`,"
                        + " `Customer_ID`, `Account_Officer`, `Currency`, `Vision_GL`, `Account_Type`, "
                        + "`Account_Open_Date`, `Account_Closing_Date`, `Freeze_Status`, `Int_Rate_Dr`, "
                        + "`Int_Rate_Cr`, `Economic_Sub_Sector_Code`, `Economic_Sub_Sector_Code_ISIC`, "
                        + "`Public_Sector_Code`, `Institutional_Sector_Code`, `Account_Ownership`, "
                        + "`Joint_Participant_Count`, `Card_Subscription`, `Performance_Class`, "
                        + "`Credit_Category`, `Merchant_Id`, "
                        + "DATE_FORMAT(Date_Last_Modified, '%d-%m-%Y %T') AS Date_Last_Modified "
                        + "FROM `account_information` WHERE `Account_Open_Date` BETWEEN '" + sqlFromDate.toString() + "%' AND '" + sqlToDate.toString() + "%' ORDER BY Account_Open_Date DESC";
                pst = conn.connection.prepareStatement(sql);
                rs = pst.executeQuery();
                //int count = 0;
                account_information.setModel(model);
                model.addColumn("Country");
                model.addColumn("LE_Book");
                model.addColumn("Account_No");
                model.addColumn("Account_Name");
                model.addColumn("Vision_OUC");
                model.addColumn("Vision_SBU");
                model.addColumn("Account_Status");
                model.addColumn("Account_Status_Date");
                model.addColumn("Customer_ID");
                model.addColumn("Account_Officer");
                model.addColumn("Currency");
                model.addColumn("Vision_GL");
                model.addColumn("Account_Type");
                model.addColumn("Account_Open_Date");
                model.addColumn("Account_Closing_Date");
                model.addColumn("Freeze_Status");
                model.addColumn("Int_Rate_Dr");
                model.addColumn("Int_Rate_Cr");
                model.addColumn("Economic_Sub_Sector_Code");
                model.addColumn("Economic_Sub_Sector_Code_ISIC");
                model.addColumn("Public_Sector_Code");
                model.addColumn("Institutional_Sector_Code");
                model.addColumn("Last_Transaction_Date");
                model.addColumn("Account_Ownership");
                model.addColumn("Joint_Participant_Count");
                model.addColumn("Card_Subscription");
                model.addColumn("Performance_Class");
                model.addColumn("Credit_Category");
                model.addColumn("Merchant_Id");
                model.addColumn("Date_Last_Modified");
                while (rs.next()) {
                    //
                    model.addRow(new Object[]{rs.getString("Country"), rs.getString("LE_Book"),
                        rs.getString("Account_No"), rs.getString("Account_Name"),
                        rs.getString("Vision_OUC"), rs.getString("Vision_SBU"),
                        rs.getString("Account_Status"), rs.getString("Account_Status_Date"),
                        rs.getString("Customer_ID"), rs.getString("Account_Officer"),
                        rs.getString("Currency"), rs.getString("Vision_GL"),
                        rs.getString("Account_Type"), rs.getString("Account_Open_Date"),
                        rs.getString("Account_Closing_Date"), rs.getString("Freeze_Status"),
                        rs.getString("Int_Rate_Dr"), rs.getString("Int_Rate_Cr"),
                        rs.getString("Economic_Sub_Sector_Code"), rs.getString("Economic_Sub_Sector_Code_ISIC"),
                        rs.getString("Public_Sector_Code"), rs.getString("Institutional_Sector_Code"),
                        rs.getString("Last_Transaction_Date"), rs.getString("Account_Ownership"),
                        rs.getString("Joint_Participant_Count"), rs.getString("Card_Subscription"),
                        rs.getString("Performance_Class"), rs.getString("Credit_Category"),
                        rs.getString("Merchant_Id"), rs.getString("Date_Last_Modified")});
                }
                export.setEnabled(true);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }

    public void exportTable() {

        SXSSFWorkbook wb = new SXSSFWorkbook(-1);
        SXSSFSheet sh = wb.createSheet("Report");
        Row row = sh.createRow(0);
        for (int i = 0; i < model.getColumnCount(); i++) {
            Cell cell = row.createCell(i);
            cell.setCellValue(model.getColumnName(i));
        }

        for (int i = 0; i < model.getRowCount(); i++) {
            row = sh.createRow(i + 1);
            for (int j = 0; j < model.getColumnCount(); j++) {
                Cell cell = row.createCell(j);
                if (model.getValueAt(i, j) != null) {
                    cell.setCellValue(model.getValueAt(i, j).toString());
                } else {
                    cell.setCellValue("");
                }
            }
        }

        try {
            String fileName = "Sacco/";
            String directoryName = FileSystemView.getFileSystemView().getDefaultDirectory().getPath() + "/".concat(fileName);
            File dir = new File(directoryName);
            if (!dir.exists()) {
                dir.mkdirs();
            }

            FileOutputStream excel = new FileOutputStream(directoryName + input_date + "_ACCT.xlsx");
            wb.write(excel);
            excel.flush();
            excel.close();
            JOptionPane.showMessageDialog(null, "The template was successfuly saved!");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Template_Account_Information.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Template_Account_Information.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    private void date_choiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_date_choiceActionPerformed

        String dateChoice = (String) date_choice.getSelectedItem();
        if (dateChoice.equals("Date Last Modified")) {
            date_label.setEnabled(true);
            date_last_modified.setEnabled(true);
            date_range_label.setEnabled(false);
            from_opening_date.setEnabled(false);
            to_opening_date.setEnabled(false);
            to_label.setEnabled(false);
        } else if (dateChoice.equals("Account Opening Date")) {
            date_label.setEnabled(false);
            date_last_modified.setEnabled(false);
            date_range_label.setEnabled(true);
            from_opening_date.setEnabled(true);
            to_opening_date.setEnabled(true);
            to_label.setEnabled(true);
        }
    }//GEN-LAST:event_date_choiceActionPerformed

    private void generate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generate1ActionPerformed

        //Date Last Modified
        String dateChoice = (String) date_choice.getSelectedItem();
        //java.sql.Timestamp date = new java.sql.Timestamp(new java.util.Date().getTime());

        if (dateChoice.equalsIgnoreCase("Date Last Modified")) {
            generateTemplateByDateLastModified();
        } else {
            generateTemplateByAccountOpeningDate();
        }
        /*
        if (specific_date.getDate() == null) {
            JOptionPane.showMessageDialog(null, "The specific date is required for this filter!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            java.util.Date specificDate = specific_date.getDate();
            java.sql.Date specificDateSql = new java.sql.Date(specificDate.getTime());
            String inputDate = specificDateSql.toString();

            input_date = inputDate;
            generateTemplate(inputDate);
         */

    }//GEN-LAST:event_generate1ActionPerformed

    private void exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportActionPerformed
        // TODO add your handling code here:
        int dialogResult = JOptionPane.showConfirmDialog(null, "Would you like to export this document?");
        if (dialogResult == JOptionPane.YES_OPTION) {
            exportTable();
        }
    }//GEN-LAST:event_exportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Template_Account_Information.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Template_Account_Information.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Template_Account_Information.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Template_Account_Information.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Template_Account_Information().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable account_information;
    private javax.swing.JComboBox<String> date_choice;
    private javax.swing.JLabel date_label;
    private com.toedter.calendar.JDateChooser date_last_modified;
    private javax.swing.JLabel date_range_label;
    private javax.swing.JButton export;
    private com.toedter.calendar.JDateChooser from_opening_date;
    private javax.swing.JButton generate1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel to_label;
    private com.toedter.calendar.JDateChooser to_opening_date;
    // End of variables declaration//GEN-END:variables
}
