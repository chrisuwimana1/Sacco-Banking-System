/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bank;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author limitlessapps
 */
public class TellerBalance extends javax.swing.JFrame {

    /**
     * Creates new form TellerBalance
     */
    PreparedStatement pst = null;
    ResultSet rs = null;
    DBConnection conn;
    DefaultTableModel model = new DefaultTableModel();
    DecimalFormat formatter = new DecimalFormat("#,###.00");
    String fullname;
    Preferences prefs = Preferences.userNodeForPackage(Login.class);
    
    public TellerBalance() {
        initComponents();
        
        try {
            conn = new DBConnection();
        } catch (BackingStoreException ex) {
            Logger.getLogger(TellerReports.class.getName()).log(Level.SEVERE, null, ex);
        }
        getAllTellers();
        
        //added by
        fullname=prefs.get("firstname", "")+" "+prefs.get("lastname", "");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        to_label = new javax.swing.JLabel();
        go = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        transaction_date = new com.toedter.calendar.JDateChooser();
        date_choice = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        date_range_label = new javax.swing.JLabel();
        date_label = new javax.swing.JLabel();
        from_transaction_date = new com.toedter.calendar.JDateChooser();
        to_transaction_date = new com.toedter.calendar.JDateChooser();
        teller = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        total_w_d = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_of_teller_balance = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "Balance Filter"));

        to_label.setText("To");
        to_label.setEnabled(false);

        go.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/Button-Next-icon.png"))); // NOI18N
        go.setText("GO");
        go.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goActionPerformed(evt);
            }
        });

        jLabel2.setText("Date Choice:");

        transaction_date.setEnabled(false);

        date_choice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select One", "Specific Date", "Date Range" }));
        date_choice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                date_choiceActionPerformed(evt);
            }
        });

        jLabel1.setText("Teller:");

        date_range_label.setText("Date Range:");

        date_label.setText("Date:");

        from_transaction_date.setEnabled(false);

        to_transaction_date.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(317, 317, 317)
                        .addComponent(to_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addComponent(to_transaction_date, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(date_label)
                            .addComponent(date_range_label))
                        .addGap(66, 66, 66)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(date_choice, 0, 201, Short.MAX_VALUE)
                            .addComponent(transaction_date, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                            .addComponent(from_transaction_date, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(teller, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(go, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(teller, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(date_choice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(date_label, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(transaction_date, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(date_range_label, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(to_transaction_date, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(to_label, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(from_transaction_date, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(go)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "TOTAL"));

        total_w_d.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        total_w_d.setText("00000.00");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(jLabel11)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(total_w_d)
                .addGap(167, 167, 167))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(total_w_d)
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        list_of_teller_balance.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Teller", "Starting Balance", "Added By", "Added Date", "New Balance", "Updated Date", "Current Balance"
            }
        ));
        jScrollPane1.setViewportView(list_of_teller_balance);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bank/images/add-icon.png"))); // NOI18N
        jButton1.setText("Add Starting Ballance");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel12))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(jButton1)))
                .addContainerGap(116, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jButton1)
                .addGap(28, 28, 28)
                .addComponent(jLabel12)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void goActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goActionPerformed
        // TODO add your handling code here:
        String employeeName = teller.getSelectedItem().toString();
        String arr[] = employeeName.split(" ", 2);
        String employeeLastName = arr[1];   //the
        String employeeFirstName = arr[0];

        String employeeKey = getEmployeeKey(employeeLastName, employeeFirstName);

        String dateChoice = (String) date_choice.getSelectedItem();
        java.sql.Timestamp date = new java.sql.Timestamp(new java.util.Date().getTime());

        if (dateChoice.equalsIgnoreCase("Specific Date")) {
            try {
                filterData(employeeKey);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        } else if (dateChoice.equalsIgnoreCase("Date Range")) {
            try {
                filterDatabyDate(employeeKey);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please pick the date choice Filter!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_goActionPerformed
    private String formatFloat(String s) {
        double stringToDouble = Float.parseFloat(s);
        return String.valueOf(formatter.format(stringToDouble));
    }
    private void getAllTellers() {
        String sql = "Select firstname,lastname from employees where title = 'Teller'";
        String employeeName = "";
        try {
            pst = conn.connection.prepareStatement(sql);
            rs = pst.executeQuery();
            while (rs.next()) {
                employeeName = rs.getString("firstname") + " " + rs.getString("lastname");
                teller.addItem(employeeName);
            }
        } catch (SQLException e1) {
            JOptionPane.showMessageDialog(null, e1);
        }
    }

    private String getEmployeeKey(String lastName, String firstName) {

        String sql = "Select employee_key from employees where lastname = ? and firstname = ?";
        String employeeKey = "";
        try {
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, lastName);
            pst.setString(2, firstName);
            rs = pst.executeQuery();
            if (rs.next()) {
                employeeKey = rs.getString("employee_key");
            } else {
                JOptionPane.showMessageDialog(null, "No Teller Found!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e1) {
            JOptionPane.showMessageDialog(null, e1);
        }
        return employeeKey;
    }

    private void filterData(String employeeKey) throws ParseException {

        if (transaction_date.getDate() == null) {
            try {
                DefaultTableModel dtm = (DefaultTableModel) list_of_teller_balance.getModel();
                dtm.setRowCount(0);
                dtm.setColumnCount(0);
                String sql = null;

                sql = "SELECT e.firstname, e.lastname, `StartingBalance`, `addedBy`, `addedDate`, `newBalance`, `updatedDate`, `currentBalance` FROM `teller_balance` INNER JOIN employees e on e.employee_key = teller_balance.teller WHERE teller_balance.teller = ? ORDER BY addedDate DESC";
                    pst = conn.connection.prepareStatement(sql);
                    pst.setString(1, employeeKey);
                    rs = pst.executeQuery();
                    list_of_teller_balance.setModel(model);
                    
                    model.addColumn("Teller");
                    model.addColumn("Starting Balance");
                    model.addColumn("Added By");
                    model.addColumn("Added Date");
                    model.addColumn("New Balance");
                    model.addColumn("Updated Date");
                    model.addColumn("Current Balance");
                    double totalBalances = 0.0;

                    while (rs.next()) {
                        
                        totalBalances += Double.parseDouble(rs.getString("currentBalance"));

                        model.addRow(new Object[]{
                            rs.getString("firstname") + " "+rs.getString("lastname"), 
                            formatFloat(rs.getString("StartingBalance")),
                            rs.getString("addedBy"), 
                            rs.getString("addedDate"),
                            formatFloat(rs.getString("newBalance")), 
                            rs.getString("updatedDate"),
                            formatFloat(rs.getString("currentBalance")),
                        });
                    }
                    total_w_d.setText(formatFloat((totalBalances)+""));
                    
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        } else {
            java.util.Date specificDate = transaction_date.getDate();
            java.sql.Date specificDateSql = new java.sql.Date(specificDate.getTime());
            String transactionDate = specificDateSql.toString();

            try {
                DefaultTableModel dtm = (DefaultTableModel) list_of_teller_balance.getModel();
                dtm.setRowCount(0);
                dtm.setColumnCount(0);
                String sql = null;

                sql = "SELECT e.firstname, e.lastname, `StartingBalance`, `addedBy`, `addedDate`, `newBalance`, `updatedDate`, `currentBalance` FROM `teller_balance` INNER JOIN employees e on e.employee_key = teller_balance.teller WHERE teller_balance.teller = ? and addedDate LIKE  ? ORDER BY addedDate DESC";
                    pst = conn.connection.prepareStatement(sql);
                    pst.setString(1, employeeKey);
                    pst.setString(2, transactionDate);
                    rs = pst.executeQuery();
                    list_of_teller_balance.setModel(model);
                    
                    model.addColumn("Teller");
                    model.addColumn("Starting Balance");
                    model.addColumn("Added By");
                    model.addColumn("Added Date");
                    model.addColumn("New Balance");
                    model.addColumn("Updated Date");
                    model.addColumn("Current Balance");
                    double totalBalances = 0.0;

                    while (rs.next()) {
                        
                        totalBalances += Double.parseDouble(rs.getString("currentBalance"));

                        model.addRow(new Object[]{
                            rs.getString("firstname") + " "+rs.getString("lastname"), 
                            formatFloat(rs.getString("StartingBalance")),
                            rs.getString("addedBy"), 
                            rs.getString("addedDate"),
                            formatFloat(rs.getString("newBalance")), 
                            rs.getString("updatedDate"),
                            formatFloat(rs.getString("currentBalance")),
                        });
                    }
                    total_w_d.setText(formatFloat((totalBalances)+""));
                    
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }

    private void filterDatabyDate(String employeeKey) throws ParseException {
        if (from_transaction_date.getDate() == null || to_transaction_date.getDate() == null) {
            JOptionPane.showMessageDialog(null, "The start and end dates are required for this filter!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            java.util.Date fromDate = from_transaction_date.getDate();
            java.util.Date toDate = to_transaction_date.getDate();

            java.sql.Date sqlFromDate = new java.sql.Date(fromDate.getTime());
            java.sql.Date sqlToDate = new java.sql.Date(toDate.getTime());
            String sql = null;

            try {
                DefaultTableModel dtm = (DefaultTableModel) list_of_teller_balance.getModel();
                dtm.setRowCount(0);
                dtm.setColumnCount(0);
                
                sql = "SELECT e.firstname, e.lastname, `StartingBalance`, `addedBy`, `addedDate`, `newBalance`, `updatedDate`, `currentBalance` FROM `teller_balance` INNER JOIN employees e on e.employee_key = teller_balance.teller WHERE teller_balance.teller = ? and addedDate BETWEEN '" + sqlFromDate.toString() + "%' AND '" + sqlToDate.toString() + "%' ORDER BY addedDate DESC";
                    pst = conn.connection.prepareStatement(sql);
                    pst.setString(1, employeeKey);
                    rs = pst.executeQuery();
                    list_of_teller_balance.setModel(model);
                    
                    model.addColumn("Teller");
                    model.addColumn("Starting Balance");
                    model.addColumn("Added By");
                    model.addColumn("Added Date");
                    model.addColumn("New Balance");
                    model.addColumn("Updated Date");
                    model.addColumn("Current Balance");
                    double totalBalances = 0.0;

                    while (rs.next()) {
                        
                        totalBalances += Double.parseDouble(rs.getString("currentBalance"));

                        model.addRow(new Object[]{
                            rs.getString("firstname") + " "+rs.getString("lastname"), 
                            formatFloat(rs.getString("StartingBalance")),
                            rs.getString("addedBy"), 
                            rs.getString("addedDate"),
                            formatFloat(rs.getString("newBalance")), 
                            rs.getString("updatedDate"),
                            formatFloat(rs.getString("currentBalance")),
                        });
                    }
                    total_w_d.setText(formatFloat((totalBalances)+""));
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }
    private void date_choiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_date_choiceActionPerformed
        // TODO add your handling code here:
        String dateChoice = (String) date_choice.getSelectedItem();
        if (dateChoice.equals("Specific Date")) {
            date_label.setEnabled(true);
            transaction_date.setEnabled(true);
            date_range_label.setEnabled(false);
            from_transaction_date.setEnabled(false);
            to_transaction_date.setEnabled(false);
            to_label.setEnabled(false);
        } else if (dateChoice.equals("Date Range")) {
            date_label.setEnabled(false);
            transaction_date.setEnabled(false);
            date_range_label.setEnabled(true);
            from_transaction_date.setEnabled(true);
            to_transaction_date.setEnabled(true);
            to_label.setEnabled(true);
        }
    }//GEN-LAST:event_date_choiceActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         new CreateNewStartingBalance().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TellerBalance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TellerBalance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TellerBalance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TellerBalance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TellerBalance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> date_choice;
    private javax.swing.JLabel date_label;
    private javax.swing.JLabel date_range_label;
    private com.toedter.calendar.JDateChooser from_transaction_date;
    private javax.swing.JButton go;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable list_of_teller_balance;
    private javax.swing.JComboBox<String> teller;
    private javax.swing.JLabel to_label;
    private com.toedter.calendar.JDateChooser to_transaction_date;
    private javax.swing.JLabel total_w_d;
    private com.toedter.calendar.JDateChooser transaction_date;
    // End of variables declaration//GEN-END:variables
}
