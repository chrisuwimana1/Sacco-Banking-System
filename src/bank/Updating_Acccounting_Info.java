/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bank;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class Updating_Acccounting_Info extends javax.swing.JFrame {

    /**
     * Creates new form Updating
     */
    PreparedStatement pst = null;
    ResultSet rs = null;
    DBConnection conn;
    DefaultTableModel model = new DefaultTableModel();

    public Updating_Acccounting_Info() {
        initComponents();
        conn = new DBConnection();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        update = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        customer_name = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        account_number = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        customer_id = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        to_date = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        from_date = new com.toedter.calendar.JDateChooser();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        all_accounts = new javax.swing.JTable();
        search_accounts = new javax.swing.JButton();
        update_accounts = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        jLabel1.setText("Customer_Name:");

        jLabel2.setText("Account Number:");

        account_number.setText("310-1400-10");

        jLabel3.setText("Customer ID:");

        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        jTextField1.setText("000000");

        jLabel4.setText("Date Range:");

        jLabel5.setText("to");

        all_accounts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Country", "LE_Book", "Customer_ID", "Account_Number", "Customer_Name", "Vision_OUC", "Vision_SBU", "Vision_SBU_Full", "Customer_Open_Date"
            }
        ));
        jScrollPane2.setViewportView(all_accounts);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        search_accounts.setText("Search accounts");
        search_accounts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_accountsActionPerformed(evt);
            }
        });

        update_accounts.setText("Update Accounts");
        update_accounts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_accountsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(account_number, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(120, 120, 120)
                        .addComponent(search))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(customer_id, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(customer_name, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(105, 105, 105)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(64, 64, 64)
                                .addComponent(update))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(from_date, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(to_date, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(search_accounts)))))
                .addContainerGap(53, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(update_accounts)
                .addGap(103, 103, 103))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(account_number, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(search))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(customer_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(to_date, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(customer_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(update))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addComponent(from_date, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(search_accounts))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)))
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(update_accounts)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchAccount(String accountNumber) {

        try {
            String sql = "select Account_No, Customer_ID, Customer_Name from customer_information where Account_No = ?";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, accountNumber);
            rs = pst.executeQuery();

            if (rs.next()) {
                customer_id.setText(rs.getString("Customer_ID"));
                customer_name.setText(rs.getString("Customer_Name"));
            }
        } catch (NumberFormatException | SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void updateAccountInfo(String customerName) {

        if (customer_id.getText().trim().length() != 10) {
            JOptionPane.showMessageDialog(null, "Sorry customer ID badly formatted!", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (account_number.getText().trim().length() != 12) {
            JOptionPane.showMessageDialog(null, "Sorry the account number is incomplete!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                String sql = "update account_information set Account_Number =?, Account_No =?, Customer_ID=? where Account_Name=? ";
                pst = conn.connection.prepareStatement(sql);
                pst.setString(1, account_number.getText());
                pst.setString(2, customer_id.getText());
                pst.setString(3, customer_id.getText());
                pst.setString(4, customerName);
                int update = pst.executeUpdate();
                if (update > 0) {
                    JOptionPane.showMessageDialog(null, "Customer Info has been Updated!");;
                }
            } catch (NumberFormatException | SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }

    private void searchAccounts() {
        java.util.Date fromDate = from_date.getDate();
        java.sql.Date sqlFromDate = new java.sql.Date(fromDate.getTime());

        java.util.Date toDate = to_date.getDate();
        java.sql.Date sqlToDate = new java.sql.Date(toDate.getTime());

        try {
            DefaultTableModel dtm = (DefaultTableModel) all_accounts.getModel();
            dtm.setRowCount(0);
            dtm.setColumnCount(0);
            String sql = "SELECT `Country`, `LE_Book`, `Customer_ID`, `Account_Number`, `Customer_Name`,`Vision_OUC`, `Vision_SBU`, `Customer_Open_Date`,`Vision_SBU_Full` from customer_information where Customer_Open_Date between ? and ? and (Account_Number NOT IN (SELECT Account_Number FROM account_information))";
            pst = conn.connection.prepareStatement(sql);
            pst.setString(1, sqlFromDate.toString());
            pst.setString(2, sqlToDate.toString());
            rs = pst.executeQuery();
            all_accounts.setModel(model);
            model.addColumn("Country");
            model.addColumn("LE_Book");
            model.addColumn("Customer_ID");
            model.addColumn("Account_Number");
            model.addColumn("Customer_Name");
            model.addColumn("Vision_OUC");
            model.addColumn("Vision_SBU");
            model.addColumn("Vision_SBU_Full");
            model.addColumn("Customer_Open_Date");
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString("Country"), (rs.getString("LE_Book")),
                    (rs.getString("Customer_ID")), rs.getString("Account_Number"),
                    rs.getString("Customer_Name"), rs.getString("Vision_OUC"),
                    rs.getString("Vision_SBU"), rs.getString("Vision_SBU_Full"), rs.getString("Customer_Open_Date")});
                //all_accounts.
            }
            System.out.println(all_accounts.getRowCount());
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
        String accountNumber = account_number.getText();
        searchAccount(accountNumber);
    }//GEN-LAST:event_searchActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:

        String customerName = customer_name.getText();
        updateAccountInfo(customerName);
    }//GEN-LAST:event_updateActionPerformed

    private void search_accountsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_accountsActionPerformed
        // TODO add your handling code here:
        searchAccounts();
    }//GEN-LAST:event_search_accountsActionPerformed

    private void update_accountsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_accountsActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) all_accounts.getModel();
        for (int row = 0; row < all_accounts.getRowCount(); row++) {
            System.out.println(row);

            String country = model.getValueAt(row, 0).toString();
            String leBook = model.getValueAt(row, 1).toString();
            String customerID = model.getValueAt(row, 2).toString();
            String account_Number = model.getValueAt(row, 3).toString();
            String customerName = model.getValueAt(row, 4).toString();
            String visionOUC = model.getValueAt(row, 5).toString();
            String visionSBU = model.getValueAt(row, 6).toString();
            String visionSBUFull = model.getValueAt(row, 7).toString();
            String customerOpenDate = model.getValueAt(row, 8).toString();
            
            System.out.println(country);
            System.out.println(leBook);
            System.out.println(customerID);
            System.out.println(account_Number);
            System.out.println(customerName);
            System.out.println(visionOUC);
            System.out.println(visionSBU);
            System.out.println(visionSBUFull);
            System.out.println(customerOpenDate);
        
            try {
                String sql = "insert into account_information(Country,LE_Book,Account_No,Account_Number,Customer_ID,Account_Name,Vision_OUC,Vision_SBU,Vision_SBU_Full,Account_Open_Date) values(?,?,?,?,?,?,?,?,?,?)"; 
                pst = conn.connection.prepareStatement(sql);
                pst.setString(1, country);
                pst.setString(2, leBook);
                pst.setString(3, customerID);
                pst.setString(4, account_Number);
                pst.setString(5, customerID);
                pst.setString(6, customerName);
                pst.setString(7, visionOUC);
                pst.setString(8, visionSBU);
                pst.setString(9, visionSBUFull);
                pst.setString(10, customerOpenDate);
                int update = pst.executeUpdate();
                if (update > 0) {
                    System.out.println("Account Info has been Updated!");
                }

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }
    }//GEN-LAST:event_update_accountsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Updating_Acccounting_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Updating_Acccounting_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Updating_Acccounting_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Updating_Acccounting_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Updating_Acccounting_Info().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField account_number;
    private javax.swing.JTable all_accounts;
    private javax.swing.JTextField customer_id;
    private javax.swing.JTextField customer_name;
    private com.toedter.calendar.JDateChooser from_date;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton search;
    private javax.swing.JButton search_accounts;
    private com.toedter.calendar.JDateChooser to_date;
    private javax.swing.JButton update;
    private javax.swing.JButton update_accounts;
    // End of variables declaration//GEN-END:variables
}
